{"version":3,"sources":["components/header/AppHeader.jsx","components/footer/Footer.jsx","components/linechart/LineChart.jsx","components/linechart/SmallLineChart.jsx","components/drawsignal/DrawSignal.jsx","components/viz/Viz.jsx","components/helperfunctions/HelperFunctions.jsx","components/rocchart/ROCChart.jsx","components/histogram/HistogramChart.jsx","components/scatterplot/ScatterPlot.jsx","components/losschart/LossChart.jsx","components/composemodel/ComposeModel.jsx","components/train/models/ae.jsx","components/train/Train.jsx","components/faq/Faq.jsx","components/Main.jsx","serviceWorker.js","index.js"],"names":["AppHeader","props","appName","appDescription","aria-label","this","prefix","className","src","alt","exact","to","Component","Footer","style","zIndex","href","target","LineChart","state","data","color","minChartWidth","width","minChartHeight","height","drawGraph","prevProps","prevState","lastUpdated","setState","updateGraph","chartMargin","top","right","bottom","left","chartWidth","chartHeight","n","length","xScale","d3","domain","range","yScale","xAxis","yAxis","tickSize","self","setupScalesAxes","svg","transition","select","duration","attr","line","call","g","remove","selectAll","margin","x","d","i","y","dataset","append","datum","SmallLineChart","chart","miniChartWidth","miniChartHeight","canvas","refs","smalllinecanvas","context","getContext","translate","scale","strokeStyle","prev_stat","move_left_by","stat","the_stat","beginPath","moveTo","lineTo","lineWidth","lineCap","stroke","ref","id","DrawSignal","signalExtracted","smallChartWidth","smallChartHeight","prevX","currX","prevY","currY","dot_flag","strokeColor","flag","drawMap","Map","signalCount","pointColors","setUpCanvasSize","drawsignaloutcanvas","smallChartContext","largeChartCanvas","drawsignalcanvas","largeChartContext","addEventListener","mouseDownEvent","bind","mouseUpEvent","mouseMoveEvent","mouseOutEvent","touchEndEvent","touchStartEvent","touchMoveEvent","ynScale","closePath","has","set","res","e","fillStyle","fillRect","miniGraph","xPos","yPos","setXYCoords","draw","console","log","changedTouches","pageY","pageX","offsetLeft","offsetTop","findxy","updateMove","removeEventListener","size","clearRect","start","end","prevMean","sum","count","get","rangeMean","values","next","value","curMean","signalHolder","signalHolderScaled","step","Math","floor","updateCurrentSignal","Button","renderIcon","onClick","clearDrawing","Viz","modelChartWidth","min","window","innerWidth","modelChartHeight","testData","require","slice","apptitle","trainData","selectedIndex","selectedData","showDrawData","drawSectionWidth","drawSectionHeight","loadData","chartColorMap","1","colornorm","name","2","3","4","5","maxSmallChart","modelDataLastUpdated","offsetWidth","getAttribute","colorAttrr","labelcolordiv","backgroundColor","predictioncolordiv","dataLegend","Object","entries","map","index","key","background","dataPoints","clickDataPoint","indexvalue","targetval","datasetExamples","dataSketchPad","modelOutput","setDatasetECG","setDatasetDraw","computeAccuracyGivenThreshold","threshold","predVal","truePositive","trueNegative","falsePositive","falseNegative","forEach","each","mse","label","acc","tp","tn","fp","fn","tpr","fpr","fnr","tnr","percentToRGB","percent","r","LeaderLine","animOptions","timing","ROCChart","numTicks","dotRadius","epoch","animationDuration","rocLine","rocArea","join","y0","y1","drawLines","text","auc","toFixed","HistogramChart","nice","bins","thresholds","ticks","binNorm","binsAnorm","x0","max","x1","meanNormal","meanAbnormal","midPoint","ScatterPlot","LossChart","innerHTML","loss","val_loss","trainLine","valLine","curve","ComposeModel","hiddenDims","latentDim","maxLayers","minLayers","maxUnits","minUnits","defaultLayerDim","isTraining","latentLineWidth","lineHolder","rightTopAnchor","rightBottomAnchor","leftTopAnchor","leftBottomAnchor","rightMiddle","leftMiddle","blueColor","greyColor","drawAllLines","network","attributeName","attributeValue","document","querySelector","layer","startId","endId","startEl","getElement","endEl","params","pathType","drawLeaderLine","latentDiv","getElementById","addLayerLines","addEncDecLines","lineId","toRemove","position","newHolder","push","startElement","endElement","startAnchor","endAnchor","lineColor","pointAnchor","startPlug","endPlug","startPlugColor","path","hide","dash","gap","show","opt","setOptions","redrawLine","updateModelDims","removeLayerLines","animateLines","adv","redrawAllLines","removeAllLines","varGroup","newDims","decoderDims","dimType","currentDims","getDims","setStateVal","pop","currentUnit","latentLayers","layerindex","eachLayer","_","unitindex","layergroup","buttonaction","updateUnits","encLayers","nodeunit","layerdiv","decLayers","updateLayerClick","tf","Train","stepOptions","type","regularizerOptions","batchSizeOptions","learningRateOptions","trainingDataOptions","testDataOptions","optimizerOptions","abnormalPercentageOptions","selectedAbnormalPercentage","selectedTrainDataOption","selectedTestDataOption","selectedOptimizer","selectedRegularizer","trainMetricHolder","CumulativeSteps","trainDataShape","testDataShape","mseData","rocData","createdModel","encodedData","currentEpoch","numFeatures","hiddenLayers","hiddenDim","learningRate","regularizer","adamBeta1","optimizer","outputActivation","batchSize","numSteps","numEpochs","trainMetrics","trainDataSize","testDataSize","modelStale","bestMetric","minThreshold","maxThreshold","showModelComposer","showModelEvaluationMetrics","showRocChart","showLossChart","showMseHistogram","showBottleneckScatterPlot","validateOnStep","showAdvanced","showIntroduction","showWarmingUp","lossChartHeight","lossChartWidth","abnormalPercentage","showOptions","action","checked","currentSteps","xsTrain","xsTest","yTest","trainDataPath","testDataPath","momentum","modelWarmedUp","generateDataTensors","setTimeout","getChartContainerSizes","computeAccuracyMetrics","dispose","disposeModelTensors","adam","adamax","adadelta","rmsprop","sgd","modelParams","regularizationRate","layerRegularizer","regularizers","l1","l2","l1l2","input","shape","encoderHidden","layers","dense","units","activation","kernelRegularizer","apply","z_","encoder","model","inputs","outputs","latentInput","decoderHidden","j","decoderOutput","output","ae","compile","buildModel","getPredictions","warmUpTensor","item","startTime","Date","fit","epochs","verbose","then","elapsedTime","validationData","metricRow","history","traintime","trainModel","savedModel","loadTestData","uniqueMse","sortBy","reverse","rocMetricHolder","rocSum","prevMetric","metric","preds","predict","square","mean","mseDataHolder","array","element","getLayer","getOutputAt","encoderPredictions","encPredHolder","maxAbnormalCount","abnormalCount","trainEcg","row","val","createModel","selectedItem","threshVal","offsetHeight","chartState","box","showCheckBoxes","Checkbox","defaultChecked","wrapperClassName","labelText","showOptionsClick","trainResetButtons","resetModelButtonClick","fill","trainButtonClick","configBar","Dropdown","items","initialSelectedItem","itemToString","onChange","updateModelParam","firstEncode","compBoxSize","modelComposerBlock","lossChartBlock","rocChartBlock","mseHistogramBlock","bottleneckScatterPlotBlock","modelMetricsBlock","Slider","minLabel","maxLabel","stepMuliplier","disabled","hideTextInput","updateThreshold","borderLeftColor","toggleIntroDrawer","rel","toggleAdvancedDrawer","Tooltip","direction","triggerText","Faq","metricData","createBrowserHistory","basename","forceRefresh","keyLength","getUserConfirmation","message","callback","confirm","linkHolder","updateLh","location","hash","listen","Main","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","URL","process","origin","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fee69c3f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n    Header,\n    HeaderName,\n    HeaderNavigation,\n    //   HeaderMenuItem,\n    HeaderGlobalBar,\n    HeaderGlobalAction,\n    SkipToContent,\n} from 'carbon-components-react/lib/components/UIShell';\nimport {\n    NavLink\n} from \"react-router-dom\";\n\nimport \"./header.css\"\n// import Notification20 from '@carbon/icons-react/lib/notification/20';\n// import UserAvatar20 from '@carbon/icons-react/lib/user--avatar/20';\nimport AppSwitcher20 from '@carbon/icons-react/lib/app-switcher/20';\n\nclass AppHeader extends Component {\n    constructor(props) {\n        super(props)\n\n        this.appName = \"Anomagram\"\n        this.appDescription = \"An interactive visualization for exploring deep learning models applied to the task of anomaly detectiion.\"\n\n\n    }\n    render() {\n        return (\n            <div>\n                <Header aria-label={this.appDescription}>\n                    <SkipToContent />\n                    <HeaderName prefix=\"\">\n                        {/* <div className=\"decornone \"><NavLink exact to=\"/\"> </NavLink></div> */}\n                        <img className=\"headericon\" src=\"images/icon.png\" alt=\"\" />\n                        {this.appName}\n                    </HeaderName>\n                    <HeaderNavigation aria-label={this.appDescription}>\n                        {/* <HeaderMenuItem element={Link} to=\"/\" className=\"navbarlink \"> Datasets </HeaderMenuItem> */}\n                        {/* <HeaderMenuItem  element={Link} to=\"/models\" className=\"navbarlink \"> Models</HeaderMenuItem> */}\n                        <div className=\"navbarlinks  \"><NavLink exact to=\"/\"> Introduction </NavLink></div>\n                        <div className=\"navbarlinks \"><NavLink to=\"/train\"> Train a Model </NavLink></div>\n                        {/* <div className=\"navbarlinks \"><NavLink to=\"/faq\"> FAQ </NavLink></div> */}\n                        {/* <div className=\"navbarlinks \"><NavLink to=\"/algebra\"> Image Algebra </NavLink></div> */}\n                        {/* <div className=\"navbarlinks \"><NavLink to=\"/energy\"> Energy Explorer </NavLink></div> */}\n                    </HeaderNavigation>\n                    <HeaderGlobalBar>\n                        {/* <HeaderGlobalAction aria-label=\"Notifications\">\n                    <Notification20 />\n                </HeaderGlobalAction>\n                */}\n                        {/* <HeaderGlobalAction aria-label=\"User Avatar\">\n                    <UserAvatar20 />\n                </HeaderGlobalAction> */}\n                        <HeaderGlobalAction aria-label=\"App Switcher\">\n                            <AppSwitcher20 />\n                        </HeaderGlobalAction>\n                    </HeaderGlobalBar>\n                </Header>\n                <div className=\"headerboost\">  </div>\n            </div>\n\n        );\n    }\n}\n\nexport default AppHeader;\n","import React, { Component } from \"react\";\nimport \"./footer.css\"\n\nclass Footer extends Component {\n    render() {\n        return (\n            <div style={{ zIndex: 999000 }}>\n                Made with <span className=\"redcolor\">&#9829;</span> by <a href=\"https://twitter.com/vykthur\" target=\"blank\">Victor Dibia</a>.\n            </div>\n        );\n    }\n}\n\nexport default Footer;","import React, { Component } from 'react'\n// import { loadJSONData, abbreviateString } from \"../helperfunctions/HelperFunctions\"\nimport \"./linechart.css\"\nimport * as d3 from \"d3\"\n\n\nclass LineChart extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            data: this.props.data,\n            color: this.props.color\n        }\n\n\n\n        this.minChartWidth = this.props.width\n        this.minChartHeight = this.props.height\n\n        // console.log(this.props);\n\n\n    }\n\n    componentDidMount() {\n        // console.log(\"Line component mounted\")\n        this.drawGraph()\n\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        // console.log(this.props.index, prevProps.index);\n\n        if (this.props.lastUpdated !== prevProps.lastUpdated) {\n            this.setState({ data: this.props.data })\n            // console.log(\"stuff hass changed\", this.props.data);\n            this.updateGraph(this.props.data)\n\n        }\n\n    }\n\n    setupScalesAxes(data) {\n        this.chartMargin = { top: 10, right: 5, bottom: 40, left: 20 }\n        this.chartWidth = this.minChartWidth - this.chartMargin.left - this.chartMargin.right\n        this.chartHeight = this.minChartHeight - this.chartMargin.top - this.chartMargin.bottom;\n\n        // consolse.log(data);\n\n        var n = data.length;\n\n        this.xScale = d3.scaleLinear()\n            .domain([0, n - 1]) // input\n            .range([0, this.chartWidth]); // output\n\n\n        this.yScale = d3.scaleLinear()\n            .domain([d3.min(data), d3.max(data)]) // input \n            .range([this.chartHeight, 0]); // output \n\n        this.xAxis = d3.axisBottom(this.xScale)\n        this.yAxis = d3.axisRight(this.yScale)\n            .tickSize(this.minChartWidth)\n\n    }\n\n    updateGraph(data) {\n        let self = this\n        // console.log(data)\n        this.setupScalesAxes(data)\n        // Select the section we want to apply our changes to\n        var svg = d3.select(\"div.linechartbox\").transition();\n\n\n        // Make the changes\n        svg.select(\".line\")   // change the line\n            .duration(750)\n            .attr(\"stroke\", this.state.color)\n            .attr(\"d\", this.line(data));\n        function customYAxis(g) {\n            g.call(self.yAxis);\n            svg.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"stroke\", \"rgba(172, 172, 172, 0.74)\").attr(\"stroke-dasharray\", \"2,2\");\n            g.selectAll(\".tick text\").attr(\"x\", -20).attr(\"y\", -.01)\n        }\n        svg.select(\".y.axis\")\n            .call(customYAxis).duration(5);\n    }\n\n\n    drawGraph() {\n        let self = this\n        this.setupScalesAxes(this.state.data)\n        let width = this.chartWidth, height = this.chartHeight, margin = this.chartMargin\n\n\n        // 7. d3's line generator\n        this.line = d3.line()\n            .x(function (d, i) { return self.xScale(i); }) // set the x values for the line generator\n            .y(function (d) { return self.yScale(d); }) // set the y values for the line generator \n        // .curve(d3.curveMonotoneX) // apply smoothing to the line\n\n        // 8. An array of objects of length N. Each object has key -> value pair, the key being \"y\" and the value is a random number\n        var dataset = this.state.data\n\n\n        // d3.range(n).map(function (d) { return { \"y\": d3.randomUniform(1)() } })\n\n        function customYAxis(g) {\n            g.call(self.yAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"stroke\", \"rgba(172, 172, 172, 0.74)\").attr(\"stroke-dasharray\", \"2,2\");\n            g.selectAll(\".tick text\").attr(\"x\", -20).attr(\"y\", -.01)\n        }\n\n        function customXAxis(g) {\n            g.call(self.xAxis);\n            g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"x\", 100)\n            g.selectAll(\".tick text\").attr(\"y\", 15)\n        }\n\n        // 1. Add the SVG to the page and employ #2\n        var svg = d3.select(\"div.linechartbox\").append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n        // 3. Call the x axis in a group tag\n        svg.append(\"g\")\n            .attr(\"class\", \"x axis\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(customXAxis); // Create an axis component with d3.axisBottom\n\n        // 4. Call the y axis in a group tag\n        svg.append(\"g\")\n            .attr(\"class\", \"y axis\")\n            .call(customYAxis); // Create an axis component with d3.axisLeft\n\n        // 9. Append the path, bind the data, and call the line generator \n        svg.append(\"path\")\n            .datum(dataset) // 10. Binds data to the line \n            .attr(\"class\", \"line\") // Assign a class for styling \n            .attr(\"stroke\", this.state.color)\n            .attr(\"d\", this.line); // 11. Calls the line generator \n\n        // // 12. Appends a circle for each datapoint \n        // svg.selectAll(\".dot\")\n        //     .data(dataset)\n        //     .enter().append(\"circle\") // Uses the enter().append() method\n        //     .attr(\"class\", \"dot\") // Assign a class for styling\n        //     .attr(\"cx\", function (d, i) { return xScale(i) })\n        //     .attr(\"cy\", function (d) { return yScale(d) })\n        //     .attr(\"r\", 5)\n        //     .on(\"mouseover\", function (a, b, c) {\n        //         console.log(a)\n        //         // this.attr('class', 'focus')\n        //     })\n    }\n\n\n    render() {\n\n\n\n        return (\n            <div>\n\n                <div className=\"linechartbox \">\n\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default LineChart","import React, { Component } from 'react'\n// import { loadJSONData, abbreviateString } from \"../helperfunctions/HelperFunctions\"\nimport \"./linechart.css\"\nimport * as d3 from \"d3\"\n\nclass SmallLineChart extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            chart: this.props.data\n        }\n\n        this.miniChartWidth = this.props.data.chartWidth\n        this.miniChartHeight = this.props.data.chartHeight\n\n\n\n\n    }\n\n    componentDidMount() {\n        // console.log(\"Line component mounted\")\n        let canvas = this.refs.smalllinecanvas\n        canvas.width = this.miniChartWidth\n        canvas.height = this.miniChartHeight;\n        this.drawGraph()\n\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n\n\n    }\n\n\n\n    drawGraph() {\n        this.chartMargin = { top: 0, right: 0, bottom: 0, left: 0 }\n        this.chartWidth = this.miniChartWidth - this.chartMargin.left - this.chartMargin.right\n        this.chartHeight = this.miniChartHeight - this.chartMargin.top - this.chartMargin.bottom;\n\n\n        let data = this.state.chart.data.data\n        var n = data.length;\n        // console.log(data, n);\n\n\n        this.xScale = d3.scaleLinear()\n            .domain([0, n - 1]) // input\n            .range([0, this.chartWidth]); // output\n\n\n        this.yScale = d3.scaleLinear()\n            .domain([d3.min(data), d3.max(data)]) // input \n            .range([0, this.chartHeight]); // output\n\n        // console.log(data);\n\n\n        let canvas = this.refs.smalllinecanvas,\n            context = canvas.getContext('2d')\n\n\n\n        context.translate(0, this.chartHeight);\n        context.scale(1, -1);\n\n        context.strokeStyle = this.state.chart.color;\n        // console.log(this.state.chart.color);\n\n\n        // context.fillStyle = '#f6f6f6';\n        // context.fillRect(0, 0, this.chartWidth, this.chartHeight);\n\n        var left = 0,\n            prev_stat = data[0],\n            move_left_by = this.chartWidth / data.length;\n\n        for (let stat in data) {\n            // console.log(data[stat], this.yScale(data[stat]));\n\n            let the_stat = this.yScale(data[stat]);\n\n            context.beginPath();\n            context.moveTo(left, prev_stat);\n            context.lineTo(left + move_left_by, the_stat);\n            context.lineWidth = 1.6;\n            context.lineCap = 'round';\n            /*\n                if(the_stat < stats[stat-1]) {\n                    context.strokeStyle = '#c0392b';\n                } else {\n                    context.strokeStyle = '#3b3b3b';\n                }\n                */\n            context.stroke();\n\n            prev_stat = the_stat;\n            left += move_left_by;\n\n        }\n    }\n\n\n    render() {\n\n\n\n        return (\n            <div className=\"iblock mt2\">\n                <canvas ref=\"smalllinecanvas\" id=\"smalllinecanvas\"></canvas>\n            </div>\n        )\n    }\n}\n\nexport default SmallLineChart","import React, { Component } from \"react\";\nimport \"./drawsignal.css\"\nimport * as d3 from \"d3\"\n// import * as _ from \"lodash\"\nimport { Button } from \"carbon-components-react\"\n\nclass DrawSignal extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            signalExtracted: false\n        }\n\n\n\n        this.chartWidth = this.props.width\n        this.chartHeight = this.props.height\n\n        // console.log(this.props, this.chartHeight, this.chartWidth);\n\n        this.smallChartWidth = 150\n        this.smallChartHeight = 40\n\n        this.prevX = 0\n        this.currX = 0\n        this.prevY = 0\n        this.currY = 0\n        this.dot_flag = false;\n\n        this.strokeColor = \"black\"\n        this.lineWidth = 2\n        this.flag = false\n\n        this.drawMap = new Map()\n        this.signalCount = 140\n        this.pointColors = []\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        // console.log(\"props changing\", this.props);\n\n        // console.log(prevProps.data.epoch, this.props.data.epoch)\n        if ((this.props.width !== prevProps.width)) {\n            // console.log(\"props updated\");\n            this.chartWidth = this.props.width\n            this.setUpCanvasSize()\n        }\n\n    }\n\n    componentDidMount() {\n\n\n        this.refs.drawsignaloutcanvas.width = this.smallChartWidth\n        this.refs.drawsignaloutcanvas.height = this.smallChartHeight\n        this.smallChartContext = this.refs.drawsignaloutcanvas.getContext('2d')\n\n        // console.log(\"Line component mounted\")\n        this.largeChartCanvas = this.refs.drawsignalcanvas\n        this.setUpCanvasSize()\n        this.largeChartContext = this.largeChartCanvas.getContext('2d')\n\n        this.largeChartCanvas.addEventListener(\"mousedown\", this.mouseDownEvent.bind(this))\n        this.largeChartCanvas.addEventListener(\"mouseup\", this.mouseUpEvent.bind(this))\n        this.largeChartCanvas.addEventListener(\"mousemove\", this.mouseMoveEvent.bind(this))\n        this.largeChartCanvas.addEventListener(\"mouseout\", this.mouseOutEvent.bind(this))\n\n        this.largeChartCanvas.addEventListener(\"touchend\", this.touchEndEvent.bind(this))\n        this.largeChartCanvas.addEventListener(\"touchstart\", this.touchStartEvent.bind(this))\n        this.largeChartCanvas.addEventListener(\"touchmove\", this.touchMoveEvent.bind(this))\n\n\n        // Set up scales \n        this.xScale = d3.scaleLinear()\n            .domain([0, this.signalCount - 1]) // input\n            .range([0, this.smallChartWidth]); // output\n\n\n        this.yScale = d3.scaleLinear()\n            .domain([0, this.chartHeight]) // input \n            .range([0, this.smallChartHeight]); // output\n\n\n        this.ynScale = d3.scaleLinear()\n            .domain([0, this.chartHeight]) // input \n            .range([2, -5]); // output\n\n    }\n\n    setUpCanvasSize() {\n        this.largeChartCanvas.width = this.chartWidth\n        this.largeChartCanvas.height = this.chartHeight;\n    }\n\n\n    draw() {\n\n\n        this.largeChartContext.beginPath();\n        this.largeChartContext.moveTo(this.prevX, this.prevY);\n        this.largeChartContext.lineTo(this.currX, this.currY);\n        this.largeChartContext.strokeStyle = this.strokeColor;\n        this.largeChartContext.lineWidth = this.lineWidth;\n        this.largeChartContext.stroke();\n        this.largeChartContext.closePath();\n        // console.log(this.currX, this.currY);\n\n        if (!this.drawMap.has(this.currX)) {\n            this.drawMap.set(this.currX, this.currY)\n\n        }\n\n    }\n\n\n\n    findxy(res, e) {\n        if (res === 'down') {\n            this.flag = true;\n            this.dot_flag = true;\n            if (this.dot_flag) {\n                this.largeChartContext.beginPath();\n                this.largeChartContext.fillStyle = this.strokeColor;\n                this.largeChartContext.fillRect(this.currX, this.currY, 2, 2);\n                this.largeChartContext.closePath();\n                this.dot_flag = false;\n            }\n        }\n        if (res === 'up') {\n            this.flag = false;\n            this.miniGraph()\n        }\n        if (res === \"out\") {\n            this.flag = false;\n        }\n        if (res === 'move') {\n\n        }\n    }\n\n    setXYCoords(xPos, yPos) {\n        this.prevX = this.currX;\n        this.prevY = this.currY;\n        this.currX = xPos\n        this.currY = yPos\n    }\n\n    updateMove(xPos, yPos) {\n        if (this.flag) {\n            this.setXYCoords(xPos, yPos)\n            this.draw();\n        }\n    }\n\n    touchStartEvent(e) {\n        console.log(e.changedTouches[0].pageY);\n        this.setXYCoords(e.changedTouches[0].pageX - this.largeChartCanvas.offsetLeft, e.changedTouches[0].pageY - this.largeChartCanvas.offsetTop)\n        this.findxy('down', e)\n    }\n\n    touchEndEvent(e) {\n        this.findxy('up', e)\n    }\n    touchMoveEvent(e) {\n        console.log(e.changedTouches.length);\n        for (let i = 0; i < e.changedTouches.length; i++) {\n            console.log(\"touchpoint[\" + i + \"].pageX = \" + e.changedTouches[i].pageX);\n            console.log(\"touchpoint[\" + i + \"].pageY = \" + e.changedTouches[i].pageY);\n            this.updateMove(e.changedTouches[i].pageX - this.largeChartCanvas.offsetLeft, e.changedTouches[i].pageY - this.largeChartCanvas.offsetTop)\n        }\n    }\n\n\n    mouseDownEvent(e) {\n        this.setXYCoords(e.pageX - this.largeChartCanvas.offsetLeft, e.pageY - this.largeChartCanvas.offsetTop)\n        this.findxy('down', e)\n    }\n    mouseUpEvent(e) {\n        this.findxy('up', e)\n    }\n    mouseMoveEvent(e) {\n        this.updateMove(e.pageX - this.largeChartCanvas.offsetLeft, e.pageY - this.largeChartCanvas.offsetTop)\n    }\n    mouseOutEvent(e) {\n        this.findxy('out', e)\n    }\n\n\n\n    componentWillUnmount() {\n        this.largeChartCanvas.removeEventListener(\"mousedown\", this.mouseDownEvent)\n        this.largeChartCanvas.removeEventListener(\"mouseup\", this.mouseUpEvent)\n        this.largeChartCanvas.removeEventListener(\"mouseover\", this.mouseMoveEvent)\n        this.largeChartCanvas.removeEventListener(\"mouseout\", this.mouseOutEvent)\n\n\n        this.largeChartCanvas.removeEventListener(\"touchend\", this.touchEndEvent)\n        this.largeChartCanvas.removeEventListener(\"touchstart\", this.touchStartEvent)\n        this.largeChartCanvas.removeEventListener(\"touchmove\", this.touchMoveEvent)\n\n\n    }\n\n    miniGraph() {\n        if (this.drawMap.size > 0) {\n            this.drawGraph(this.drawMap)\n\n        }\n    }\n\n    clearDrawing() {\n\n        this.largeChartContext.clearRect(0, 0, this.chartWidth, this.chartHeight);\n        this.smallChartContext.clearRect(0, 0, this.smallChartWidth, this.smallChartHeight);\n\n        this.drawMap = new Map()\n        this.setState({ signalExtracted: false })\n    }\n\n    rangeMean(i, start, end, prevMean, data) {\n        let sum = 0\n        let count = 0\n        for (let i = start; i <= end; i++) {\n            if (data.get(i * 1)) {\n                sum += data.get(i * 1)\n                count++\n            }\n        }\n\n        let rangeMean = sum / count\n        this.pointColors[i] = \"blue\"\n        if (count === 0) {\n            rangeMean = prevMean\n            this.pointColors[i] = \"orange\"\n        }\n\n        // console.log(start, end, sum, count, rangeMean);\n        return rangeMean\n    }\n    drawGraph(data) {\n\n        let canv = this.refs.drawsignaloutcanvas\n        let context = canv.getContext(\"2d\")\n\n        this.smallChartContext.clearRect(0, 0, this.chartWidth, this.chartWidth);\n\n        // context.translate(0, this.chartHeight);\n        // context.scale(1, -1);\n\n        let prevMean = data.values().next().value\n        let curMean = 0\n        let signalHolder = []\n        let signalHolderScaled = []\n\n        let step = (this.chartWidth / this.signalCount)\n        for (let i = 0; i < this.signalCount; i++) {\n            curMean = this.rangeMean(i, Math.floor(i * step), Math.floor(i * step + step), prevMean, data)\n            signalHolder[i] = curMean\n            signalHolderScaled[i] = this.ynScale(curMean)\n            prevMean = curMean\n        }\n        this.setState({ signalExtracted: true })\n        this.props.updateCurrentSignal(signalHolderScaled)\n\n\n        // console.log(signalHolder);\n        let prevX = 0, prevY = signalHolder[0]\n        let currX = 0, currY = 0\n        for (let i = 1; i < signalHolder.length; i++) {\n            currX = i\n            currY = signalHolder[i] || signalHolder[i - 1]\n            context.beginPath();\n            context.moveTo(this.xScale(prevX), this.yScale(prevY));\n            context.lineTo(this.xScale(currX), this.yScale(currY));\n            context.strokeStyle = this.pointColors[i]\n            context.lineWidth = this.lineWidth;\n            context.stroke();\n            context.closePath();\n            prevX = currX\n            prevY = currY\n\n        }\n    }\n\n\n    render() {\n        return (\n            // <div style={{ width: this.chartWidth + 25 }} className=\"mt2 border p10\">\n            <div className=\" w100 \" >\n                <div className=\"p5 iblock mediumdesc\">\n                    Click and drag to draw a signal. Please draw within the box.\n                </div>\n                <div className={\"unclickable positionabsolute  smallchartbox \" + (this.state.signalExtracted ? \" \" : \" displaynone\")} >\n                    <canvas className=\"smallchart\" ref=\"drawsignaloutcanvas\" id=\"drawsignalcanvas\"></canvas>\n                    <div className={\"smalldesc extractedsignal \" + (this.state.signalExtracted ? \" \" : \" displaynone\")}> Extracted signal </div>\n                    {/* <div className={\"smalldesc pt5 \" + (this.state.signalExtracted ? \" \" : \" displaynone\")}> draw signal </div> */}\n                </div>\n                <div className=\"\">\n                    <canvas className=\"border iblock largechart\" ref=\"drawsignalcanvas\" id=\"drawsignalcanvas\"></canvas>\n                </div>\n\n                <div className=\"pt5\">\n                    <Button\n                        size={\"small\"}\n                        renderIcon={null}\n                        onClick={this.clearDrawing.bind(this)}\n                    > Clear Drawing </Button>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default DrawSignal","import React, { Component } from 'react'\n// import { Toggle } from 'carbon-components-react';\n// import { loadJSONData } from \"../helperfunctions/HelperFunctions\"\nimport \"./viz.css\"\nimport LineChart from \"../linechart/LineChart\"\nimport SmallLineChart from \"../linechart/SmallLineChart\"\nimport DrawSignal from \"../drawsignal/DrawSignal\"\n// import \"../../data\" \n\n\nclass Viz extends Component {\n    constructor(props) {\n        super(props)\n\n        this.modelChartWidth = Math.min(390, window.innerWidth - 25)\n        this.modelChartHeight = 300\n\n        // Allow the draw signal component update current signal with drawn signal\n        this.updateCurrentSignal = this.updateCurrentSignal.bind(this)\n\n \n        this.testData = require(\"../../data/ecg/test.json\")\n        this.testData = this.testData.slice(0, 70)\n        this.state = {\n            apptitle: \"Anomagram\", \n            trainData: [],\n            selectedIndex:0,\n            selectedData: this.testData[0].data,\n            showDrawData: false,\n            drawSectionWidth: 350,\n            drawSectionHeight: this.modelChartHeight - 30\n        }\n\n\n        // this.trainData = require(\"../../data/ecg/train.json\")\n        // console.log(this.testData.length, this.trainData.length)\n\n        this.loadData()\n\n        this.chartColorMap = {\n            1: { color: \"#0062ff\", colornorm: \"#0062ff\", name: \"Normal\" },\n            2: { color: \"#ffa32c\", colornorm: \"grey\", name: \"R-on-T Premature Ventricular Contraction\" },\n            3: { color: \"violet\", colornorm: \"grey\", name: \"Supraventricular Premature or Ectopic Beat \" },\n            4: { color: \"orange\", colornorm: \"grey\", name: \"Premature Ventricular Contraction\" },\n            5: { color: \"red\", colornorm: \"grey\", name: \"Unclassifiable Beat\" },\n        }\n\n        this.maxSmallChart = 100\n        this.modelDataLastUpdated = true\n        \n\n    }\n\n    updateCurrentSignal(data) {\n        // console.log(data);\n        this.modelDataLastUpdated = !this.modelDataLastUpdated \n        // console.log(this.state.selectedData); \n        this.setState({ selectedData: data })\n       \n    }\n\n    loadData() {\n        // let testECGDataPath = process.env.PUBLIC_URL + \"/data/ecg/test_small.json\"\n        // let trainECGDataPath = process.env.PUBLIC_URL + \"/data/ecg/train_small.json\"\n        // loadJSONData(testECGDataPath).then(data => {\n        //     this.setState({ testData: data })\n        //     // console.log(\"test data loaded\", data.length)\n        // })\n\n        // loadJSONData(trainECGDataPath).then(data => {\n        //     this.setState({ trainData: data })\n        // })\n\n    }\n    componentDidUpdate(prevProps, prevState) {\n\n\n    }\n\n\n    componentDidMount() {\n        this.apptitle = \"Amadioha\"\n\n        // window.addEventListener(\"resize\", this.onWindowResize.bind(this))\n        // console.log(this.refs[\"datasection\"].offsetWidth)\n        this.setState({ drawSectionWidth: this.refs[\"datasection\"].offsetWidth -5 })\n        this.drawSectionWidth = this.refs[\"datasection\"].offsetWidth\n        \n\n    }\n\n    componentWillUnmount() {\n        // window.removeEventListener(\"resize\", this.onWindowResize)\n\n    }\n\n    onWindowResize() {\n        console.log(this.refs[\"datasection\"].offsetWidth);\n        \n        this.setState({ drawSectionWidth: this.refs[\"datasection\"].offsetWidth -5 })\n    }\n\n    clickDataPoint(e) {\n        this.modelDataLastUpdated = !this.modelDataLastUpdated \n        this.setState({ selectedData: this.testData[e.target.getAttribute(\"indexvalue\")].data })\n        this.setState({selectedIndex: e.target.getAttribute(\"indexvalue\")})\n\n        let colorAttrr = e.target.getAttribute(\"targetval\") + \"\" === \"1\" ? \"green\" : \"red\"\n        // console.log(e.target.getAttribute(\"targetval\"), colorAttrr)\n        this.refs.labelcolordiv.style.backgroundColor = colorAttrr\n        this.refs.predictioncolordiv.style.backgroundColor = colorAttrr\n    }\n\n    toggleDataOptions(e) { \n        this.setState({showDrawData: e})\n    }\n    setDatasetDraw(e) {\n        this.setState({ showDrawData: true })\n        // this.setState({ drawSectionWidth: this.refs[\"datasection\"].offsetWidth })\n        console.log(this.refs[\"datasection\"].offsetWidth);\n        \n    }\n    setDatasetECG(e) {\n        this.setState({showDrawData: false})\n    }\n\n    render() {\n\n\n        let dataLegend = Object.entries(this.chartColorMap).map((data, index) => {\n            let color = data[1].color\n            let name = data[1].name\n            return (\n                <div className=\"iblock mr10 mb5\" key={\"legendrow\" + index}>\n                    <div style={{ background: color }} className=\"indicatorcircle iblock mr5\"></div>\n                    <div className=\"iblock legendtext pl4 mediumdesc\"> {name}</div>\n                    <div className=\"iblock\"></div>\n\n                </div>\n            )\n        });\n\n        let dataPoints = this.testData.slice(0, this.maxSmallChart).map((data, index) => {\n            return (\n                <div onClick={this.clickDataPoint.bind(this)} key={\"testrow\" + index} className={\"mb5 p5 clickable  ecgdatapoint rad3 iblock mr5\" + (this.state.selectedIndex + \"\" === (index + \"\") ? \" active\" : \"\")} indexvalue={index} targetval={data.target} >\n                    <div indexvalue={index} className=\"boldtext  unclickable iblock \">\n\n                        <div className=\"positionrelative\">\n                            <div className=\"p3 indicatoroutrcircle  positionabsolute bottomright\">\n                                <div style={{ background: this.chartColorMap[this.testData[index].target].color }} className=\"indicatorcircle \"></div>\n                            </div>\n                            <SmallLineChart\n                                data={{\n                                    data: this.testData[index],\n                                    index: index,\n                                    color: this.chartColorMap[this.testData[index].target].colornorm,\n                                    chartWidth: 72,\n                                    chartHeight: 30\n                                }}\n                            > </SmallLineChart>\n                        </div>\n\n                    </div>\n\n                </div>\n            )\n        });\n\n        let datasetExamples = (\n            <div>\n                <div className=\"  \">\n                       \n                        <div className=\"mb5\">\n                            {dataLegend}\n                        </div>\n                        <div className=\"ecgdatabox scrollwindow\">\n                            {dataPoints}\n                        </div>\n                    </div>\n            </div>\n        )\n\n        let dataSketchPad = (\n            <div > \n                <DrawSignal\n                    width={this.state.drawSectionWidth}\n                    height={this.state.drawSectionHeight}\n                    updateCurrentSignal = {this.updateCurrentSignal}\n                ></DrawSignal>\n            </div>\n        )\n\n        let modelOutput = (\n            <div className=\" p10 modeloutputbox rad5 \">\n                        <div className=\"mb10 boldtext\"> Model Output</div>\n                        <div className=\"\"> \n                            {this.testData.length > 0 &&\n                                <div>\n                                    <div className=\"flex mediumdesc mb5 displaynone\">\n                                        <div className=\"mr10 boldtext\"> Label </div>\n                                        <div ref=\"labelcolordiv\" className=\"flexfull colorbox greenbox\"></div>\n                                        {/* <span className=\"boldtext\"> </span>: {this.chartColorMap[this.testData[this.state.selectedData].target].name} */}\n                                    </div>\n                                    <div className=\"flex mediumdesc mb5\">\n                                        <div className=\"mr10 boldtext\">\n                                            {this.testData[this.state.selectedIndex].target + \"\" === \"1\" ? \"NORMAL\" : \"ABNORMAL\"}\n                                        </div>\n                                        <div ref=\"predictioncolordiv\" className=\"flexfull colorbox redbox\"></div>\n                                        {/* <span className=\"boldtext\"> </span>: {this.chartColorMap[this.testData[this.testData].target].name} */}\n                                    </div>\n\n                                    <div className=\"iblock\"> \n                                        <LineChart\n                                            \n                                                data= {this.state.selectedData}\n                                index={this.state.selectedIndex}\n                                lastUpdated = {this.modelDataLastUpdated}\n                                                color={this.chartColorMap[this.testData[this.state.selectedIndex].target].colornorm}\n                                                width={this.modelChartWidth}\n                                                height= {this.modelChartHeight}\n                                             \n                                            \n                                        > </LineChart>\n                                    </div>\n                                </div>\n                            } \n                        </div> \n            </div>\n        )\n\n        // if (this.refs[\"datasetexamplebox\"]) {\n        //     console.log(this.refs[\"datasetexamplebox\"].offsetWidth);\n        // } \n\n        return (\n            <div> \n                <div className=\"bold mt10 sectiontitle mb10\">\n                    A Gentle Introduction to Anomaly Detection with Deep Learning (in the Browser!)\n                </div>\n\n                <div className=\"mynotif h100 lh10  lightbluehightlight maxh16  mb10\">\n                    {this.state.apptitle} is an interactive visualization tool for exploring\n                    deep learning models applied to the task of anomaly detection (on stationary data).\n                </div> \n                 \n                \n                <div className=\"mediumdesc pb5 \"> Select  Data source</div>\n                 \n                <div className=\"mb10 lowerbar\">\n                    <div onClick={this.setDatasetECG.bind(this)} className={\"datasettab clickable iblock mr5 \" + (this.state.showDrawData ? \"\" : \" active\")}> ECG5000 Dataset</div>\n                    <div onClick={this.setDatasetDraw.bind(this)} className={\"datasettab clickable iblock mr10 \" + (this.state.showDrawData ? \" active\" : \" \")}> Draw your ECG data</div>\n                </div>\n \n                <div  className=\"flex flexwrap \">\n                    \n                    <div ref=\"datasection\" className=\" flexwrapitem  flex20 \" >\n                            { <div ref=\"datasetexamplebox\" className={\" \" + (this.state.showDrawData ? \" displaynone\" : \" \")}>\n                            {datasetExamples}\n                            </div> }\n                            {<div className={\" \" + (!this.state.showDrawData ? \" displaynone\" : \" \")}>\n                            {dataSketchPad}\n                            </div> }\n                    </div>\n                   \n                    <div className=\"flexwrapitem\">\n                        {modelOutput}\n                    </div> \n                </div>\n                <div className=\"lh10 p10\">\n                    We have trained a two layer autoencoder with 2600 samples of normal ECG signal data.\n                    Each ECG signal contains 140 recordings of the electrical signal of the heart, corresponding to a heartbeat.\n                    Our test set (above) contains both normal and abormal ECG signals, and our model is tasked with distinguishing normal from abnormal signal.\n\n                </div>\n\n\n                { \n                <div className=\" \"> \n                    <div className=\"sectiontitle mt10 mb5\"> An Introduction to Autoencoders </div>\n                    <div className=\"\">\n                        <div className=\"flex\">\n                            <div className=\"flex6 lh10 mb10 pr10\">\n                            An autoencoder is a neural network that learns to map input data to a low dimension representation\n                                and then reconstruct the original input from this low dimension representation. The part of the network which learn the input to \n                                low dimension mapping is termed an encoder, while the section that maps from low dimension back to original input is termed the decoder.\n                            This capability of producing a low dimension representation is reminiscent dimensionality reduction approaches (e.g. PCA), and indeed\n                            Autoencoders have been typically used for dimensionbality reduction and compression use cases. For an indepth treatment of autoencoders, please see ... \n                            \n                            However, while \n                            </div>\n\n                            <div className=\"border rad4 p10 flex4\" style={{ height:\"200px\"}}>\n                                small autoencoder viz\n                            </div>\n                        </div>\n\n                    </div>\n\n\n                    <div className=\"sectiontitle mt10 mb5\"> Modeling Normal Data  </div>\n                    <div className=\"\">\n                        <div className=\"flex lh10 flexwrap\">\n                            <div className=\"flex20 flexwrapitem  mb10 pr10\">\n                                <div className=\"pb5 boldtext\"> Data Standardization  </div>\n                                                Most approaches to anomaly detection (and there are many) begin by constructing a model of \n                                            normal behaviour and then exploit this model to identify deviations from normal (anomalies or abnormal data).\n                                        Here is how we can use an autoencoder to model normal behaviour. If you recall, an autoencoder learns to compress \n                                        and reconstruct data. Notably this learned mapping is specific to the data type/distribution distribution of the training data.\n                                        In other words an autoencoder trained using 15 px images of dogs is unlikely to correctly reconstruct 20px images of the surface \n                                        of the moon.\n                            </div>\n                            <div className=\" flex20 flexwrapitem mr10\">\n                                    <div className=\"pb5 boldtext\"> Model Training </div>\n                                    Most approaches to anomaly detection (and there are many) begin by constructing a model of \n                                        normal behaviour and then exploit this model to identify deviations from normal (anomalies or abnormal data).\n                                    Here is how we can use an autoencoder to model normal behaviour. If you recall, an autoencoder learns to compress \n                                    and reconstruct data. Notably this learned mapping is specific to the data type/distribution distribution of the training data.\n                                    In other words an autoencoder trained using 15 px images of dogs is unlikely to correctly reconstruct 20px images of the surface \n                                    of the moon.\n                            </div>\n                            \n\n                            <div className=\"border rad4 p10 \" style={{ width:\"300px\", height:\"300px\"}}>\n                               Interactive replay of training run visualization\n                            </div>\n                        </div>\n\n                    </div>\n\n                    <div className=\"sectiontitle mt10 mb5\"> Model Evaluation: Accuracy is NOT Enough </div>\n                    <div className=\"\">\n                        <div className=\"flex\">\n                            <div className=\"flex6 lh10 mb10 pr10\">\n                            Data for this problem is likely imbalanced. The number of anomalies we encounter is likely to be much smaller than normal data.\n                            Consider we have a bad classifiier that simply flags all our data points as normal, it would still have a high accuracy value. \n\n                            </div>\n\n                            <div className=\"border rad4 p10 flex4\" style={{ height:\"200px\"}}>\n                                ROC curve and some metrics\n                            </div>\n                        </div>\n\n                    </div>\n\n                    <div className=\"sectiontitle mt10 mb10\"> Effect of Model Parameters </div>\n                    <div className=\"flex flexwrap\">\n                        \n                            <div className=\"flex3 flexwrapitem mr10\">\n                                <div className=\"flex6 lh10 mb10 pr10\">\n                                    <div className=\"pb5 boldtext\"> Learning Rate </div>\n                                Data for this problem is likely imbalanced. The number of anomalies we encounter is likely to be much smaller than normal data.\n                                Consider we have a bad classifiier that simply flags all our data points as normal, it would still have a high accuracy value. \n\n                                </div>\n\n                                \n                            </div>\n                            \n                            <div className=\"flex3 flexwrapitem  mr10\">\n                                <div className=\"flex6 lh10 mb10 pr10\">\n                                <div className=\"pb5 boldtext\"> Regularization </div>\n                                Data for this problem is likely imbalanced. The number of anomalies we encounter is likely to be much smaller than normal data.\n                                Consider we have a bad classifiier that simply flags all our data points as normal, it would still have a high accuracy value. \n\n                                </div>\n\n                                \n                            </div>\n                            \n                            <div className=\"flex4 flexwrapitem  mr10\">\n                                <div className=\"flex6 lh10 mb10 pr10\">\n                                <div className=\"pb5 boldtext\"> Batch Size </div>\n                                Data for this problem is likely imbalanced. The number of anomalies we encounter is likely to be much smaller than normal data.\n                                Consider we have a bad classifiier that simply flags all our data points as normal, it would still have a high accuracy value. \n\n                                </div> \n                            </div> \n\n                            <div className=\"flex4 flexwrapitem  mr10\">\n                                <div className=\"flex6 lh10 mb10 pr10\">\n                                <div className=\"pb5 boldtext\"> Abnormal Percentage </div>\n                                Data for this problem is likely imbalanced. The number of anomalies we encounter is likely to be much smaller than normal data.\n                                Consider we have a bad classifiier that simply flags all our data points as normal, it would still have a high accuracy value. \n\n                                </div> \n                            </div> \n                        </div>\n                        \n\n                    <div className=\"sectiontitle mt10 mb5\"> Lottery Tickets: Winning Initializations </div>\n                    <div className=\"\">\n                        <div className=\"flex\">\n                            <div className=\"flex6 lh10 mb10 pr10\">\n                                Ever heard of a weird thing with neural networks called a lottery ticket?\n                                    While the problem in this example is relatively too simple (140 features, not so complex patters)\n                                An observation of what happens each time the autoencoder is initialized can provide insights into the\n                                how luck some nerual network initializations can be.\n                                In essence, there are initializationsss that immeidately result in a high performance (good AUC) mpodel\n                                and require very littl     \n                                while others are just plain bad.\n                            </div>\n\n                            <div className=\"border rad4 p10 flex4\" style={{ height:\"200px\"}}>\n                                ROC curve and some metrics\n                            </div>\n                        </div>\n\n                    </div>\n                </div>\n                }\n                                \n                                 \n                 \n                \n                \n                \n                <div>\n                    {/* A VAE (an extension of an AE) can allow us generate sampled data without */}\n                </div>\n\n\n\n\n\n                <br />\n                <br />\n                <br />\n                <br/>\n            </div>\n        )\n    }\n}\n\nexport default Viz","// import { ToastNotification } from \"carbon-components-react\"\n\nexport function showToast(type, message, duration = 4000) {\n    let notifbox = document.getElementById(\"notificatiionbox\")\n    let notif = document.createElement('div');\n    notif.className = \"notificationinner\"\n    notif.innerHTML = \"\" + message\n    notifbox.append(notif)\n    notif.style.opacity = 1\n    // console.log(notifbox);\n\n    setTimeout(() => {\n        // notif.remove()\n        notif.style.opacity = 0\n        setTimeout(() => {\n            notif.remove()\n        }, 1500);\n    }, duration);\n\n}\n\nexport function computeAccuracyGivenThreshold(data, threshold) {\n\n    let predVal = 0\n    let truePositive = 0\n    let trueNegative = 0\n    let falsePositive = 0\n    let falseNegative = 0\n\n    data.forEach(each => {\n        predVal = each.mse > threshold ? 1 : 0\n        if ((each.label === 1) && (predVal === 1)) {\n            truePositive++\n        }\n        if ((each.label === 0) && (predVal === 0)) {\n            trueNegative++\n        }\n\n        if ((each.label === 0) && (predVal === 1)) {\n            falsePositive++\n        }\n\n        if ((each.label === 1) && (predVal === 0)) {\n            falseNegative++\n        }\n    });\n\n    let metricRow = {\n        acc: (truePositive + trueNegative) / data.length,\n        threshold: threshold,\n        tp: truePositive,\n        tn: trueNegative,\n        fp: falsePositive,\n        fn: falseNegative,\n        tpr: truePositive / (truePositive + falseNegative),\n        fpr: falsePositive / (trueNegative + falsePositive),\n        fnr: falseNegative / (truePositive + falseNegative),\n        tnr: trueNegative / (trueNegative + falsePositive),\n\n    }\n\n    return metricRow\n\n}\n\nexport function percentToRGB(percent) {\n    percent = 100 - percent\n    if (percent === 100) {\n        percent = 99\n    }\n    let r, g, b;\n\n    if (percent < 50) {\n        // green to yellow\n        r = Math.floor(255 * (percent / 50));\n        g = 255;\n\n    } else {\n        // yellow to red\n        r = 255;\n        g = Math.floor(255 * ((50 - percent % 50) / 50));\n    }\n    b = 0;\n\n    return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n}\n\n\nexport function abbreviateString(value, maxLength) {\n    if (value.length <= maxLength) {\n        return value\n    } else {\n        let retval = value.substring(0, maxLength) + \" ..\"\n        return retval\n    }\n}\n\nexport function boundWidth(widthVal) {\n    if (widthVal < 0) {\n        return 0;\n    } else if (widthVal > 1) {\n        return 1;\n    } else {\n        return widthVal;\n    }\n}\n\nfunction intlFormat(num) {\n    return new Intl.NumberFormat().format(Math.round(num * 10) / 10);\n}\nexport function makeFriendly(num) {\n    if (num < 1 && num > 0) {\n        return num\n    }\n    if (Math.abs(num) >= 1000000)\n        return intlFormat(num / 1000000) + 'M';\n    if (Math.abs(num) >= 1000)\n        return intlFormat(num / 1000) + 'k';\n    return intlFormat(num);\n}\n\nexport function loadJSONData(url) {\n    return fetch(url)\n        .then(\n            function (response) {\n                if (response.status !== 200) {\n                    console.log('Looks like there was a problem. Status Code: ' + response.status);\n                    return;\n                }\n                // Examine the text in the response\n                //    response.text().then(function(data){\n                //        console.log(data)\n                //    })\n                return response.json().then(function (data) {\n                    return data\n                });\n            }\n        )\n        .catch(function (err) {\n            console.log('Fetch Error :-S', err);\n        });\n}\n\nexport function ColorArray() {\n    let colorArray = [\n        \"#1f78b4\",\n        \"#b2df8a\",\n        \"#33a02c\",\n        \"#fb9a99\",\n        \"#e31a1c\",\n        \"#fdbf6f\",\n        \"#ff7f00\",\n        \"#6a3d9a\",\n        \"#cab2d6\",\n        \"#ffff99\",\n        \"#8fff4f\"\n    ]\n    return colorArray\n}\n\n\nexport function ColorArrayRGB() {\n    let colorArray = [\n        [141, 211, 199],\n        [255, 255, 179],\n        [190, 186, 218],\n        [251, 128, 114],\n        [128, 177, 211],\n        [253, 180, 98],\n        [179, 222, 105],\n        [252, 205, 229],\n        [188, 128, 189],\n        [204, 235, 197],\n    ]\n    return colorArray\n}\n\nexport function checkInView(container, element, partial, containerOffset, elementOffset) {\n\n    if (container) {\n        //Get container properties\n        let cTop = container.scrollTop;\n        let cBottom = cTop + container.clientHeight + containerOffset;\n\n        //Get element properties\n        let eTop = element.offsetTop + elementOffset;\n        let eBottom = eTop + element.clientHeight;\n\n        //Check if in view    \n        let isTotal = (eTop >= cTop && eBottom <= cBottom);\n        let isPartial = partial && (\n            (eTop < cTop && eBottom > cTop) ||\n            (eBottom > cBottom && eTop < cBottom)\n        );\n\n        //Return outcome\n        // console.log(\"cT:\", cTop, \"conHei\", container.clientHeight, \" offset\", containerOffset, elementOffset, container.offsetTop)\n        // console.log(element.offsetTop, \"eT:\", eTop, \"cT:\", cTop, \"eB:\", eBottom, \"cB:\", cBottom, isTotal || isPartial)\n        return (isTotal || isPartial);\n    } else {\n        return false\n    }\n\n\n}\n\nexport const LeaderLine = window.LeaderLine;\nexport const animOptions = { duration: 800, timing: 'ease' }\nexport const greyColor = \"rgba(189, 195, 199, 0.5)\"\nexport const blueColor = 'rgba(0,98,255, 1)'\n","import React, { Component } from \"react\";\nimport \"./rocchart.css\"\nimport * as d3 from \"d3\"\n\n\nclass ROCChart extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            chart: this.props.data\n        }\n        this.minChartWidth = this.props.data.chartWidth\n        this.minChartHeight = this.props.data.chartHeight\n\n        this.numTicks = 40\n        this.dotRadius = 1\n    }\n\n    componentDidMount() {\n        this.drawGraph(this.props.data.data)\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n\n\n        // if ((prevProps.data.isTraining !== this.props.data.isTraining)) {\n        //     console.log(\"props updated\");\n        //     this.updateGraph(this.props.data.data)\n        // }\n\n        if ((prevProps.data.epoch !== this.props.data.epoch) || this.props.data.epoch + \"\" === \"0\") {\n            this.updateGraph(this.props.data.data)\n        }\n    }\n\n    updateGraph(data) {\n        let self = this\n\n        d3.select(\"div.ROCChart\").selectAll(\".rocnode > *\").remove();\n\n        this.setupScalesAxes(data)\n        let svg = d3.select(\"div.ROCChart\").transition();\n\n        svg.select(\".rocline\")\n            .duration(self.animationDuration)\n            .attr(\"d\", this.rocLine(data)); // 11. Calls the line generator \n\n        svg.select(\".rocarea\")\n            .duration(self.animationDuration)\n            .attr(\"d\", this.rocArea(data)); // 11. Calls the line generator \n\n        d3.select(\"div.ROCChart\")\n            .select(\".rocnode\")\n            .selectAll(\"rocdot\")\n            .data(data)\n            .join(\"circle\")\n            .attr(\"cx\", function (d) { return self.xScale(d.fpr); })\n            .attr(\"cy\", function (d) { return self.yScale(d.tpr); })\n            .attr(\"r\", this.dotRadius)\n            .attr(\"class\", \"rocdot\")\n\n\n\n\n        // svg.select(\".lossvalcolor\")\n        //     .duration(self.animationDuration)\n        //     .attr(\"d\", this.valLine); // 11. Calls the line generator  \n\n        function customYAxis(g) {\n            g.call(self.yAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"stroke\", \"rgba(172, 172, 172, 0.74)\").attr(\"stroke-dasharray\", \"2,2\");\n            g.selectAll(\".tick text\").attr(\"x\", -30).attr(\"y\", -.01)\n        }\n\n        function customXAxis(g) {\n            g.call(self.xAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"x\", 100)\n            g.selectAll(\".tick text\").attr(\"y\", 15)\n        }\n\n        svg.select(\".y.axis\")\n            .call(customYAxis);\n\n        svg.select(\".x.axis\")\n            .call(customXAxis);\n\n    }\n    setupScalesAxes(data) {\n        // console.log(data);\n\n        // let self = this \n        this.chartMargin = { top: 10, right: 10, bottom: 55, left: 55 }\n        this.chartWidth = this.minChartWidth - this.chartMargin.left - this.chartMargin.right\n        this.chartHeight = this.minChartHeight - this.chartMargin.top - this.chartMargin.bottom;\n\n\n        // this.xScale = d3.scaleLinear()\n        //     .domain([d3.min(data, function (d) { return d.fpr }),\n        //     d3.max(data, function (d) { return d.fpr })]) // input \n        //     .range([0, this.chartWidth]); // output\n        this.xScale = d3.scaleLinear()\n            .domain([0, 1]) // input \n            .range([0, this.chartWidth]); // output\n\n\n        // this.yScale = d3.scaleLinear()\n        //     .domain([d3.min(data, function (d) { return d.tpr }),\n        //     d3.max(data, function (d) { return d.tpr })]) // input \n        //     .range([this.chartHeight, 0])\n        this.yScale = d3.scaleLinear()\n            .domain([0, 1]) // input \n            .range([this.chartHeight, 0])\n\n        this.xAxis = d3.axisBottom(this.xScale)\n        this.yAxis = d3.axisRight(this.yScale)\n            .tickSize(this.minChartWidth)\n    }\n    drawLines(svg, data) {\n        let self = this\n\n        svg.append(\"path\")\n            .datum(data) // 10. Binds data to the line \n            .attr(\"class\", \"rocline roccolor\") // Assign a class for styling  \n            .attr(\"d\", this.rocLine); // 11. Calls the line generator \n\n\n        svg.append(\"path\")\n            .datum(data)\n            .attr(\"class\", \"rocarea\")\n            .attr(\"d\", this.rocArea);\n\n        svg.append(\"line\")\n            .attr(\"x1\", this.xScale(0))  //<<== change your code here\n            .attr(\"y1\", this.yScale(0))\n            .attr(\"x2\", this.chartWidth)  //<<== and here\n            .attr(\"y2\", this.yScale(this.yScale.domain()[1]))\n            .attr(\"class\", \"diagonal\")\n\n        svg.append('g')\n            .attr(\"class\", \"rocnode\")\n            .selectAll(\"rocdot\")\n            .data(data)\n            .join(\"circle\")\n            .attr(\"cx\", function (d, i) { return self.xScale(d.fpr) })\n            .attr(\"cy\", function (d) { return self.yScale(d.tpr) })\n            .attr(\"r\", this.dotRadius)\n\n\n        // svg.selectAll(\".rocdot\")\n        //     .data(data)\n        //     .join(\"circle\") // Uses the enter().append() method\n        //     .attr(\"class\", \"rocdot\") // Assign a class for styling\n        //     .attr(\"cx\", function (d, i) { return self.xScale(d.fpr) })\n        //     .attr(\"cy\", function (d) { return self.yScale(d.tpr) })\n        //     .attr(\"r\", 5)\n\n\n    }\n\n    drawGraph(data) {\n        let self = this\n\n        // data = [\n        //     { \"acc\": 0.7, \"threshold\": 1.2428572177886963, \"tp\": 3, \"tn\": 4, \"fp\": 3, \"fn\": 0, \"ton\": 7, \"top\": 3, \"tpr\": 1, \"fpr\": 0.42857142857142855, \"fnr\": 0, \"tnr\": 0.5714285714285714 },\n        //     { \"acc\": 0.5, \"threshold\": 1.2, \"tp\": 3, \"tn\": 2, \"fp\": 5, \"fn\": 0, \"ton\": 7, \"top\": 3, \"tpr\": 1, \"fpr\": 0.7142857142857143, \"fnr\": 0, \"tnr\": 0.2857142857142857 },\n        //     { \"acc\": 1, \"threshold\": 1.3, \"tp\": 3, \"tn\": 7, \"fp\": 0, \"fn\": 0, \"ton\": 7, \"top\": 3, \"tpr\": 1, \"fpr\": 0, \"fnr\": 0, \"tnr\": 1 },\n        //     { \"acc\": 0.7, \"threshold\": 1.9, \"tp\": 0, \"tn\": 7, \"fp\": 0, \"fn\": 3, \"ton\": 7, \"top\": 3, \"tpr\": 0, \"fpr\": 0, \"fnr\": 1, \"tnr\": 1 },\n        //     { \"acc\": 0.8, \"threshold\": 1.25, \"tp\": 3, \"tn\": 5, \"fp\": 2, \"fn\": 0, \"ton\": 7, \"top\": 3, \"tpr\": 1, \"fpr\": 0.2857142857142857, \"fnr\": 0, \"tnr\": 0.7142857142857143 },\n        //     { \"acc\": 0.8, \"threshold\": 1.8, \"tp\": 1, \"tn\": 7, \"fp\": 0, \"fn\": 2, \"ton\": 7, \"top\": 3, \"tpr\": 0.3333333333333333, \"fpr\": 0, \"fnr\": 0.6666666666666666, \"tnr\": 1 },\n        //     { \"acc\": 0.9, \"threshold\": 1.75, \"tp\": 2, \"tn\": 7, \"fp\": 0, \"fn\": 1, \"ton\": 7, \"top\": 3, \"tpr\": 0.6666666666666666, \"fpr\": 0, \"fnr\": 0.3333333333333333, \"tnr\": 1 },\n        //     { \"acc\": 0.6, \"threshold\": 1.2428570985794067, \"tp\": 3, \"tn\": 3, \"fp\": 4, \"fn\": 0, \"ton\": 7, \"top\": 3, \"tpr\": 1, \"fpr\": 0.5714285714285714, \"fnr\": 0, \"tnr\": 0.42857142857142855 }]\n\n\n        this.setupScalesAxes(data)\n\n        this.rocLine = d3.line()\n            .x(function (d, i) { return self.xScale(d.fpr); }) // set the x values for the line generator\n            .y(function (d) { return self.yScale(d.tpr); }) // set the y values for the line generator \n        // .curve(d3.curveMonotoneX) // apply smoothing to the line\n\n        this.rocArea = d3.area()\n            .x(function (d) { return self.xScale(d.fpr); })\n            .y0(this.chartHeight)\n            .y1(function (d) { return self.yScale(d.tpr); });\n\n\n\n\n        const svg = d3.select(\"div.ROCChart\").append(\"svg\")\n            .attr(\"width\", this.chartWidth + this.chartMargin.left + this.chartMargin.right)\n            .attr(\"height\", this.chartHeight + this.chartMargin.top + this.chartMargin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + this.chartMargin.left + \",\" + this.chartMargin.top + \")\");\n\n        this.drawLines(svg, data)\n\n        function customYAxis(g) {\n            g.call(self.yAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"stroke\", \"rgba(172, 172, 172, 0.74)\").attr(\"stroke-dasharray\", \"2,2\");\n            g.selectAll(\".tick text\").attr(\"x\", -20).attr(\"y\", -.01)\n        }\n\n        function customXAxis(g) {\n            g.call(self.xAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"x\", 100)\n            g.selectAll(\".tick text\").attr(\"y\", 15)\n        }\n        // 3. Call the x axis in a group tag\n        svg.append(\"g\")\n            .attr(\"class\", \"x axis\")\n            .attr(\"transform\", \"translate(0,\" + (self.chartHeight + 10) + \")\")\n            .call(customXAxis);\n        // Create an axis component with d3.axisBottom\n\n        // text label for the x axis\n        svg.append(\"text\")\n            .attr(\"transform\",\n                \"translate(\" + (this.chartWidth / 2) + \" ,\" +\n                (this.chartHeight + this.chartMargin.top + 43) + \")\")\n            .style(\"text-anchor\", \"middle\")\n            .attr(\"class\", \"axislabel x\")\n            .text(\"False Positive Rate\");\n\n\n        // text label for the y axis\n        svg.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0 - this.chartMargin.left)\n            .attr(\"x\", 0 - (this.chartHeight / 2))\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .attr(\"class\", \"axislabel y\")\n            .text(\"True Positive Rate\");\n\n\n\n        // 4. Call the y axis in a group tag\n        svg.append(\"g\")\n            .attr(\"class\", \"y axis\")\n            .call(customYAxis); // Create an axis component with d3.axisLeft\n\n    }\n    render() {\n        // console.log(this.props.data.data[his.props.data.data].loss.toFixed(2));\n\n        return (\n            <div className=\"positionrelative mainchartbox \">\n                <div className=\"chartlegend legendtopright p5 mediumdesc \">\n                    <div className=\"mb3 \">\n                        <div className=\"legendcolorbox mr5  themeblue iblock\"></div>\n                        <div ref=\"trainlabel\" className=\"iblock boldtext mr5\"> Area : {this.props.data.auc.toFixed(2)}  </div>\n                        <div className=\"iblock \"> </div>\n                    </div>\n                    <div>\n                        <div className=\"legendcolorbox mr5 redchance iblock\"></div>\n                        <div ref=\"validationlabel\" className=\"iblock boldtext mr5\"> Chance</div>\n                        <div className=\"iblock \"></div>\n                    </div>\n                </div>\n\n\n                <div className=\"ROCChart chartsvg\"> </div>\n            </div>\n\n        );\n    }\n}\n\nexport default ROCChart;    ","import React, { Component } from \"react\";\nimport \"./histogram.css\"\nimport * as d3 from \"d3\"\n\nclass HistogramChart extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            chart: this.props.data\n        }\n        this.minChartWidth = this.props.data.chartWidth\n        this.minChartHeight = this.props.data.chartHeight\n\n        this.numTicks = 40\n    }\n\n    componentDidMount() {\n\n        this.drawGraph(this.props.data.data)\n        // console.log(this.props.data); \n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        // console.log(prevProps.data.epoch, this.props.data.epoch)\n        if ((prevProps.data.epoch !== this.props.data.epoch) || (this.props.data.epoch + \"\" === \"0\" || this.props.data.threshold !== prevProps.data.threshold)) {\n            // console.log(\"props updated\");\n            this.updateGraph(this.props.data.data)\n        }\n\n    }\n\n\n    setupScalesAxes(data) {\n        // console.log(data);\n\n        let self = this\n\n        this.chartMargin = { top: 10, right: 5, bottom: 55, left: 45 }\n        this.chartWidth = this.minChartWidth - this.chartMargin.left - this.chartMargin.right\n        this.chartHeight = this.minChartHeight - this.chartMargin.top - this.chartMargin.bottom;\n\n\n\n        this.xScale = d3.scaleLinear()\n            .domain(d3.extent(data, function (d) { return d.mse })).nice()\n            .range([this.chartMargin.left, this.chartWidth - this.chartMargin.right])\n\n        // All Bins\n        this.bins = d3.histogram()\n            .value(function (d) { return d.mse })\n            .domain(this.xScale.domain())\n            .thresholds(this.xScale.ticks(self.numTicks))(data)\n\n        // Normal Bins\n        this.binNorm = d3.histogram()\n            .value(function (d) {\n                if (d.label + \"\" === \"0\") {\n                    return d.mse\n                };\n            })\n            .domain(this.xScale.domain())\n            .thresholds(this.xScale.ticks(self.numTicks))(data)\n\n        // Abnormal Bins\n        this.binsAnorm = d3.histogram()\n            .value(function (d) {\n                if (d.label + \"\" === \"1\") {\n                    return d.mse\n                };\n            })\n            .domain(this.xScale.domain())\n            .thresholds(this.xScale.ticks(self.numTicks))(data)\n\n        // this.xScale = d3.scaleLinear()\n        //     .domain([0, n - 1]) // input\n        //     .range([0, this.chartWidth]); // output\n\n        this.yScale = d3.scaleLinear()\n            .domain([0, d3.max(self.bins, d => d.length)]).nice()\n            .range([this.chartHeight, 0])\n\n        this.xAxis = d3.axisBottom(this.xScale)\n        this.yAxis = d3.axisRight(this.yScale)\n            .tickSize(this.minChartWidth)\n\n\n\n    }\n\n    updateGraph(data) {\n        let self = this\n        // console.log(data[0]);\n\n\n\n\n        this.setupScalesAxes(data)\n\n        let svg = d3.select(\"div.histogramchart\") //.transition();\n        // console.log(svg);\n\n        // // Abnormal Bins\n        svg.select(\".normcolor\")\n            .selectAll(\"rect\")\n            .data(self.binNorm)\n            .join(\"rect\")\n            .attr(\"x\", d => self.xScale(d.x0) + 1)\n            .attr(\"width\", d => Math.max(0, self.xScale(d.x1) - self.xScale(d.x0) - 1))\n            .attr(\"y\", d => self.yScale(d.length))\n            .attr(\"height\", d => self.yScale(0) - self.yScale(d.length))\n        // .transition();\n\n        svg.select(\".anormcolor\")\n            .selectAll(\"rect\")\n            .data(self.binsAnorm)\n            .join(\"rect\")\n            .attr(\"x\", d => self.xScale(d.x0) + 1)\n            .attr(\"width\", d => Math.max(0, self.xScale(d.x1) - self.xScale(d.x0) - 1))\n            .attr(\"y\", d => self.yScale(d.length))\n            .attr(\"height\", d => self.yScale(0) - self.yScale(d.length))\n\n        // Remove previous threshold line\n        // d3.select(\".thresholdline\").transition().duration(5500).style(\"opacity\", 0).remove()\n        // let thresholdVal = this.getThreshold(data)\n        svg.select(\".thresholdline\")\n            .attr(\"x1\", this.xScale(this.props.data.threshold))\n            .attr(\"x2\", this.xScale(this.props.data.threshold))\n\n        svg.select(\".thresholdtext\")\n            .attr(\"x\", this.xScale(this.props.data.threshold))\n            .text(\"Threshold - \" + this.props.data.threshold.toFixed(3));\n\n        function customYAxis(g) {\n            g.call(self.yAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"stroke\", \"rgba(172, 172, 172, 0.74)\").attr(\"stroke-dasharray\", \"2,2\");\n            g.selectAll(\".tick text\").attr(\"x\", -20).attr(\"y\", -.01)\n        }\n\n        function customXAxis(g) {\n            g.call(self.xAxis);\n            g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"x\", 100)\n            g.selectAll(\".tick text\").attr(\"y\", 15)\n        }\n\n        svg.select(\".y.axis\")\n            .call(customYAxis);\n\n        svg.select(\".x.axis\")\n            .call(customXAxis);\n\n\n    }\n\n    getThreshold(data) {\n\n        let meanNormal = d3.mean(data, function (d) {\n            if (d.label + \"\" === \"0\") {\n                return d.mse\n            };\n        })\n\n        let meanAbnormal = d3.mean(data, function (d) {\n            if (d.label + \"\" === \"1\") {\n                return d.mse\n            };\n        })\n\n        let midPoint = (meanNormal + meanAbnormal) / 2\n        let walkBackPercentage = 0.2\n        let thresholdVal = Math.min(meanNormal, meanAbnormal) + (midPoint - Math.min(meanNormal, meanAbnormal)) * walkBackPercentage\n\n\n        return thresholdVal\n    }\n\n    drawGraph(data) {\n        let self = this\n        this.setupScalesAxes(data)\n        // console.log(data[0]);\n\n        const svg = d3.select(\"div.histogramchart\").append(\"svg\")\n            .attr(\"width\", this.chartWidth + this.chartMargin.left + this.chartMargin.right)\n            .attr(\"height\", this.chartHeight + this.chartMargin.top + this.chartMargin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + this.chartMargin.left + \",\" + this.chartMargin.top + \")\");\n\n\n\n        // normal histogram\n        svg.append(\"g\")\n            .attr(\"class\", \"normcolor\")\n            .selectAll(\"rect\")\n            .data(self.binNorm)\n            .join(\"rect\")\n            .attr(\"x\", d => self.xScale(d.x0) + 1)\n            .attr(\"width\", d => Math.max(0, self.xScale(d.x1) - self.xScale(d.x0) - 1))\n            .attr(\"y\", d => self.yScale(d.length))\n            .attr(\"height\", d => self.yScale(0) - self.yScale(d.length));\n\n        // Abnormal histogram\n        svg.append(\"g\")\n            .attr(\"class\", \"anormcolor\")\n            .selectAll(\"rect\")\n            .data(self.binsAnorm)\n            .join(\"rect\")\n            .attr(\"x\", d => self.xScale(d.x0) + 1)\n            .attr(\"width\", d => Math.max(0, self.xScale(d.x1) - self.xScale(d.x0) - 1))\n            .attr(\"y\", d => self.yScale(d.length))\n            .attr(\"height\", d => self.yScale(0) - self.yScale(d.length));\n\n        //add threshold line\n        // let thresholdVal = this.getThreshold(data)\n\n        // threshold line\n        svg.append(\"line\")\n            .attr(\"class\", \"thresholdline\")\n            .attr(\"x1\", this.xScale(this.props.data.threshold))  //<<== change your code here\n            .attr(\"y1\", this.yScale(0))\n            .attr(\"x2\", this.xScale(this.props.data.threshold))  //<<== and here\n            .attr(\"y2\", this.yScale(this.yScale.domain()[1]))\n        // threshold label\n        svg.append(\"text\")\n            .attr(\"class\", \"thresholdtext\")\n            .attr(\"x\", this.xScale(this.props.data.threshold))\n            .attr(\"y\", this.yScale(this.yScale.domain()[1]))\n            .attr(\"dy\", \".95em\")\n            .attr(\"dx\", \".35em\")\n            .text(\"Threshold - \" + this.props.data.threshold.toFixed(3));\n\n        function customYAxis(g) {\n            g.call(self.yAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"stroke\", \"rgba(172, 172, 172, 0.74)\").attr(\"stroke-dasharray\", \"2,2\");\n            g.selectAll(\".tick text\").attr(\"x\", -20).attr(\"y\", -.01)\n        }\n\n        function customXAxis(g) {\n            g.call(self.xAxis);\n            g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"x\", 100)\n            g.selectAll(\".tick text\").attr(\"y\", 15)\n        }\n\n        // text label for the x axis\n        svg.append(\"text\")\n            .attr(\"transform\",\n                \"translate(\" + (this.chartWidth / 2) + \" ,\" +\n                (this.chartHeight + this.chartMargin.top + 43) + \")\")\n            .style(\"text-anchor\", \"middle\")\n            .attr(\"class\", \"axislabel x\")\n            .text(\"Mean Square Error\");\n\n\n        // text label for the y axis\n        svg.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0 - this.chartMargin.left)\n            .attr(\"x\", 0 - (this.chartHeight / 2))\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .attr(\"class\", \"axislabel y\")\n            .text(\"Frequency\");\n\n        // 3. Call the x axis in a group tag\n        svg.append(\"g\")\n            .attr(\"class\", \"x axis\")\n            .attr(\"transform\", \"translate(0,\" + (self.chartHeight + 10) + \")\")\n            .call(customXAxis); // Create an axis component with d3.axisBottom\n\n        // 4. Call the y axis in a group tag\n        svg.append(\"g\")\n            .attr(\"class\", \"y axis\")\n            .call(customYAxis); // Create an axis component with d3.axisLeft\n\n    }\n\n    render() {\n        return (\n            <div className=\"positionrelative mainchartbox \">\n                <div className=\"chartlegend legendtopleft p5 mediumdesc\">\n                    <div className=\"mb3\"> <div className=\"legendcolorbox mr5  themeblue iblock\"></div> Normal </div>\n                    <div> <div className=\"legendcolorbox mr5 themeorange iblock\"></div> Abnormal </div>\n                </div>\n\n                <div className=\"histogramchart chartsvg\"></div>\n            </div>\n        );\n    }\n}\n\nexport default HistogramChart;","import React, { Component } from \"react\";\nimport \"./scatterplot.css\"\nimport * as d3 from \"d3\"\n\n\nclass ScatterPlot extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            chart: this.props.data\n        }\n        this.minChartWidth = this.props.data.chartWidth\n        this.minChartHeight = this.props.data.chartHeight\n\n        this.numTicks = 40\n    }\n\n    componentDidMount() {\n\n\n        this.drawGraph(this.props.data.data)\n\n        // console.log(this.props.data);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n\n        if ((prevProps.data.epoch !== this.props.data.epoch) || this.props.data.epoch + \"\" === \"0\") {\n            // console.log(\"props updated\");\n            this.updateGraph(this.props.data.data)\n        }\n\n    }\n\n    updateGraph(data) {\n        let self = this\n        // console.log(data[0]);\n\n        d3.select(\"div.scatterplotchart\").selectAll(\".scatternode > *\").remove();\n\n        this.setupScalesAxes(data)\n\n        let svg = d3.select(\"div.scatterplotchart\") //.transition();\n\n        // svg.selectAll(\"dot\").remove()\n\n        svg.select(\".scatternode\")\n            .selectAll(\"dot\")\n            .data(data)\n            .join(\"circle\")\n            .attr(\"cx\", function (d) { return self.xScale(d.x); })\n            .attr(\"cy\", function (d) { return self.yScale(d.y); })\n            .attr(\"r\", 2.5)\n            .attr(\"class\", d => {\n                if (d.label + \"\" === \"0\") {\n                    return \"normcolor\"\n                } else {\n                    return \"anormcolor\"\n                }\n            })\n\n\n        function customYAxis(g) {\n            g.call(self.yAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"stroke\", \"rgba(172, 172, 172, 0.74)\").attr(\"stroke-dasharray\", \"2,2\");\n            g.selectAll(\".tick text\").attr(\"x\", -20).attr(\"y\", -.01)\n        }\n\n        function customXAxis(g) {\n            g.call(self.xAxis);\n            g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"x\", 100)\n            g.selectAll(\".tick text\").attr(\"y\", 15)\n        }\n\n        svg.select(\".y.axis\")\n            .call(customYAxis);\n\n        svg.select(\".x.axis\")\n            .call(customXAxis);\n\n\n\n    }\n    setupScalesAxes(data) {\n        // console.log(data);\n\n        // let self = this\n\n        this.chartMargin = { top: 10, right: 5, bottom: 55, left: 45 }\n        this.chartWidth = this.minChartWidth - this.chartMargin.left - this.chartMargin.right\n        this.chartHeight = this.minChartHeight - this.chartMargin.top - this.chartMargin.bottom;\n\n\n        this.xScale = d3.scaleLinear()\n            .domain([d3.min(data, function (d) { return d.x }), d3.max(data, function (d) { return d.x })]) // input  \n            .range([this.chartMargin.left, this.chartWidth - this.chartMargin.right])\n\n\n\n        this.yScale = d3.scaleLinear()\n            .domain([d3.min(data, function (d) { return d.y }), d3.max(data, function (d) { return d.y })]) // input  \n            .range([this.chartHeight, 0])\n\n        this.xAxis = d3.axisBottom(this.xScale)\n        this.yAxis = d3.axisRight(this.yScale)\n            .tickSize(this.minChartWidth)\n\n\n\n    }\n\n    drawGraph(data) {\n        let self = this\n        this.setupScalesAxes(data)\n\n        const svg = d3.select(\"div.scatterplotchart\").append(\"svg\")\n            .attr(\"width\", this.chartWidth + this.chartMargin.left + this.chartMargin.right)\n            .attr(\"height\", this.chartHeight + this.chartMargin.top + this.chartMargin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + this.chartMargin.left + \",\" + this.chartMargin.top + \")\");\n\n\n        svg.append('g')\n            .attr(\"class\", \"scatternode\")\n            .selectAll(\"dot\")\n            .data(data)\n            .join(\"circle\")\n            .attr(\"cx\", function (d) { return self.xScale(d.x); })\n            .attr(\"cy\", function (d) { return self.yScale(d.y); })\n            .attr(\"r\", 2.5)\n            .attr(\"class\", d => {\n                if (d.label + \"\" === \"0\") {\n                    return \"normcolor\"\n                } else {\n                    return \"anormcolor\"\n                }\n            })\n\n\n        // text label for the x axis\n        svg.append(\"text\")\n            .attr(\"transform\",\n                \"translate(\" + (this.chartWidth / 2) + \" ,\" +\n                (this.chartHeight + this.chartMargin.top + 43) + \")\")\n            .style(\"text-anchor\", \"middle\")\n            .attr(\"class\", \"axislabel x\")\n            .text(\"Dimension 1\");\n\n\n        // text label for the y axis\n        svg.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0 - this.chartMargin.left)\n            .attr(\"x\", 0 - (this.chartHeight / 2))\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .attr(\"class\", \"axislabel y\")\n            .text(\"Dimension 0\");\n\n\n        function customYAxis(g) {\n            g.call(self.yAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"stroke\", \"rgba(172, 172, 172, 0.74)\").attr(\"stroke-dasharray\", \"2,2\")\n            g.selectAll(\".tick text\").attr(\"x\", -20).attr(\"y\", -.01)\n        }\n\n        function customXAxis(g) {\n            g.call(self.xAxis);\n            g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"x\", 100)\n            g.selectAll(\".tick text\").attr(\"y\", 15)\n        }\n        // 3. Call the x axis in a group tag\n        svg.append(\"g\")\n            .attr(\"class\", \"x axis\")\n            .attr(\"transform\", \"translate(0,\" + (self.chartHeight + 10) + \")\")\n            .call(customXAxis); // Create an axis component with d3.axisBottom\n\n        // 4. Call the y axis in a group tag\n        svg.append(\"g\")\n            .attr(\"class\", \"y axis\")\n            .call(customYAxis); // Create an axis component with d3.axisLeft\n\n    }\n    render() {\n        return (\n            <div className=\"positionrelative mainchartbox\">\n                <div className=\"chartlegend legendtopleft p5 mediumdesc\">\n                    <div className=\"mb3\"> <div className=\"legendcolorbox mr5  themeblue iblock\"></div> Normal </div>\n                    <div> <div className=\"legendcolorbox mr5 themeorange iblock\"></div> Abnormal </div>\n                </div>\n\n                <div className=\"scatterplotchart\"> </div>\n            </div>\n\n        );\n    }\n}\n\nexport default ScatterPlot;","import React, { Component } from \"react\";\nimport \"./losschart.css\"\nimport * as d3 from \"d3\"\n\n\nclass LossChart extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            chart: this.props.data\n        }\n        this.minChartWidth = this.props.data.chartWidth\n        this.minChartHeight = this.props.data.chartHeight\n\n        this.numTicks = 40\n        this.dotRadius = 3.5\n    }\n\n    componentDidMount() {\n        this.drawGraph(this.props.data.data)\n        // console.log(this.props.data.data);\n\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if ((prevProps.data.epoch !== this.props.data.epoch) && this.props.data.data.length > 0) {\n            // console.log(\"props updated\");\n            this.updateGraph(this.props.data.data)\n            this.refs[\"trainlabel\"].innerHTML = this.props.data.data[this.props.data.data.length - 1].loss.toFixed(4)\n            this.refs[\"validationlabel\"].innerHTML = this.props.data.data[this.props.data.data.length - 1].val_loss.toFixed(4)\n            // console.log(this.props.data.data[0].loss, this.refs[\"trainlabel\"]);\n\n        }\n    }\n\n    updateGraph(data) {\n        let self = this\n\n        // d3.select(\"div.losschart\").selectAll(\".lossline\").remove();\n        // d3.select(\"div.losschart\").selectAll(\".pointdot\").remove();\n\n        this.setupScalesAxes(data)\n        let svg = d3.select(\"div.losschart\").transition();\n\n        svg.select(\".losstraincolor\")\n            .duration(self.animationDuration)\n            .attr(\"d\", this.trainLine(data)); // 11. Calls the line generator \n\n        svg.select(\".lossvalcolor\")\n            .duration(self.animationDuration)\n            .attr(\"d\", this.valLine(data)); // 11. Calls the line generator  \n\n        function customYAxis(g) {\n            g.call(self.yAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"stroke\", \"rgba(172, 172, 172, 0.74)\").attr(\"stroke-dasharray\", \"2,2\");\n            g.selectAll(\".tick text\").attr(\"x\", -30).attr(\"y\", -.01)\n        }\n\n        function customXAxis(g) {\n            g.call(self.xAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"x\", 100)\n            g.selectAll(\".tick text\").attr(\"y\", 15)\n        }\n\n        svg.select(\".y.axis\")\n            .call(customYAxis);\n\n        svg.select(\".x.axis\")\n            .call(customXAxis);\n\n    }\n    setupScalesAxes(data) {\n        // console.log(data);\n\n        // let self = this \n        this.chartMargin = { top: 10, right: 10, bottom: 57, left: 45 }\n        this.chartWidth = this.minChartWidth - this.chartMargin.left - this.chartMargin.right\n        this.chartHeight = this.minChartHeight - this.chartMargin.top - this.chartMargin.bottom;\n\n        var n = data.length;\n\n        this.xScale = d3.scaleLinear()\n            .domain([0, n - 1]) // input\n            .range([0, this.chartWidth]); // output\n\n\n        this.yScale = d3.scaleLinear()\n            .domain([d3.min(data, function (d) {\n                // console.log(Math.min(d.loss, d.val_loss))\n                return Math.min(d.loss, d.val_loss)\n            }), d3.max(data, function (d) {\n                return Math.max(d.loss, d.val_loss)\n            })]) // input \n            .range([this.chartHeight, 0])\n\n        this.xAxis = d3.axisBottom(this.xScale)\n        this.yAxis = d3.axisRight(this.yScale)\n            .tickSize(this.minChartWidth)\n    }\n    drawLines(svg, data) {\n\n\n        svg.append(\"path\")\n            .datum(data) // 10. Binds data to the line \n            .attr(\"class\", \"lossline losstraincolor\") // Assign a class for styling  \n            .attr(\"d\", this.trainLine); // 11. Calls the line generator \n\n        svg.append(\"path\")\n            .datum(data) // 10. Binds data to the line \n            .attr(\"class\", \"lossline lossvalcolor\") // Assign a class for styling  \n            .attr(\"d\", this.valLine); // 11. Calls the line generator \n\n    }\n\n    drawGraph(data) {\n        let self = this\n\n\n        // data = [{ epoch: 1, loss: 0.9578104019165039, val_loss: 0.9471035003662109, traintime: 2.247 },\n        // { epoch: 2, loss: 0.7673317790031433, val_loss: 0.8629779815673828, traintime: 0.146 },\n        // { epoch: 3, loss: 0.749285876750946, val_loss: 0.8709790110588074, traintime: 0.152 },\n        // { epoch: 4, loss: 0.7410370707511902, val_loss: 0.8575628995895386, traintime: 0.11 }]\n        // data = [{ epoch: this.CumulativeSteps, loss: 0, val_loss: 0, traintime: 0 }]\n\n        this.setupScalesAxes(data)\n\n        this.trainLine = d3.line()\n            .x(function (d, i) { return self.xScale(i); }) // set the x values for the line generator\n            .y(function (d) { return self.yScale(d.loss); }) // set the y values for the line generator \n            .curve(d3.curveMonotoneX) // apply smoothing to the line\n\n        this.valLine = d3.line()\n            .x(function (d, i) { return self.xScale(i); }) // set the x values for the line generator\n            .y(function (d) { return self.yScale(d.val_loss); }) // set the y values for the line generator \n            .curve(d3.curveMonotoneX) // apply smoothing to the line\n\n\n\n\n        const svg = d3.select(\"div.losschart\").append(\"svg\")\n            .attr(\"width\", this.chartWidth + this.chartMargin.left + this.chartMargin.right)\n            .attr(\"height\", this.chartHeight + this.chartMargin.top + this.chartMargin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + this.chartMargin.left + \",\" + this.chartMargin.top + \")\");\n\n        this.drawLines(svg, data)\n\n        // text label for the x axis\n        svg.append(\"text\")\n            .attr(\"transform\",\n                \"translate(\" + (this.chartWidth / 2) + \" ,\" +\n                (this.chartHeight + this.chartMargin.top + 43) + \")\")\n            .style(\"text-anchor\", \"middle\")\n            .attr(\"class\", \"axislabel x\")\n            .text(\"Training Steps\");\n\n\n        // text label for the y axis\n        svg.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0 - this.chartMargin.left - 5)\n            .attr(\"x\", 0 - (this.chartHeight / 2))\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .attr(\"class\", \"axislabel y\")\n            .text(\"Loss\");\n\n        function customYAxis(g) {\n            g.call(self.yAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"stroke\", \"rgba(172, 172, 172, 0.74)\").attr(\"stroke-dasharray\", \"2,2\");\n            g.selectAll(\".tick text\").attr(\"x\", -20).attr(\"y\", -.01)\n        }\n\n        function customXAxis(g) {\n            g.call(self.xAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"x\", 100)\n            g.selectAll(\".tick text\").attr(\"y\", 15)\n        }\n        // 3. Call the x axis in a group tag\n        svg.append(\"g\")\n            .attr(\"class\", \"x axis\")\n            .attr(\"transform\", \"translate(0,\" + (self.chartHeight + 10) + \")\")\n            .call(customXAxis); // Create an axis component with d3.axisBottom\n\n        // 4. Call the y axis in a group tag\n        svg.append(\"g\")\n            .attr(\"class\", \"y axis\")\n            .call(customYAxis); // Create an axis component with d3.axisLeft\n\n    }\n    render() {\n        // console.log(this.props.data.data[his.props.data.data].loss.toFixed(2));\n\n        return (\n            <div className=\"positionrelative mainchartbox \">\n                <div className=\"chartlegend legendtopright p5 mediumdesc\">\n                    <div className=\"mb3\">\n                        <div className=\"legendcolorbox mr5  themeblue iblock\"></div>\n                        <div ref=\"trainlabel\" className=\"iblock boldtext mr5\">0.0</div>\n                        <div className=\"iblock \">Train Loss</div>\n                    </div>\n                    <div>\n                        <div className=\"legendcolorbox mr5 themeorange iblock\"></div>\n                        <div ref=\"validationlabel\" className=\"iblock boldtext mr5\">0.0</div>\n                        <div className=\"iblock \">Validation Loss</div>\n                    </div>\n                </div>\n                <div className=\"losschart chartsvg\"> </div>\n            </div>\n\n        );\n    }\n}\n\nexport default LossChart;    ","import React, { Component } from \"react\";\n// import { Button } from \"carbon-components-react\"\nimport { LeaderLine, animOptions } from \"../helperfunctions/HelperFunctions\"\nimport { Add16, Subtract16 } from '@carbon/icons-react';\nimport \"./composemodel.css\"\nimport * as _ from \"lodash\"\n\nclass ComposeModel extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            hiddenDims: this.props.hiddenDims,\n            latentDim: this.props.latentDim,\n            maxLayers: 10,\n            minLayers: 1,\n            maxUnits: 9,\n            minUnits: 2,\n            defaultLayerDim: 3,\n            isTraining: this.props.isTraining,\n            lineWidth: 1.5,\n            latentLineWidth: 2.5,\n            animationDuration: 350\n        }\n\n        this.lineHolder = []\n\n        this.rightTopAnchor = { x: \"100%\", y: \"5%\" }\n        this.rightBottomAnchor = { x: \"100%\", y: \"95%\" }\n        this.leftTopAnchor = { x: 0, y: \"5%\" }\n        this.leftBottomAnchor = { x: \"0%\", y: \"95%\" }\n        this.rightMiddle = { x: \"100%\", y: \"50%\" }\n        this.leftMiddle = { x: \"0%\", y: \"50%\" }\n\n\n        this.blueColor = \"rgba(0, 0, 255, 0.89)\"\n        this.greyColor = \"grey\"\n    }\n    componentDidMount() {\n        this.drawAllLines();\n    }\n\n\n    getElement(network, attributeName, attributeValue) {\n        return document.querySelector(\"div.\" + network).querySelector(\"[\" + attributeName + \"=\" + attributeValue + \"]\")\n    }\n\n    addLayerLines(network, layer) {\n        if ((layer * 1) !== (this.state.hiddenDims.length - 1)) {\n            let startId = \"layerdiv\" + layer;\n            let endId = \"layerdiv\" + (layer * 1 + 1);\n            let startEl = this.getElement(network, \"layerdiv\", startId)\n            let endEl = this.getElement(network, \"layerdiv\", endId)\n            // console.log(startEl, endEl);\n            let params = { pathType: \"straight\", startId: startId, endId: endId, network: network }\n            this.drawLeaderLine(startEl, endEl, network === \"encoder\" ? this.rightTopAnchor : this.leftTopAnchor, network === \"encoder\" ? this.leftTopAnchor : this.rightTopAnchor, params)\n            this.drawLeaderLine(startEl, endEl, network === \"encoder\" ? this.rightTopAnchor : this.leftTopAnchor, network === \"encoder\" ? this.leftBottomAnchor : this.rightBottomAnchor, params)\n            this.drawLeaderLine(startEl, endEl, network === \"encoder\" ? this.rightBottomAnchor : this.leftBottomAnchor, network === \"encoder\" ? this.leftTopAnchor : this.rightTopAnchor, params)\n            this.drawLeaderLine(startEl, endEl, network === \"encoder\" ? this.rightBottomAnchor : this.leftBottomAnchor, network === \"encoder\" ? this.leftBottomAnchor : this.rightBottomAnchor, params)\n        } else {\n            let startId = \"layerdiv\" + layer;\n            let startEl = this.getElement(network, \"layerdiv\", startId)\n            // let encoderDiv = document.getElementById(\"mainencoderdiv\")\n            let latentDiv = document.getElementById(\"latentdiv\")\n            // let decoderDiv = document.getElementById(\"maindecoderdiv\")\n\n            let params = { pathType: \"arc\", startId: startId, endId: \"latent\", network: network }\n            this.drawLeaderLine(startEl, latentDiv, network === \"encoder\" ? this.rightMiddle : this.leftMiddle, network === \"encoder\" ? this.leftMiddle : this.rightMiddle, params)\n\n        }\n    }\n    addEncDecLines(layer) {\n        this.addLayerLines(\"encoder\", layer)\n        this.addLayerLines(\"decoder\", layer)\n    }\n    drawAllLines() {\n        // Add connector lines for encoder decoder \n        for (const layer in this.state.hiddenDims) {\n            this.addEncDecLines(layer)\n\n        }\n    }\n\n\n    removeLayerLines(lineId) {\n\n        // Remove lines associated with a deleted layer\n        // Remove it from the DOM and also from the holder array \n\n\n        let toRemove = new Map()\n        this.lineHolder.forEach(function (each, i) {\n            if (each.startId === lineId || each.endId === lineId) {\n                each.line.remove()\n                toRemove.set(i, \"dot\")\n            } else {\n                each.line.position()\n            }\n        })\n\n        // Remove lines queed up for deletion\n        let newHolder = []\n        this.lineHolder.forEach(function (each, i) {\n            if (toRemove.get(i) == null) {\n                newHolder.push(each)\n            }\n        });\n\n\n        // console.log(\"old\", this.lineHolder.length, newHolder.length);\n        this.lineHolder = newHolder\n\n\n    }\n\n\n    drawLeaderLine(startElement, endElement, startAnchor, endAnchor, params) {\n\n        let lineColor = this.state.isTraining ? \"grey\" : \"rgba(0, 0, 255, 0.89)\"\n        let lineWidth = this.state.lineWidth\n        let plugType = \"disc\"\n\n        let line = new LeaderLine(\n            LeaderLine.pointAnchor(startElement, startAnchor),\n            LeaderLine.pointAnchor(endElement, endAnchor), {\n            color: lineColor,\n            startPlug: plugType,\n            endPlug: plugType,\n            startPlugColor: lineColor,\n            path: params.pathType,\n            size: lineWidth,\n            hide: true,\n            // dash: { gap: 2, animation: params.endId === \"latent\" ? this.state.isTraining : false }\n            dash: { gap: 3 }\n        });\n        // document.querySelector('.leader-line').style.zIndex = -100\n        animOptions.duration = this.state.animationDuration\n        line.show(\"draw\", animOptions)\n        this.lineHolder.push({ line: line, startId: params.startId, endId: params.endId, network: params.network })\n    }\n\n\n    removeAllLines(line) {\n        this.lineHolder.forEach(function (each) {\n            each.line.remove()\n        })\n        this.lineHolder = []\n    }\n\n    redrawAllLines() {\n        this.lineHolder.forEach(function (each) {\n            each.line.position();\n        })\n    }\n\n\n    redrawLine(lineId) {\n        this.lineHolder.forEach(function (each) {\n            if (each.startId === lineId || each.endId === lineId) {\n                // each.line.color = \"red\"\n                each.line.hide(\"none\")\n                each.line.show(\"draw\", animOptions)\n                each.line.position();\n            } else {\n                each.line.position();\n            }\n        })\n    }\n\n    animateLines() {\n        // let self = this\n        let color = this.state.isTraining ? this.greyColor : this.blueColor\n        // console.log(self.props.isTraining);\n        let opt = {\n            color: color,\n            startPlugColor: color\n        }\n\n        this.lineHolder.forEach(function (each) {\n            each.line.setOptions(opt)\n        })\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n\n        // Handle addition of a new node/unit in a layer \n        for (const i in this.state.hiddenDims) {\n            if (this.state.hiddenDims[i] !== prevState.hiddenDims[i]) {\n                this.redrawLine(\"layerdiv\" + i)\n                this.props.updateModelDims(this.state.hiddenDims, this.state.latentDim)\n\n            }\n        }\n\n        // Handle layer addition or removal \n        if (this.state.hiddenDims.length > prevState.hiddenDims.length) {\n            this.removeLayerLines(\"latent\")\n            this.addEncDecLines(this.state.hiddenDims.length - 2)\n            this.addEncDecLines(this.state.hiddenDims.length - 1)\n        } else if (this.state.hiddenDims.length < prevState.hiddenDims.length) {\n            this.removeLayerLines(\"layerdiv\" + this.state.hiddenDims.length)\n            this.addEncDecLines(this.state.hiddenDims.length - 1)\n\n        }\n\n\n        if (prevState.isTraining !== this.props.isTraining) {\n            // console.log(\"training toggled\");\n            this.setState({ isTraining: this.props.isTraining })\n            this.animateLines()\n\n        }\n\n        // Updaate parent state once dims change\n        if (this.state.hiddenDims.length !== prevState.hiddenDims.length || this.state.latentDim[0] !== prevState.latentDim[0]) {\n            // console.log(\"latent or hidden changed\");\n\n            this.props.updateModelDims(this.state.hiddenDims, this.state.latentDim)\n        }\n\n        // console.log(this.lineHolder.length);\n\n        if (prevProps.adv !== this.props.adv) {\n            this.redrawAllLines();\n        }\n\n\n\n\n\n    }\n\n    componentWillUnmount() {\n        this.removeAllLines()\n    }\n\n\n\n    setStateVal(varGroup, newDims) {\n        if (varGroup + \"\" === \"encoder\") {\n            this.setState({ hiddenDims: newDims })\n        } else if (varGroup + \"\" === \"decoder\") {\n            this.setState({ decoderDims: newDims })\n        } else if (varGroup + \"\" === \"latent\") {\n            this.setState({ latentDim: newDims })\n        }\n    }\n\n    getDims(dimType) {\n        switch (dimType) {\n            case \"encoder\":\n                return this.state.hiddenDims.slice()\n            case \"decoder\":\n                return this.state.decoderDims.slice()\n            case \"latent\":\n                return this.state.latentDim.slice()\n            default:\n                break\n        }\n    }\n\n\n\n\n    updateLayerClick(e) {\n\n\n        let currentDims = this.getDims(e.target.getAttribute(\"layergroup\"));\n\n        if (e.target.getAttribute(\"buttonaction\") === \"add\") {\n\n            if (currentDims.length + 1 <= this.state.maxLayers) {\n                currentDims.push(this.state.defaultLayerDim)\n                this.setStateVal(e.target.getAttribute(\"layergroup\"), currentDims)\n            }\n\n        } else {\n\n            if (currentDims.length - 1 >= this.state.minLayers) {\n                currentDims.pop()\n                this.setStateVal(e.target.getAttribute(\"layergroup\"), currentDims)\n            }\n        }\n    }\n\n\n    updateUnits(e) {\n\n        // Update state variables for dimension units\n        let currentDims = this.getDims(e.target.getAttribute(\"layergroup\"));\n        let currentUnit = currentDims[e.target.getAttribute(\"unitindex\") * 1]\n        // console.log(e.target.getAttribute(\"unitindex\"), currentUnit);\n        if (e.target.getAttribute(\"buttonaction\") === \"add\") {\n\n            if (currentUnit + 1 <= this.state.maxUnits) {\n                currentDims[e.target.getAttribute(\"unitindex\") * 1] = currentUnit + 1\n                this.setStateVal(e.target.getAttribute(\"layergroup\"), currentDims)\n            }\n\n        } else {\n\n            if (currentUnit - 1 >= this.state.minUnits) {\n                currentDims[e.target.getAttribute(\"unitindex\") * 1] = currentUnit - 1\n                this.setStateVal(e.target.getAttribute(\"layergroup\"), currentDims)\n            }\n\n        }\n    }\n\n    nodeHover(e) {\n        console.log(e.target.getAttribute(\"nodeunit\"));\n\n    }\n\n\n    render() {\n\n        let latentLayers = this.state.latentDim.map((data, layerindex) => {\n            let eachLayer = _.range(data).map((unitindex) => {\n                return (\n                    <div className={\"eachunitbox \" + (this.state.isTraining ? \" unitgrey\" : \" unitblue\")} key={\"eachunit\" + unitindex}>\n                        {/* {index} */}\n                    </div>\n                )\n            })\n            return (\n                <div key={\"latentlayer\" + layerindex} className=\" h100 flex flexfull flexjustifycenter \">\n                    <div className=\" mwc flex flexjustifycenter mb5 mt5 \">\n                        <div className=\"\" >\n                            <div className=\"smalldesc mb3 unselectable latentunittitle\">{data} units</div>\n                            <div\n                                layergroup=\"latent\"\n                                unitindex={layerindex}\n                                buttonaction=\"add\"\n                                onClick={this.updateUnits.bind(this)}\n                                className=\"updatebutton unselectable mb3 clickable\">\n                                <Add16 className=\"unclickable\"></Add16>\n                            </div>\n                            <div id=\"latentdiv\" className=\"layerdiv  pt3 mb3\">{eachLayer}</div>\n                            <div\n                                layergroup=\"latent\"\n                                unitindex={layerindex}\n                                buttonaction=\"subtract\"\n                                onClick={this.updateUnits.bind(this)}\n                                className=\"updatebutton unselectable  clickable\">\n                                <Subtract16 className=\"unclickable\"></Subtract16>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n            )\n        })\n\n        let encLayers = this.state.hiddenDims.map((data, layerindex) => {\n\n            let eachLayer = _.range(data).map((unitindex) => {\n                // console.log(\"layerunit\" + layerindex + unitindex)\n                return (\n                    <div nodeunit={\"layerunit\" + layerindex + unitindex} ref={\"layerunit\" + layerindex + unitindex} className={\"eachunitbox \" + (this.state.isTraining ? \" unitgrey\" : \" unitblue\")} key={\"eachunit\" + unitindex}></div>\n                )\n            })\n            return (\n                <div key={\"enclayer\" + layerindex} className=\"iblock encdecbox  mr10 flex flexfull flexjustifycenter \">\n                    <div className=\"iblock  mb5 mt5\">\n                        <div>\n                            <div className=\"smalldesc mb3 unselectable \">{data} units</div>\n                            <div\n                                layergroup=\"encoder\"\n                                unitindex={layerindex}\n                                buttonaction=\"add\"\n                                onClick={this.updateUnits.bind(this)}\n                                className={\"updatebutton unselectable mb3 clickable \" + (data === this.state.maxUnits ? \" disabled unclickable \" : \"\")}>\n                                <Add16 className=\"unclickable\"> </Add16>\n                            </div>\n                            <div layerdiv={\"layerdiv\" + layerindex} className=\"layerdiv  pt3 mb3\">{eachLayer}</div>\n                            <div\n                                layergroup=\"encoder\"\n                                unitindex={layerindex}\n                                buttonaction=\"subtract\"\n                                onClick={this.updateUnits.bind(this)}\n                                className={\"updatebutton unselectable mb3 clickable \" + (data === this.state.minUnits ? \" disabled unclickable \" : \"\")}>\n                                <Subtract16 className=\"unclickable\"></Subtract16>\n                            </div>\n\n                        </div>\n                    </div>\n                </div >\n            )\n        })\n\n        // console.log(encLayers.length);\n        let decLayers = _.reverse(_.clone(encLayers));\n\n        return (\n            <div className=\"mb10 \">\n\n\n\n                {/* Layer controls */}\n\n                <div className=\"flex w100 mb5 \">\n                    {/* <div className=\"mediumdesc mb5 mt5 mr10\"> * we map the same configuration for both encoder and decoder </div> */}\n                    <div className=\"flex5 \">\n                        <div className=\"smalldesc networktitle  p5\"> Encoder {this.state.hiddenDims.length} Layers </div>\n                    </div>\n                    <div className=\"buttonbar mr10 ml10 \">\n                        <div\n                            layergroup=\"encoder\"\n                            buttonaction=\"add\"\n                            onClick={this.updateLayerClick.bind(this)}\n                            className={\"updatebutton unselectable mr5 clickable \" + (this.state.hiddenDims.length === this.state.maxLayers ? \" disabled unclickable \" : \"\")}>\n                            <Add16 className=\"unclickable\"></Add16>\n                        </div>\n                        <div\n                            layergroup=\"encoder\"\n                            buttonaction=\"subtract\"\n                            onClick={this.updateLayerClick.bind(this)}\n                            className={\"updatebutton unselectable  clickable \" + (this.state.hiddenDims.length === this.state.minLayers ? \" disabled unclickable \" : \"\")}>\n                            <Subtract16 className=\"unclickable\"></Subtract16>\n                        </div>\n                    </div>\n                    <div className=\"unselectable flex5     \">\n                        <div className=\"flex p5 networktitle  mediumdesc \">\n                            <div className=\"flex flexjustifyleft \"> </div>\n                            <div className=\"flex flexfull flexjustifycenter   \"></div>\n                            <div className=\"smalldesc\"> Decoder {this.state.hiddenDims.length} Layers </div>\n                        </div>\n                    </div>\n                </div>\n\n                {/* Section titles */}\n                <div className=\"flex mb10 displaynone\">\n                    <div className=\"flex4 textaligncenter mediumdesc boldtext\"> Encoder </div>\n                    <div className=\"flex2 textaligncenter  mediumdesc boldtext\"> Bottleneck </div>\n                    <div className=\"flex4 textaligncenter  mediumdesc boldtext\"> Decoder </div>\n                </div>\n                {/* Encoder, bottleneck, Decoder  */}\n                <div className=\"flex\">\n                    <div className=\"iotextdata unselectable mr10 p5  \">\n                        input\n                    </div>\n                    <div id=\"mainencoderdiv\" ref=\"encoderbox\" className=\"encoder greyhighlight  pl5 flex5 mr10 \">\n                        <div className=\"layerbar flex  flexjustifycenter pb10 pt10\">\n                            {encLayers}\n                        </div>\n\n                    </div>\n                    <div ref=\"latentbox\" className=\"bottlneck pr5 pl5   mr10 \">\n                        <div className=\"layerbar  h100  flex  flexjustifycenter  \">\n                            {latentLayers}\n                        </div>\n                    </div>\n                    <div id=\"maindecoderdiv\" ref=\"decoderbox\" className=\"decoder greyhighlight  pl5 flex5 \">\n                        <div className=\"layerbar flex   flexjustifycenter  pb10 pt10\">\n                            {decLayers}\n                        </div>\n                    </div>\n\n                    <div className=\"iotextdata unselectable ml10 p5  \">\n                        output\n                    </div>\n\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default ComposeModel;","// Craft an autoencoder\n\n// const tf = require('@tensorflow/tfjs');\n// Craft an autoencoder\n\nconst tf = require('@tensorflow/tfjs');\n// const _ = require('lodash');\n\n\n\nexport function buildModel(params) {\n\n    const numFeatures = params.numFeatures    // Set feaetures to size of features \n    const latentDim = params.latentDim\n    const hiddenDim = params.hiddenDim\n    const outputActivation = params.outputActivation\n    const regularizationRate = params.regularizationRate\n    let layerRegularizer = null\n    // const\n    if (params.regularizer === \"l1\") {\n        layerRegularizer = tf.regularizers.l1({ l1: regularizationRate })\n\n    } else if (params.regularizer === \"l2\") {\n        layerRegularizer = tf.regularizers.l2({ l2: regularizationRate })\n\n    } else if (params.regularizer === \"l1l2\") {\n        layerRegularizer = tf.regularizers.l1l2({ l1: regularizationRate, l2: regularizationRate })\n    }\n\n\n    // Specify encoder \n    // const input = tf.input({ shape: [numFeatures] })\n    // let encoderHidden = tf.layers.dense({ units: 15, activation: \"relu\" }).apply(input);\n    // encoderHidden = tf.layers.dense({ units: 7, activation: \"relu\" }).apply(encoderHidden);\n    // const z_ = tf.layers.dense({ units: latentDim }).apply(encoderHidden);\n    // const encoder = tf.model({ inputs: input, outputs: z_, name: \"encoder\" })\n\n    const input = tf.input({ shape: [numFeatures] })\n    let encoderHidden = tf.layers.dense({ units: hiddenDim[0], activation: \"relu\", kernelRegularizer: layerRegularizer }).apply(input);\n    let i = 1\n    while (i < hiddenDim.length) {\n        encoderHidden = tf.layers.dense({ units: hiddenDim[i], activation: \"relu\", kernelRegularizer: layerRegularizer }).apply(encoderHidden);\n        i++\n    }\n    const z_ = tf.layers.dense({ units: latentDim }).apply(encoderHidden);\n    const encoder = tf.model({ inputs: input, outputs: z_, name: \"encoder\" })\n\n\n\n    const latentInput = tf.input({ shape: [latentDim] })\n    let decoderHidden = tf.layers.dense({ units: hiddenDim[hiddenDim.length - 1], activation: \"relu\", kernelRegularizer: layerRegularizer }).apply(latentInput);\n    let j = hiddenDim.length - 1\n    while (j > 0) {\n        j--;\n        decoderHidden = tf.layers.dense({ units: hiddenDim[j], activation: \"relu\", kernelRegularizer: layerRegularizer }).apply(decoderHidden);\n\n    }\n\n    const decoderOutput = tf.layers.dense({ units: numFeatures, activation: outputActivation }).apply(decoderHidden);\n    const decoder = tf.model({ inputs: latentInput, outputs: decoderOutput, name: \"decoder\" })\n\n    // link output of ender to decoder \n    let output = decoder.apply(encoder.apply(input))\n\n    // Construct AE with both encoder and decoder\n    const ae = tf.model({ inputs: input, outputs: output, name: \"autoencoder\" })\n\n\n    ae.compile({ optimizer: params.optimizer, loss: \"meanSquaredError\" })\n    return ae\n}\n\n\n","import React, { Component } from \"react\";\nimport {Dropdown, Slider, Checkbox, Tooltip } from \"carbon-components-react\"\nimport \"./train.css\"\nimport * as tf from '@tensorflow/tfjs';\nimport { computeAccuracyGivenThreshold, percentToRGB } from \"../helperfunctions/HelperFunctions\"\nimport ROCChart from \"../rocchart/ROCChart\"\n// custom charts \nimport HistogramChart from \"../histogram/HistogramChart\"\nimport ScatterPlot from \"../scatterplot/ScatterPlot\"\nimport LossChart from \"../losschart/LossChart\"\nimport ComposeModel from \"../composemodel/ComposeModel\"\n\nimport { Reset16, PlayFilledAlt16, PauseFilled16 } from '@carbon/icons-react';\nimport { buildModel } from \"./models/ae\"\nimport * as _ from \"lodash\"\n\n// const _ = require('lodash');\nclass Train extends Component {\n\n    constructor(props) {\n        super(props)\n\n       \n        \n\n        this.chartWidth = 350;\n        this.chartHeight = 250;\n\n        \n        \n        // Load sameple data\n        this.testData = require(\"../../data/ecg/test.json\")\n        this.trainData = require(\"../../data/ecg/train.json\")\n        // this.dummyMSe = require(\"../../data/dummy/mse.json\")\n\n        // Model update method passed to model composer component\n        this.updateModelDims = this.updateModelDims.bind(this)\n\n        this.stepOptions = [{ id: \"opt1\", text: \"50\", value: 50, type: \"steps\" }, { id: \"opt2\", text: \"100\", value: 100, type: \"steps\" }]\n        this.regularizerOptions = [{ id: \"opt1\", text: \"None\", value: \"none\", type: \"regularizer\" }, { id: \"opt1\", text: \"l1\", value: \"l1\", type: \"regularizer\" }, { id: \"opt2\", text: \"l2\", value: \"l2\", type: \"regularizer\" }, { id: \"opt2\", text: \"l1l2\", value: \"l1l2\", type: \"regularizer\" }]\n        this.batchSizeOptions = [{ id: \"opt1\", text: \"64\", value: 64, type: \"batchsize\" }, { id: \"opt2\", text: \"128\", value: 128, type: \"batchsize\" }, { id: \"opt3\", text: \"256\", value: 256, type: \"batchsize\" }, { id: \"opt3\", text: \"512\", value: 512, type: \"batchsize\" }, { id: \"opt3\", text: \"1024\", value: 1024, type: \"batchsize\" }]\n        this.learningRateOptions = [{ id: \"opt1\", text: \"0.01\", value: 0.01, type: \"learningrate\" }, { id: \"opt2\", text: \"0.001\", value: 0.001, type: \"learningrate\" }, { id: \"opt3\", text: \"0.0001\", value: 0.0001, type: \"learningrate\" },{ id: \"opt5\", text: \"0.1\", value: 0.1, type: \"learningrate\" },{ id: \"opt6\", text: \"1\", value: 1, type: \"learningrate\" },{ id: \"opt7\", text: \"10\", value: 10, type: \"learningrate\" }]\n        // this.regularizationRateOptions = [ \n        //     { id: \"opt3\", text: \"0.01\", value: 0.01, type: \"regularizationrate\" },\n        //     { id: \"opt1\", text: \"0.001\", value: 0.001, type: \"regularizationrate\" },\n        //     { id: \"opt2\", text: \"0.0001\", value: 0.0001, type: \"regularizationrate\" }, \n        // ]\n        this.trainingDataOptions = [{ id: \"opt1\", text: \"500\", value: 500, type: \"traindatasize\" }, { id: \"opt2\", text: \"1000\", value: 1000, type: \"traindatasize\" }, { id: \"opt3\", text: \"2000\", value: 2000, type: \"traindatasize\" }]\n        this.testDataOptions = [{ id: \"opt1\", text: \"100\", value: 100, type: \"testdatasize\" }, { id: \"opt2\", text: \"200\", value: 200, type: \"testdatasize\" }, { id: \"opt3\", text: \"500\", value: 500, type: \"testdatasize\" }]\n        this.optimizerOptions = [\n            { id: \"opt1\", text: \"Adam\", value: \"adam\", type: \"optimizer\" },\n            { id: \"opt3\", text: \"Adamax\", value: \"adamax\", type: \"optimizer\" },\n            { id: \"opt4\", text: \"Adadelta\", value: \"adadelta\", type: \"optimizer\" },\n            { id: \"opt5\", text: \"Rmsprop\", value: \"rmsprop\", type: \"optimizer\" },\n            { id: \"opt6\", text: \"Momentum\", value: \"momentum\", type: \"optimizer\" },\n            { id: \"opt7\", text: \"sgd\", value: \"sgd\", type: \"optimizer\" },\n        ]\n        this.abnormalPercentageOptions = [\n            { id: \"opt1\", text: \"0%\", value: 0, type: \"abnormalpercentage\" },\n            { id: \"opt3\", text: \"5%\", value: 0.05, type: \"abnormalpercentage\" },\n            { id: \"opt4\", text: \"10%\", value: 0.1, type: \"abnormalpercentage\" },\n            { id: \"opt5\", text: \"20%\", value: 0.2, type: \"abnormalpercentage\" },\n            { id: \"opt2\", text: \"30%\", value: 0.3, type: \"abnormalpercentage\" },\n            { id: \"opt6\", text: \"50%\", value: 0.5, type: \"abnormalpercentage\" },\n            { id: \"opt7\", text: \"70%\", value: 0.7, type: \"abnormalpercentage\" },\n        ]\n\n        \n\n\n        this.selectedAbnormalPercentage = 0\n        this.selectedTrainDataOption = 0\n        this.selectedTestDataOption = 2\n        this.selectedOptimizer = 0\n\n        this.selectedRegularizer = 0\n\n        this.trainMetricHolder = []\n        this.CumulativeSteps = 0;\n\n        this.state = {\n            apptitle: \"Anomagram\",\n            isTraining: false,\n            trainDataShape: [0, 0],\n            testDataShape: [0, 0],\n            mseData: [],\n            rocData: [],\n            createdModel: null,\n            encodedData: [],\n            selectedData: 0,\n\n            currentEpoch: 0,\n            numFeatures: this.testData[0].data.length,\n            hiddenLayers: 2,\n            latentDim: 2,\n            hiddenDim: [8, 3],\n            learningRate: this.learningRateOptions[0].value,\n            regularizer: this.regularizerOptions[this.selectedRegularizer].value,\n            adamBeta1: 0.5,\n            optimizer: this.optimizerOptions[this.selectedOptimizer].value,\n            outputActivation: \"sigmoid\",\n            batchSize: this.batchSizeOptions[3].value,\n            numSteps: this.stepOptions[0].value,\n            numEpochs: 1,\n\n\n            trainMetrics: this.trainMetricHolder,\n            CumulativeSteps: 0,\n            trainDataSize: this.trainingDataOptions[this.selectedTrainDataOption].value,\n            testDataSize: this.testDataOptions[this.selectedTestDataOption].value,\n\n            modelStale: true,\n            bestMetric: { acc: 0, fpr: 0, fnr: 0, tnr: 0, tpr: 0, threshold: 0 },\n            minThreshold: 0,\n            maxThreshold: 1,\n\n\n            showModelComposer: true,\n            showModelEvaluationMetrics: true,\n            showRocChart: true,\n            showLossChart: true,\n            showMseHistogram: true,\n            showBottleneckScatterPlot: true,\n\n\n            validateOnStep: true,\n            auc: 0,\n\n\n            showAdvanced: true,\n            showIntroduction: false,\n            showWarmingUp: true,\n\n            \n            lossChartHeight: this.chartHeight,\n            lossChartWidth: this.chartWidth,\n            abnormalPercentage: this.abnormalPercentageOptions[this.selectedAbnormalPercentage].value\n        }\n\n        this.showOptions = [\n            { label: \"Model Composer\", action: \"composer\", checked: this.state.showModelComposer },\n            { label: \"Model Metrics\", action: \"evaluation\", checked: this.state.showModelEvaluationMetrics }, { label: \"Training Loss\", action: \"loss\", checked: this.state.showLossChart },\n            { label: \"Error Histogram\", action: \"histogram\", checked: this.state.showMseHistogram },\n            { label: \"ROC Curve\", action: \"roc\", checked: this.state.showRocChart },\n            { label: \"Bottleneck Plot\", action: \"bottleneck\", checked: this.state.showBottleneckScatterPlot },\n\n        ]\n\n\n        this.currentSteps = 0;\n\n        this.xsTrain = []\n        this.xsTest = []\n        this.yTest = []\n\n        this.trainDataPath = \"data/ecg/train.json\"\n        this.testDataPath = \"data/ecg/test.json\" \n        this.momentum = 0.9 \n\n        this.modelWarmedUp = false;\n\n    }\n\n    componentDidMount() {\n        // this.loadSavedModel() \n\n        this.generateDataTensors()\n        // this.computeAccuracyMetrics(this.dummyMSe)\n\n        setTimeout(() => {\n            // this.createModel()\n        }, 100);\n\n        this.getChartContainerSizes()\n\n\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if ((prevState.isTraining !== this.state.isTraining) && this.state.isTraining === false) {\n            // console.log(\"training ended\"); \n        }\n\n        if (this.currentSteps === 0 && prevState.mseData[0] !== this.state.mseData[0]) {\n            // console.log(\"mse updated at 0\");\n            this.computeAccuracyMetrics(this.state.mseData)\n        }\n\n        if (this.state.CumulativeSteps !== prevState.CumulativeSteps) {\n            // console.log(this.state.CumulativeSteps);\n            this.computeAccuracyMetrics(this.state.mseData)\n        }\n\n        // if train or test size updated, regenerate tensors\n        if (this.state.trainDataSize !== prevState.trainDataSize || this.state.testDataSize !== prevState.testDataSize || this.state.abnormalPercentage !== prevState.abnormalPercentage ) {\n            this.generateDataTensors()\n        }\n    }\n\n\n    disposeModelTensors() {\n        if (this.createdModel) {\n            // this.encoder.dispose()\n            this.createdModel.dispose()\n            this.optimizer.dispose()\n\n        }\n    }\n\n    componentWillUnmount() {\n        this.setState({ isTraining: false })\n        this.disposeModelTensors()\n        this.xsTest.dispose()\n        this.xsTrain.dispose()\n        // this.xsWarmup.dispose()\n        // console.log(tf.memory());\n\n    }\n    createModel() {\n\n\n\n        // dispose of existing model to release tensors from memory\n        this.disposeModelTensors()\n\n\n        //construct model\n        switch (this.state.optimizer) {\n            case \"adam\":\n                this.optimizer = tf.train.adam(this.state.learningRate, this.state.adamBeta1)\n                break\n            case \"adamax\":\n                this.optimizer = tf.train.adamax(this.state.learningRate, this.state.adamBeta1)\n                break\n            case \"adadelta\":\n                this.optimizer = tf.train.adadelta(this.state.learningRate)\n                break\n            case \"rmsprop\":\n                this.optimizer = tf.train.rmsprop(this.state.learningRate)\n                break\n            case \"momentum\":\n                this.optimizer = tf.train.momentum(this.state.learningRate, this.momentum)\n                break\n            case \"sgd\":\n                this.optimizer = tf.train.sgd(this.state.learningRate)\n                break\n            default:\n                break;\n        }\n\n\n\n        let modelParams = {\n            numFeatures: this.state.numFeatures,\n            hiddenLayers: this.state.hiddenLayers,\n            latentDim: this.state.latentDim,\n            hiddenDim: this.state.hiddenDim,\n            optimizer: this.optimizer,\n            outputActivation: \"sigmoid\",\n            regularizer: this.state.regularizer,\n            regularizationRate: this.state.learningRate\n        }\n\n        this.createdModel = buildModel(modelParams)\n        this.setState({ modelStale: false })\n        this.getPredictions()\n\n\n        // this.createdModel.summary()\n\n        // setTimeout(() => {\n        // this.modelWarmUp()\n        // }, 5000);\n\n        // showToast(\"success\", \"Model successfully created\")\n        // console.log(tf.memory());\n        this.setState({showWarmingUp: false})\n    }\n\n    warmUpModel() {\n\n        // let warmUpTensor = tf.tensor2d(this.trainData[0].data,[1,140])\n         console.log(\"attempting warmup\");\n         \n        let warmUpTensor =  tf.tensor2d(this.trainData.slice(0,10).map(item => item.data\n            ), [10, this.trainData[0].data.length])\n        this.setState({ trainDataShape: this.xsTrain.shape })\n        \n        let startTime = new Date();\n        this.createdModel.fit(warmUpTensor, warmUpTensor, { epochs: 1, verbose: 0, batchSize: 512}\n        ).then(res => {\n            let endTime = new Date();\n            let elapsedTime = (endTime - startTime) / 1000\n            console.log(\"Warmup done\", elapsedTime);\n        });\n\n    }\n    trainModel() {\n        // for (let i = 0; i < this.numSteps; i++) {\n\n        this.currentSteps++;\n        //update progresssbar\n        // let progress = Math.floor((this.currentSteps / this.state.numSteps) * 100) + \"%\"\n        // this.refs[\"glowbar\"].style.width = progress;\n\n\n\n        this.CumulativeSteps++;\n        this.setState({ CumulativeSteps: this.CumulativeSteps });\n        // \n        let startTime = new Date();\n        this.createdModel.fit(this.xsTrain,\n            this.xsTrain, { epochs: this.state.numEpochs, verbose: 0, batchSize: this.state.batchSize, validationData: [this.xsTest, this.xsTest] }\n        ).then(res => {\n            let endTime = new Date();\n            let elapsedTime = (endTime - startTime) / 1000\n            // console.log(elapsedTime);\n\n            let metricRow = { epoch: this.CumulativeSteps, loss: res.history.loss[0], val_loss: res.history.val_loss[0], traintime: elapsedTime }\n            this.trainMetricHolder.push(metricRow)\n            // this.setState({ trainMetrics: this.trainMetricHolder });\n            // console.log(\"Step loss\", this.currentSteps, this.CumulativeSteps, res.history.loss[0], elapsedTime);\n            this.getPredictions();\n\n            // console.log(this.state.numSteps);\n\n            if (this.state.numSteps > this.currentSteps && this.state.isTraining) {\n                this.setState({ currentEpoch: this.currentSteps })\n                this.trainModel()\n            } else {\n                this.currentSteps = 0\n                this.setState({ isTraining: false })\n            }\n        });\n    }\n\n    async loadSavedModel() {\n        // TODO .. launch loadning spinnr\n        let modelPath = \"/webmodel/ecg/model.json\"\n        this.savedModel = await tf.loadLayersModel(modelPath);\n        console.log(\"model loaded\");\n        this.loadTestData()\n\n    }\n\n\n    computeAccuracyMetrics(data) {\n\n        let uniqueMse = _.uniq(_.map(data, 'mse'))\n\n        uniqueMse = _(uniqueMse).sortBy().value()\n        uniqueMse.reverse()\n\n\n\n\n        let rocMetricHolder = []\n        let rocSum = 0\n        let prevMetric = { fpr: 0, tpr: 0 }\n\n        uniqueMse.forEach((each, i) => {\n            let metric = computeAccuracyGivenThreshold(data, each)\n\n            rocMetricHolder.push(metric)\n            // if (i < uniqueMse.length) {\n            // rocSum += (prevMetric.tpr) * (metric.fpr - prevMetric.fpr)\n            rocSum += ((prevMetric.tpr + metric.tpr) / 2) * (metric.fpr - prevMetric.fpr)\n            // console.log(i, rocSum);\n            // }\n            prevMetric = metric\n\n        });\n\n        // Add point (1,1) to compute AUC\n        // use trapezium area rule to calculate area\n        if (prevMetric.fpr !== 1) {\n            rocMetricHolder.push({ fpr: 1, tpr: prevMetric.tpr })\n            rocSum += ((prevMetric.tpr + 1) / 2) * (1 - prevMetric.fpr)\n            // rocSum += prevMetric.tpr * (1 - prevMetric.fpr)\n        }\n\n\n        // console.log(rocSum, \" Region under curve\");\n        // console.log(rocMetricHolder);\n\n\n        this.setState({ rocData: rocMetricHolder })\n        this.setState({ auc: rocSum })\n        // console.log(\"mse initial\", _.min(uniqueMse), _.max(uniqueMse));\n\n        let bestMetric = _.maxBy(rocMetricHolder, \"acc\")\n        this.setState({ bestMetric: bestMetric })\n        this.setState({ minThreshold: _.min(uniqueMse) })\n        this.setState({ maxThreshold: _.max(uniqueMse) })\n\n\n    }\n\n\n    getPredictions() {\n        let self = this;\n\n        // Get predictions \n        // let startTime = new Date()\n        let preds = this.createdModel.predict(this.xsTest, { batchSize: this.state.batchSize })\n        // let elapsedTime = (new Date() - startTime) / 1000\n        // console.log(\"prediction time\", elapsedTime);\n\n\n        //With large batchsize - 0.001, defualt batchsize .. 0.015\n        // Compute mean squared error difference between predictions and ground truth\n        const mse = tf.tidy(() => {\n            return tf.sub(preds, this.xsTest).square().mean(1)\n        })\n        // let mse = tf.sub(preds, this.xsTest).square().mean(1) //tf.losses.meanSquaredError(preds, xsTest)\n        let mseDataHolder = []\n        mse.array().then(array => {\n            array.forEach((element, i) => {\n                // console.log({ \"mse\": element, \"label\": yTest[i] });\n                mseDataHolder.push({ \"mse\": element, \"label\": this.yTest[i] })\n                // console.log(mseDataHolder.length)\n            });\n            self.setState({ mseData: mseDataHolder })\n\n            // console.log(mseDataHolder);\n\n        });\n\n\n\n        // Generate encoder output \n        this.encoder = tf.model({ inputs: this.createdModel.inputs, outputs: this.createdModel.getLayer(\"encoder\").getOutputAt(1) });\n        let encoderPredictions = this.encoder.predict(this.xsTest)\n\n\n        let encPredHolder = []\n        encoderPredictions.array().then(array => {\n            array.forEach((element, i) => {\n                encPredHolder.push({ x: element[0], y: element[1], \"label\": this.yTest[i] })\n            });\n            self.setState({ encodedData: encPredHolder })\n        })\n\n\n        preds.dispose()\n        encoderPredictions.dispose()\n        mse.dispose()\n        // console.log(tf.memory());\n\n    }\n\n    updateModelDims(hiddenDims, latentDim) {\n        // console.log(hiddenDims, latentDim);\n        this.setState({ hiddenDim: hiddenDims })\n        this.setState({ latentDim: latentDim[0] })\n        this.setState({ modelStale: true })\n\n    }\n\n    // visualizeMSE(mse)\n    generateDataTensors() {\n        //shuffle data\n        this.trainData = _.shuffle(this.trainData)\n        this.testData = _.shuffle(this.testData)\n\n        let maxAbnormalCount = this.state.abnormalPercentage * this.state.trainDataSize;\n        let abnormalCount = 0;\n\n        let trainEcg = []\n        //Add abnormal samples\n        for (let row in this.trainData) {\n            let val = this.trainData[row] \n            if (val.target + \"\" !== 1 + \"\") {\n                if (abnormalCount < maxAbnormalCount) {\n                    trainEcg.push(val)\n                    abnormalCount++\n                }\n            }\n        }\n\n        //Add  positive normal ECG (target==1) to train json array \n        for (let row in this.trainData) {\n            let val = this.trainData[row]\n            if (val.target + \"\" === 1 + \"\") { \n                if (trainEcg.length < this.state.trainDataSize) {\n                    trainEcg.push(val)\n                } else {\n                    break\n                }\n            }  \n        }\n\n        console.log(maxAbnormalCount, \"abnormal samples\",  abnormalCount, \"Total\", trainEcg.length);\n        \n\n        // Create train tensor from json array\n        this.xsTrain = tf.tensor2d(trainEcg.map(item => item.data\n        ), [trainEcg.length, trainEcg[0].data.length])\n        this.setState({ trainDataShape: this.xsTrain.shape })\n\n\n        // Create test data TENSOR from test data json array \n        let testData = this.testData.slice(0, this.state.testDataSize)\n        this.xsTest = tf.tensor2d(testData.map(item => item.data\n        ), [testData.length, testData[0].data.length])\n\n        // Create yLabel Tensor\n        this.yTest = testData.map(item => item.target + \"\" === 1 + \"\" ? 0 : 1)\n\n        this.setState({ testDataShape: this.xsTest.shape })\n\n    }\n\n    trainButtonClick(e) {\n        if (this.state.isTraining) {\n            this.setState({ isTraining: false })\n        } else {\n            this.setState({ isTraining: true })\n            this.trainModel()\n        }\n    }\n\n    resetModelButtonClick(e) {\n        this.setState({ isTraining: false })\n        this.CumulativeSteps = 0\n        this.setState({ CumulativeSteps: 0 })\n        // this.setState({ mseData: [] })\n        this.trainMetricHolder = []\n        this.setState({ trainMetrics: this.trainMetricHolder })\n        this.createModel()\n    }\n\n    updateModelParam(e) {\n        // console.log(e);\n        switch (e.selectedItem.type) {\n            case \"steps\":\n                this.setState({ numSteps: e.selectedItem.value })\n                break\n            case \"batchsize\":\n                this.setState({ batchSize: e.selectedItem.value })\n                this.setState({ modelStale: true })\n                break\n            case \"learningrate\":\n                this.setState({ learningRate: e.selectedItem.value })\n                this.setState({ modelStale: true })\n                break\n            case \"traindatasize\":\n                this.setState({ trainDataSize: e.selectedItem.value }) \n                break\n            case \"abnormalpercentage\":\n                    this.setState({ abnormalPercentage: e.selectedItem.value }) \n                    break\n            case \"testdatasize\":\n                this.setState({ testDataSize: e.selectedItem.value })\n                break\n            case \"optimizer\":\n                this.setState({ optimizer: e.selectedItem.value })\n                this.setState({ modelStale: true })\n                break\n            case \"regularizer\":\n                this.setState({ regularizer: e.selectedItem.value })\n                this.setState({ modelStale: true })\n                break\n            default:\n                break\n        }\n\n\n    }\n\n\n    updateThreshold(e) {\n        if (this.state.mseData.length > 0) {\n            let threshVal = this.state.minThreshold + (e.value / 100) * (this.state.maxThreshold - this.state.minThreshold)\n            let bestMetric = computeAccuracyGivenThreshold(this.state.mseData, threshVal)\n            // console.log(e.value, this.state.mseData);\n            this.setState({ bestMetric: bestMetric })\n        }\n\n    }\n\n    \n\n    showOptionsClick(e) {\n        // console.log(e.target.checked, e.target.getAttribute(\"action\"));\n        switch (e.target.getAttribute(\"action\")) {\n            case \"histogram\":\n                this.setState({ showMseHistogram: e.target.checked })\n                break\n            case \"loss\":\n                this.setState({ showLossChart: e.target.checked })\n                break\n            case \"composer\":\n                this.setState({ showModelComposer: e.target.checked })\n                break\n            case \"bottleneck\":\n                this.setState({ showBottleneckScatterPlot: e.target.checked })\n                break\n            case \"roc\":\n                this.setState({ showRocChart: e.target.checked })\n                break\n            case \"evaluation\":\n                this.setState({ showModelEvaluationMetrics: e.target.checked })\n                break\n            default:\n                break\n        }\n\n    }\n\n    toggleAdvancedDrawer(e) {\n        this.setState({ showAdvanced: !(this.state.showAdvanced) })\n    }\n\n    toggleIntroDrawer(e) {\n        this.setState({ showIntroduction: !(this.state.showIntroduction) })\n    }\n \n    getChartContainerSizes() {\n        \n\n        this.setState({ lossChartHeight: this.refs[\"modelevalbox\"].offsetHeight-  50 })\n        // this.setState({lossChartWidth: this.refs[\"modelevalbox\"].offsetWidth })\n         \n        \n    }\n\n    render() {\n        // console.log(this.state.minThreshold, this.state.maxThreshold);\n        \n        // Use chart state determine when to redraw model composer lines as UI has change\n        let chartState = \"\"\n        this.showOptions.forEach(data => {\n            let box = document.getElementById(data.action + \"checkboxid\")\n            if (box !== null) {\n                chartState += box.checked \n            } \n        }); \n\n        \n\n        //get size of chart containers\n       \n         \n\n        let showCheckBoxes = this.showOptions.map((data) => {\n            return (\n                <div key={data.label + \"checkbox\"} className=\"mediumdesc iblock mr10\">\n                    <Checkbox\n                        defaultChecked={data.checked}\n                        wrapperClassName={\"mediumdesc chartchecks\"}\n                        className={\"mediumdesc \"}\n                        labelText={data.label}\n                        id={data.action + \"checkboxid\"}\n                        action={data.action}\n                        onClick={this.showOptionsClick.bind(this)}\n                    ></Checkbox>\n                </div>\n            )\n        })\n\n        let trainResetButtons = (\n            <div>\n                <div className=\"  flex flexjustifycenter pt10 \">\n\n                   \n\n                    <div className=\"iblock h100 mr5 \">\n                        <div className=\"  flex flexjustifycenter h100  \">\n                            <div className=\"\">\n                                <div\n                                    onClick={this.resetModelButtonClick.bind(this)}\n                                    className={\" circlesmall circlebutton mr5 flex flexjustifycenter clickable \" + (this.state.isTraining ? \"  disabled\" : \"\") + \" \" + (this.state.modelStale ? \" pulse\" : \"\")}>\n                                    <Reset16 style={{ fill: \"white\" }} className=\"unselectable unclickable\" />\n\n                                </div>\n                                <div className=\" displayblock smalldesc textaligncenter pt5 \"> Initialize  </div>\n                            </div>\n\n                        </div>\n\n                    </div>\n\n                    <div className=\" iblock mr10\">\n                        <div\n                            onClick={this.trainButtonClick.bind(this)}\n                            className={(\"iblock circlelarge circlebutton mr5 flexcolumn flex flexjustifycenter clickable \") + (this.state.modelStale ? \" disabled\" : \"\")}>\n                            {!this.state.isTraining && <PlayFilledAlt16 style={{ fill: \"white\" }} className=\"unselectable unclickable\" />}\n                            {this.state.isTraining && <PauseFilled16 style={{ fill: \"white\" }} className=\"unselectable unclickable\" />}\n                        </div>\n                        <div className=\"smalldesc textaligncenter pt5 pb5 \"> Train &nbsp; </div>\n                    </div>\n\n\n\n                </div>\n            </div>\n        )\n        let configBar = (\n            <div style={{ zIndex: 100 }} className=\"w100   unselectable greyhighlight  flex flexjustifyleft flexjustifycenter  \">\n                <div className=\"pl10 pt10 pr10 pb5  iblock\">\n                    <div className=\"iblock mr10\">\n                        <div className=\"mediumdesc pb7 pt5\"> Steps {this.state.numSteps} - {this.state.CumulativeSteps} </div>\n                        <Dropdown\n                            id=\"epochsdropdown\"\n                            label=\"Steps\"\n                            items={this.stepOptions}\n                            initialSelectedItem={this.stepOptions[0]}\n                            itemToString={item => (item ? item.text : \"\")}\n                            onChange={this.updateModelParam.bind(this)}\n                        />\n                    </div>\n\n                    <div className=\"iblock mr10\">\n                        <div className=\"mediumdesc pb7 pt5\"> Batchsize {this.state.batchSize} </div>\n                        <Dropdown\n                            id=\"batchsizedropdown\"\n                            label=\"Batch Size\"\n                            items={this.batchSizeOptions}\n                            initialSelectedItem={this.batchSizeOptions[3]}\n                            itemToString={item => (item ? item.text : \"\")}\n                            onChange={this.updateModelParam.bind(this)}\n                        />\n                    </div>\n\n                    <div className=\"iblock mr10\">\n                        <div className=\"mediumdesc pb7 pt5\"> Learning Rate {this.state.learningRate} </div>\n                        <Dropdown\n                            id=\"learningratedropdown\"\n                            label=\"Learning Rate\"\n                            items={this.learningRateOptions}\n                            itemToString={item => (item ? item.text : \"\")}\n                            initialSelectedItem={this.learningRateOptions[0]}\n                            onChange={this.updateModelParam.bind(this)}\n                        />\n                    </div>\n\n                    <div className=\"iblock mr10\">\n                        <div className=\"mediumdesc pb7 pt5\"> Regularlizer {this.state.regularizer} </div>\n                        <Dropdown\n                            id=\"regularizeerdropdown\"\n                            label=\"Regularizer\"\n                            items={this.regularizerOptions}\n                            itemToString={item => (item ? item.text : \"\")}\n                            initialSelectedItem={this.regularizerOptions[this.selectedRegularizer]}\n                            onChange={this.updateModelParam.bind(this)}\n                        />\n                    </div>\n\n                    <div style={{ zIndex: 5000 }} className=\"iblock mr10 \">\n                        <div className=\"mediumdesc pb7 pt5\"> Optimizer {this.state.optimizer} </div>\n                        <Dropdown\n                            style={{ zIndex: 100 }}\n                            id=\"optimizerdropdown\"\n                            label=\"Optimizer\"\n                            items={this.optimizerOptions}\n                            itemToString={item => (item ? item.text : \"\")}\n                            initialSelectedItem={this.optimizerOptions[this.selectedOptimizer]}\n                            onChange={this.updateModelParam.bind(this)}\n                        />\n                    </div>\n\n                     \n                    <div className=\"iblock mr10 borderleftdash pl10 \">\n                    {/* <div className=\"configsectiontitle smalldesc iblock mr10\">  Dataset </div> */}\n                        <div className=\"iblock\">\n                        <div className=\"mediumdesc pb7 pt5\">Train Size {this.state.trainDataShape[0]} </div>\n                        <Dropdown\n                            id=\"trainingdatadropdown\"\n                            label=\"Training Data\"\n                            items={this.trainingDataOptions}\n                            initialSelectedItem={this.trainingDataOptions[this.selectedTrainDataOption]}\n                            itemToString={item => (item ? item.text : \"\")}\n                            onChange={this.updateModelParam.bind(this)}\n                        />\n                        </div>\n                    </div>\n\n                    <div className=\"iblock mr10\">\n                        <div className=\"mediumdesc pb7 pt5\"> Abnormal % {this.state.abnormalPercentage} </div>\n                        <Dropdown\n                            id=\"abnormalpercentagedatadropdown\"\n                            label=\"Abnormal %\"\n                            items={this.abnormalPercentageOptions}\n                            initialSelectedItem={this.abnormalPercentageOptions[this.selectedAbnormalPercentage]}\n                            itemToString={item => (item ? item.text : \"\")}\n                            onChange={this.updateModelParam.bind(this)}\n                        />\n                    </div>\n\n                    <div className=\"iblock mr10\">\n                        <div className=\"mediumdesc pb7 pt5\">Test Size {this.state.testDataShape[0]} </div>\n                        <Dropdown\n                            id=\"testdatadropdown\"\n                            label=\"Test Data\"\n                            items={this.testDataOptions}\n                            itemToString={item => (item ? item.text : \"\")}\n                            initialSelectedItem={this.testDataOptions[this.selectedTestDataOption]}\n                            onChange={this.updateModelParam.bind(this)}\n                        />\n                    </div>\n\n                \n                    <div className=\"   pt5 pb3\">  \n                        {this.state.modelStale && <div className=\"smallblueball pulse iblock\"></div>}\n                        {(this.state.modelStale && this.state.CumulativeSteps === 0 )&& <span className=\"mediumdesc\"> Select model parameters and click <span className=\"boldtext \"> initialize </span> to compile model.</span>}\n                        {(this.state.modelStale && this.state.CumulativeSteps > 0) && <span className=\"mediumdesc\"> Model configuration has changed. Click <span className=\"boldtext \"> initialize </span> to recompile model.</span>}\n                    { !this.state.modelStale && <span className=\"mediumdesc\"> Model compiled based on selected parameters. Ready to <span className=\"boldtext\"> train </span>. </span> }\n                    </div>\n                </div>\n            </div>\n        )\n \n        if (this.state.encodedData[0]) {\n            // console.log(this.state.encodedData[0].x);\n            this.firstEncode = this.state.encodedData[0].x + this.state.encodedData[1].x\n        }\n        let compBoxSize = 0\n        if (this.refs[\"composemodelbox\"]) {\n            compBoxSize = this.refs[\"composemodelbox\"].offsetWidth\n        }\n        // console.log(compBoxSize);\n        \n        let modelComposerBlock = (\n            <div className=\"composermaindiv\">\n                 {/* // Model Composer  */}\n                {this.state.showModelComposer &&\n                        <div className=\" mr10 \">\n                            <div>\n                                <div className=\"charttitle mb5 \">\n                                    Model Composer\n                            </div>\n                                <div>\n                                    <ComposeModel\n                                        hiddenDims={this.state.hiddenDim}\n                                        latentDim={[this.state.latentDim]}\n                                        isTraining={this.state.isTraining}\n                                        updateModelDims={this.updateModelDims}\n                                        adv={this.state.showAdvanced + \"b\" + this.state.showIntroduction + chartState + this.firstEncode + \"-\" + compBoxSize}\n                                    />\n                                </div>\n                            </div>\n                        </div>}\n            </div>\n        )\n\n        let lossChartBlock = (\n            <div>\n                {this.state.showLossChart && <div className=\"iblock mr10  h100 \" > \n                                    <div>\n                                        <div className=\"charttitle \">\n                                            Train Loss\n                                        </div>\n\n                        <div>\n                        <div className={\"positionrelative h100 \" + (this.state.trainMetrics.length <= 0 ? \" \" : \"\")} style={{ width: this.chartWidth, height: this.chartHeight }}>\n                                {this.state.trainMetrics.length <= 0 &&\n                                    <div className=\"notrainingdata\">  No training loss data yet </div>\n                                }\n                                 \n                                    {this.state.trainMetrics.length > 0 &&\n                                                    <LossChart\n                                                        data={{\n                                                            data: this.state.trainMetrics,\n                                                            chartWidth: this.chartWidth,\n                                                            chartHeight: this.state.lossChartHeight,\n                                                            epoch: this.state.CumulativeSteps\n                                                        }}\n\n                                        ></LossChart>\n                                }\n                                </div>\n                                        </div>\n                                    </div> \n                        </div>}\n            </div>\n        )\n\n        let rocChartBlock = (\n            <div>\n                {this.state.showRocChart && <div className=\"iblock mr10\">\n                            {this.state.rocData.length > 0 &&\n                                <div>\n                                    <div className=\"charttitle \">\n                                        ROC Curve Chart [ AUC : {this.state.auc.toFixed(2)} ]\n                                    </div>\n\n                                    <div>\n                                        <ROCChart\n                                            data={{\n                                                chartWidth: this.chartWidth,\n                                                chartHeight: this.state.lossChartHeight,\n                                                data: this.state.rocData,\n                                                isTraining: this.state.isTraining,\n                                                epoch: this.state.CumulativeSteps,\n                                                auc: this.state.auc\n\n                                            }} \n                                        ></ROCChart>\n                                    </div>\n                                </div>\n                            }\n                        </div>}\n            </div>\n        )\n\n        let mseHistogramBlock = (\n            <div>\n                {this.state.showMseHistogram && <div className=\"iblock mr10 \">\n                            {this.state.mseData.length > 0 && \n                                <div>\n                                    <div className=\"charttitle\"> Histogram of Mean Square Error </  div>\n\n                                    <div>\n                                        <HistogramChart\n                                            data={{\n                                                data: this.state.mseData,\n                                                chartWidth: this.chartWidth,\n                                                chartHeight: this.state.lossChartHeight,\n                                                epoch: this.state.CumulativeSteps,\n                                                threshold: this.state.bestMetric.threshold\n                                            }}\n                                        ></HistogramChart>\n                                    </div>\n                                </div> \n                            }\n                        </div>}\n            </div>\n        )\n\n        let bottleneckScatterPlotBlock = (\n            <div>\n                 {this.state.showBottleneckScatterPlot && <div className=\"iblock mr10  \">\n                            {this.state.encodedData.length > 0 &&\n\n                                <div>\n                                    <div className=\"charttitle\"> Bottleneck Scatterplot </  div>\n\n                                    <div>\n                                        <ScatterPlot\n                                            data={{\n                                                data: this.state.encodedData,\n                                                chartWidth: this.chartWidth,\n                                                chartHeight: this.state.lossChartHeight,\n                                                epoch: this.state.CumulativeSteps\n                                            }}\n\n                                        ></ScatterPlot>\n                                    </div>\n                                </div>\n\n                            }\n                        </div>}\n            </div>\n        )\n\n        let modelMetricsBlock = (\n            <div className=\"flex  w100 pr10   \"> \n                    {(this.state.bestMetric && this.state.showModelEvaluationMetrics) &&\n\n                        <div className={\"iblock perfmetrics w100 \" + (this.state.isTraining ? \" disabled \" : \" \")}>\n                            <div className=\"charttitle mb5 \">\n                                Model Evaluation Metrics\n                            </div>\n                            <div className=\"mb5 greyhighlight p10 touchnoscroll\">\n                                <Slider\n                                    className=\"w100 border\"\n                                    min={0} //{(this.state.minThreshold.toFixed(4) * 1)}\n                                    max={100}//{(this.state.maxThreshold.toFixed(4) * 1)}\n                                    step={2}\n                                    minLabel={\"%\"}\n                                    maxLabel={\"%\"}\n                                    value={((this.state.bestMetric.threshold - this.state.minThreshold) / (this.state.maxThreshold - this.state.minThreshold)) * 100}\n                                    stepMuliplier={10}\n                                    disabled={this.state.isTraining ? true : false}\n                                    labelText={\"Threshold \" + (this.state.bestMetric.threshold).toFixed(4) + \" [ \" + (((this.state.bestMetric.threshold - this.state.minThreshold) / (this.state.maxThreshold - this.state.minThreshold)) * 100).toFixed(0) + \" % ] \"}\n                                    hideTextInput={true}\n                                    onChange={this.updateThreshold.bind(this)}\n                                />\n                            </div>\n                            <div className=\"flex\">\n                                <div style={{ borderLeftColor: percentToRGB((this.state.bestMetric.acc * 100)) }} className=\"metricguage mb5 p5 greyhighlight  textaligncenter mr5 flex5\" >\n                                    <div className=\"metricvalue textaligncenter  rad4\"> {(this.state.bestMetric.acc * 100).toFixed(2)}  %</div>\n                                    <div className=\"metricdesc mediumdesc p5\"> Best Accuracy </div>\n                                </div>\n                                <div style={{ borderLeftColor: percentToRGB((this.state.auc * 100)) }} className=\"metricguage mb5 p5 greyhighlight  textaligncenter flex5\" >\n                                    <div className=\"metricvalue textaligncenter  rad4\"> {(this.state.auc).toFixed(2)} </div>\n                                    <div className=\"metricdesc mediumdesc p5\"> AUC </div>\n                                </div>\n                            </div>\n                            <div className=\"mb5 flex\">\n\n                                <div style={{ borderLeftColor: percentToRGB(100 - (this.state.bestMetric.fpr * 100)) }} className=\"metricguage flex5 mr5 p10 greyhighlight  textaligncenter\">\n                                    <div className=\"metricvalue textaligncenter\"> {(this.state.bestMetric.fpr * 100).toFixed(2)}  % </div>\n                                    <div className=\"metricdesc mediumdesc p5\"> False Positive Rate </div>\n                                </div>\n                                <div style={{ borderLeftColor: percentToRGB(100 - (this.state.bestMetric.fnr * 100)) }} className=\"metricguage flex5  p10 greyhighlight  textaligncenter\">\n                                    <div className=\"metricvalue\"> {(this.state.bestMetric.fnr * 100).toFixed(2)} % </div>\n                                    <div className=\"metricdesc displayblock mediumdesc p5\"> False Negative Rate </div>\n                                </div>\n\n                            </div>\n                            <div className=\"flex\">\n                                <div style={{ borderLeftColor: percentToRGB((this.state.bestMetric.tpr * 100)) }} className=\"metricguage flex5 p10 mr5 greyhighlight  textaligncenter\">\n                                    <div className=\"metricvalue\"> {(this.state.bestMetric.tpr * 100).toFixed(2)} % </div>\n                                    <div className=\"metricdesc mr10 mediumdesc p5\"> True Positive Rate </div>\n                                </div>\n                                <div style={{ borderLeftColor: percentToRGB((this.state.bestMetric.tnr * 100)) }} className=\"metricguage flex5 p10 greyhighlight  textaligncenter\">\n                                    <div className=\"metricvalue\"> {(this.state.bestMetric.tnr * 100).toFixed(2)} % </div>\n                                    <div className=\"metricdesc mediumdesc p5\"> True Negative Rate </div>\n                                </div>\n                            </div>\n\n                        </div>}\n\n                </div>\n        )\n\n       \n        // if (this.refs[\"lossbox1\"]) { \n        //     if (this.refs[\"lossbox1\"].offsetWidth > this.chartWidth + 60 || this.refs[\"lossbox1\"].offsetWidth < this.chartWidth - 40) {\n        //         this.hideLoss = true\n        //     }\n        //     // console.log(this.refs[\"lossbox1\"].offsetWidth, this.hideLoss);\n        // }\n        \n        \n       \n        \n        \n\n        return (\n            <div className=\"maintrainbox\">  \n                {/* {this.state.showWarmingUp && <div className=\"\">\n                    <div className=\"flex mt10 mr10 \">\n                        <div className=\"iblock  flexjustifycenter\" ref=\"activeloaderdiv\" >\n                            <div className=\"loadcircle iblock\"></div>\n                                \n                        </div> \n                       \n                        <div className=\"iblock pt3 pl5 h100 \"> Initializing model ...</div> \n                    </div>\n                </div>} */}\n\n                {/* show advanced options pannel */}\n                <div style={{ zIndex: 100 }} onClick={this.toggleIntroDrawer.bind(this)} className=\"unselectable mt10 p10 clickable  flex greymoreinfo\">\n                    <div className=\"iblock flexfull minwidth485\">\n                        <strong>\n                            {!this.state.showIntroduction && <span>&#x25BC;  </span>} {this.state.showIntroduction && <span>&#x25B2;  </span>}\n                        </strong>\n                        Introduction\n                    </div>\n                    <div className=\"iblock   \">\n                        <div className=\"iblock mr5\"> <span className=\"boldtext\"> {} </span></div>\n                        <div className=\"iblock\">\n                            <div className=\"smalldesc\"> Overview of how it works!</div>\n                        </div>\n                    </div>\n\n                </div>\n\n\n                {(this.state.showIntroduction) &&\n                    <div className=\"mynotif h100 lh10 mt10 lightbluehightlight maxh16  mb10\">\n                        <div className=\"boldtext\"> Train an Autoencoder for Anomaly Detection </div>\n                        <div>\n                            <a href=\"https://en.wikipedia.org/wiki/Autoencoder\" target=\"_blank\" rel=\"noopener noreferrer\">\n                                Autoencoders</a> are neural networks which learn to reconstruct input data. We can leverage this property to detect anomalies.\n                                <div className=\"circlenumber iblock textaligncenter\"> 1 </div>  <span className=\"boldtext\"> Initialize . </span> Select model parameters\n                (number of layers, batchsize, learning rate, regularizer etc) and then initialize (compile) the model.\n                        <div className=\"circlenumber iblock textaligncenter\"> 2 </div>  <span className=\"boldtext\"> Train. </span> This trains the autoencoder using normal data \n                        samples from the ECG5000 dataset.  Training the model on a dataset that consists of mainly normal data (an assumption that holds for most anomaly use cases), \n                        the model learns to reconstruct only normal data samples with very little reconstruction error. \n                        To mirror your use case conditions, you can specify the percentage of abnormal samples \n                        to include in the training data set and observe how it affects accuracy.\n                        <div className=\"circlenumber iblock textaligncenter\"> 3 </div>  <span className=\"boldtext\"> Evaluate. </span> \n                        At each training step, visualize the reconstruction error (mse) generated for each sample in the test dataset. Observe that mse is higher\n                        for abnormal samples compared to abnormal samples. We can select a threshold and flag samples with an mse > threshold as anomalies. \n                        Model performance can then be evaluated using metrics such has AUC, TPR, FPR; also observe how these metrics vary with different\n                        choices of threshold.\n         \n                     </div>\n\n                    </div>}\n\n                {/* show advanced options pannel */}\n                <div style={{ zIndex: 100 }} onClick={this.toggleAdvancedDrawer.bind(this)} className=\"unselectable mt10 p10 clickable  flex greymoreinfo\">\n                    <div className=\"iblock flexfull minwidth485\">\n                        <strong>\n                            {!this.state.showAdvanced && <span>&#x25BC;  </span>} {this.state.showAdvanced && <span>&#x25B2;  </span>}\n                        </strong>\n                        Select model configuration and visualization charts.\n                    </div>\n                    <div className=\"iblock   \">\n                        <div className=\"iblock mr5\"> <span className=\"boldtext\"> {} </span></div>\n                        <div className=\"iblock\">\n                            <div className=\"smalldesc\"> \n                                \n                                {this.state.hiddenDim.length} Layer Autoencoder\n                                \n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n                \n\n                {(this.state.showAdvanced) &&\n                    <div className=\" modelconfigdiv p10 \"> \n\n                        <div className=\"flex flexwrap \">\n                            <div className=\"flexwrapitem\">\n                                {trainResetButtons}\n                            </div>\n                            <div className=\"flexwrapitem flexfull \">\n                                {configBar}\n                        </div>\n                       \n                        </div>\n\n                        <div className=\"pl10 pt5 pr10 pb5 greyborder mt10\">\n                            <div className=\"boldtext  iblock mr5\">\n                                <div className=\"iblock \"> Charts </div>\n                                <div className=\"iblock  \">\n                                    <Tooltip\n                                        direction=\"right\"\n                                        triggerText=\"\"\n                                    >\n                                        <div className=\"tooltiptext\">\n                                            Add/Remove charts that visualize the state of the model as training progresses.\n                                            For example, the Training Loss chart shows the \"loss\" or error of the model as training progresses.\n                                        </div>\n\n                                    </Tooltip>\n                                </div>\n\n                            </div>\n                            {showCheckBoxes}\n                        </div>\n\n                    </div>\n                }\n                <div ref=\"glowbar\" className={\"glowbar w0 \"} style={{ width: Math.floor((this.currentSteps / this.state.numSteps) * 100) + \"%\" }}></div>\n\n\n\n                {/* start of top bar */}\n\n\n\n\n                {/* end of top bar */}\n\n\n\n                {/* <div className={\"mb5 \" + (this.state.isTraining ? \" rainbowbar\" : \" displaynone\")}></div> */}\n\n                <div ref=\"chartcontainer\" className=\"flex chartcontainer flexwrap mt10\">\n                    <div ref=\"composemodelbox\" action=\"composer\"  className={\"flexwrapitem \" + (this.state.showModelComposer ? \" flex40\":\"\")}> {modelComposerBlock} </div>\n                    <div ref=\"modelevalbox\" action=\"metrics\" className={\"flexwrapitem \" + (this.state.showModelEvaluationMetrics ? \" flexfull\":\"\")}> {modelMetricsBlock} </div>\n                    <div ref=\"lossbox1\" action=\"loss\"  className=\"  flexwrapitem \"> { lossChartBlock} </div>\n                    <div action=\"mse\" className=\"flexwrapitem  \"> {mseHistogramBlock} </div>\n                    \n                    {(this.state.rocData.length > 0 && this.state.encodedData.length >0) &&\n                        <div className=\"   iblock flex20\">\n                            <div action=\"roc\" className=\"flexwrapitem  iblock \"> {rocChartBlock} </div>\n                            <div action=\"bottleneck\"  className=\"flexwrapitem   iblock\"> {bottleneckScatterPlotBlock} </div>\n\n                         </div>\n                    }\n                </div>\n                \n                <div> \n                   {/* {this.hideLoss && <div ref=\"lossbox1d\" action=\"loss\"  className=\"flexwrapitem iblock\"> {lossChartBlock} </div>} */}\n                   \n                    \n                </div>\n\n               \n                \n                {\n                    true &&\n                    <div> \n\n                    </div>\n                }\n                <br />\n                <br />\n                <br />\n\n            </div >\n        );\n    }\n}\n\nexport default Train;","import React, { Component } from \"react\";\n// import { Reset16, PlayFilledAlt16 } from '@carbon/icons-react';\nimport DrawSignal from \"./../drawsignal/DrawSignal\"\n// import { computeAccuracyGivenThreshold } from \"./../helperfunctions/HelperFunctions\"\n// import * as _ from \"lodash\"\nimport \"./faq.css\"\n\nclass Faq extends Component {\n\n    constructor(props) {\n        super(props)\n\n\n        this.state = {\n            metricData: []\n        }\n    }\n\n\n\n    componentDidMount() {\n\n\n\n\n    }\n    render() {\n\n\n\n\n\n        return (\n            <div>\n\n\n                <div>FAQ</div>\n                <DrawSignal\n                    width={600}\n                    height={300}\n\n                ></DrawSignal>\n\n                <br />\n                <br />\n                <div> FAQ </div>\n\n                <div> Training Parameters </div>\n                <div> All trainining parameters are selected as specified.\n                    For regularization, kernel regularization (reduces the size of the weights) is implemented (vs activity regularization)\n                    This is applied to all layers in the model.\n                    The regularization rate is set as same as the learning rate.\n\n                </div>\n            </div >\n        );\n    }\n}\n\nexport default Faq;","import React, { Component } from \"react\";\nimport {\n    Route,\n    HashRouter,\n\n} from \"react-router-dom\";\n\n// import { InlineNotification } from 'carbon-components-react';\n\n\nimport \"./template.css\"\n\n// import Sidebar from \"./Sidebar\";\nimport AppHeader from \"./header/AppHeader\";\nimport Footer from \"./footer/Footer\";\nimport Viz from \"./viz/Viz\";\nimport Train from \"./train/Train\"\nimport ComposeModel from \"./composemodel/ComposeModel\"\nimport Faq from \"./faq/Faq\"\n\nimport { createBrowserHistory } from 'history';\n\n\n// ReactGA.initialize(\"UA-131578973-1\")\nconst history = createBrowserHistory({\n    basename: \"\", // The base URL of the app (see below)\n    forceRefresh: false, // Set true to force full page refreshes\n    keyLength: 6, // The length of location.key\n    // A function to use to confirm navigation with the user (see below)\n    getUserConfirmation: (message, callback) => callback(window.confirm(message))\n});\n// history.listen(location => {\n//     ReactGA.set({ page: location.hash })\n//     ReactGA.pageview(location.hash)\n//     // console.log(location.pathname, location.hash)\n// })\n\nlet linkHolder = {}\n\nfunction updateLh(location) {\n\n    if (location.hash in linkHolder) {\n        linkHolder[location.hash] = linkHolder[location.hash] + 1\n    } else {\n        linkHolder[location.hash] = 0\n    }\n\n}\n\nhistory.listen(location => {\n    updateLh(location)\n});\n\n\nclass Main extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n        }\n\n        // console.log(window.location)\n        updateLh(window.location)\n    }\n\n    componentDidMount() {\n        // ReactGA.pageview(window.location.hash)\n        // document.title = \"Image Analysis Explorer | Explore Convolutional Neural Nets for Imagee Analysis\";\n    }\n\n\n\n\n\n\n    render() {\n        const Composer = (props) => {\n            return (\n                <ComposeModel\n                    hiddenDims={[6, 5, 4, 3]}\n                    latentDim={[4]}\n                    isTraining={false}\n\n                />\n            );\n        }\n\n        return (\n            <HashRouter>\n                <AppHeader></AppHeader>\n\n                <div className=\"container-fluid p10\">\n                    <Route exact path=\"/\" component={Viz} />\n                    <Route exact path=\"/train\" component={Train} />\n                    <Route exact path=\"/compose\" component={Composer} />\n                    <Route exact path=\"/faq\" component={Faq} />\n\n                    <div id=\"notificatiionbox\" className=\"notificationtopright p5  \">\n\n                    </div>\n                </div>\n                <div id=\"footer\"> <Footer /> </div>\n            </HashRouter>\n\n        );\n    }\n}\n\nexport default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Main from \"./components/Main\";\nimport * as serviceWorker from './serviceWorker';\n\nimport \"./components/template.scss\"\n// import 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n    <Main />,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.register()"],"sourceRoot":""}