{"version":3,"sources":["components/header/AppHeader.jsx","components/footer/Footer.jsx","components/linechart/LineChart.jsx","components/linechart/SmallLineChart.jsx","components/viz/Viz.jsx","components/helperfunctions/HelperFunctions.jsx","components/rocchart/ROCChart.jsx","components/histogram/HistogramChart.jsx","components/scatterplot/ScatterPlot.jsx","components/losschart/LossChart.jsx","components/composemodel/ComposeModel.jsx","components/train/models/ae.jsx","components/train/Train.jsx","components/faq/Faq.jsx","components/Main.jsx","serviceWorker.js","index.js"],"names":["AppHeader","props","appName","appDescription","aria-label","this","prefix","className","src","alt","exact","to","Component","Footer","href","target","LineChart","state","chart","data","minChartWidth","chartWidth","minChartHeight","chartHeight","drawGraph","prevProps","prevState","index","setState","updateGraph","chartMargin","top","right","bottom","left","n","length","xScale","d3","domain","range","yScale","xAxis","yAxis","tickSize","self","setupScalesAxes","svg","transition","select","duration","attr","color","line","call","g","remove","selectAll","width","height","margin","x","d","i","y","dataset","append","datum","SmallLineChart","miniChartWidth","miniChartHeight","canvas","refs","context","getContext","translate","scale","strokeStyle","prev_stat","move_left_by","stat","the_stat","beginPath","moveTo","lineTo","lineWidth","lineCap","stroke","ref","id","Viz","testData","require","apptitle","trainData","selectedData","loadData","chartColorMap","1","colornorm","name","2","3","4","5","maxSmallChart","e","getAttribute","colorAttrr","console","log","labelcolordiv","style","backgroundColor","predictioncolordiv","dataLegend","Object","entries","map","key","background","dataPoints","slice","onClick","clickDataPoint","bind","indexvalue","targetval","computeAccuracyGivenThreshold","threshold","predVal","truePositive","trueNegative","falsePositive","falseNegative","forEach","each","mse","label","acc","tp","tn","fp","fn","tpr","fpr","fnr","tnr","LeaderLine","window","animOptions","timing","ROCChart","numTicks","dotRadius","epoch","animationDuration","rocLine","rocArea","y0","y1","drawLines","auc","toFixed","HistogramChart","nice","bins","value","thresholds","ticks","binNorm","binsAnorm","join","x0","Math","max","x1","thresholdVal","getThreshold","text","meanNormal","meanAbnormal","midPoint","min","ScatterPlot","LossChart","innerHTML","loss","val_loss","trainLine","valLine","curve","ComposeModel","hiddenDims","latentDim","maxLayers","minLayers","maxUnits","minUnits","defaultLayerDim","isTraining","latentLineWidth","lineHolder","rightTopAnchor","rightBottomAnchor","leftTopAnchor","leftBottomAnchor","rightMiddle","leftMiddle","blueColor","greyColor","drawAllLines","network","attributeName","attributeValue","document","querySelector","layer","startId","endId","startEl","getElement","endEl","params","pathType","drawLeaderLine","latentDiv","getElementById","addLayerLines","addEncDecLines","lineId","toRemove","Map","set","position","newHolder","get","push","startElement","endElement","startAnchor","endAnchor","lineColor","pointAnchor","startPlug","endPlug","startPlugColor","path","size","hide","dash","gap","show","opt","setOptions","redrawLine","updateModelDims","removeLayerLines","animateLines","removeAllLines","varGroup","newDims","decoderDims","dimType","currentDims","getDims","setStateVal","pop","currentUnit","latentLayers","layerindex","eachLayer","_","unitindex","layergroup","buttonaction","updateUnits","encLayers","nodeunit","layerdiv","decLayers","updateLayerClick","tf","Train","stepOptions","type","batchSizeOptions","learningRateOptions","trainingDataOptions","testDataOptions","selectedTrainDataOption","selectedTestDataOption","trainMetricHolder","CumulativeSteps","trainDataShape","testDataShape","mseData","rocData","createdModel","encodedData","currentEpoch","numFeatures","hiddenLayers","hiddenDim","learningRate","adamBeta1","outputActivation","batchSize","numSteps","numEpochs","trainMetrics","trainDataSize","testDataSize","modelStale","bestMetric","minThreshold","maxThreshold","showRocChart","showLossChart","showBottleneckScatterPlot","showMseHistogram","validateOnStep","currentSteps","xsTrain","xsTest","yTest","trainDataPath","testDataPath","warmupSampleSize","generateDataTensors","createModel","computeAccuracyMetrics","dispose","optimizer","disposeModelTensors","adam","modelParams","input","shape","encoderHidden","layers","dense","units","activation","apply","z_","encoder","model","inputs","outputs","latentInput","decoderHidden","j","decoderOutput","output","ae","compile","buildModel","getPredictions","startTime","Date","fit","epochs","verbose","validationData","then","res","elapsedTime","metricRow","history","traintime","trainModel","savedModel","loadTestData","uniqueMse","sortBy","reverse","rocMetricHolder","rocSum","prevMetric","metric","preds","predict","square","mean","mseDataHolder","array","element","getLayer","getOutputAt","encoderPredictions","encPredHolder","trainEcg","row","val","item","selectedItem","threshVal","trainButtonClick","fill","resetModelButtonClick","Loading","active","small","withOverlay","Dropdown","items","initialSelectedItem","itemToString","onChange","updateModelParam","floor","Slider","step","minLabel","maxLabel","stepMuliplier","disabled","labelText","hideTextInput","updateThreshold","Faq","metricData","metricHolder","JSON","stringify","createBrowserHistory","basename","forceRefresh","keyLength","getUserConfirmation","message","callback","confirm","linkHolder","updateLh","location","hash","listen","Main","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7ea40c87.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n    Header,\n    HeaderName,\n    HeaderNavigation,\n    //   HeaderMenuItem,\n    HeaderGlobalBar,\n    HeaderGlobalAction,\n    SkipToContent,\n} from 'carbon-components-react/lib/components/UIShell';\nimport {\n    NavLink\n} from \"react-router-dom\";\n\nimport \"./header.css\"\n// import Notification20 from '@carbon/icons-react/lib/notification/20';\n// import UserAvatar20 from '@carbon/icons-react/lib/user--avatar/20';\nimport AppSwitcher20 from '@carbon/icons-react/lib/app-switcher/20';\n\nclass AppHeader extends Component {\n    constructor(props) {\n        super(props)\n\n        this.appName = \"Anomagram\"\n        this.appDescription = \"An interactive visualization for exploring deep learning models applied to the task of anomaly detectiion.\"\n\n\n    }\n    render() {\n        return (\n            <div>\n                <Header aria-label={this.appDescription}>\n                    <SkipToContent />\n                    <HeaderName prefix=\"\">\n                        {/* <div className=\"decornone \"><NavLink exact to=\"/\"> </NavLink></div> */}\n                        <img className=\"headericon\" src=\"images/icon.png\" alt=\"\" />\n                        {this.appName}\n                    </HeaderName>\n                    <HeaderNavigation aria-label={this.appDescription}>\n                        {/* <HeaderMenuItem element={Link} to=\"/\" className=\"navbarlink \"> Datasets </HeaderMenuItem> */}\n                        {/* <HeaderMenuItem  element={Link} to=\"/models\" className=\"navbarlink \"> Models</HeaderMenuItem> */}\n                        <div className=\"navbarlinks  \"><NavLink exact to=\"/\"> Introduction </NavLink></div>\n                        <div className=\"navbarlinks \"><NavLink to=\"/train\"> Train a Model </NavLink></div>\n                        <div className=\"navbarlinks \"><NavLink to=\"/faq\"> FAQ </NavLink></div>\n                        {/* <div className=\"navbarlinks \"><NavLink to=\"/algebra\"> Image Algebra </NavLink></div> */}\n                        {/* <div className=\"navbarlinks \"><NavLink to=\"/energy\"> Energy Explorer </NavLink></div> */}\n                    </HeaderNavigation>\n                    <HeaderGlobalBar>\n                        {/* <HeaderGlobalAction aria-label=\"Notifications\">\n                    <Notification20 />\n                </HeaderGlobalAction>\n                */}\n                        {/* <HeaderGlobalAction aria-label=\"User Avatar\">\n                    <UserAvatar20 />\n                </HeaderGlobalAction> */}\n                        <HeaderGlobalAction aria-label=\"App Switcher\">\n                            <AppSwitcher20 />\n                        </HeaderGlobalAction>\n                    </HeaderGlobalBar>\n                </Header>\n                <div> <br /> <br />  <br />  <br /> </div>\n            </div>\n\n        );\n    }\n}\n\nexport default AppHeader;\n","import React, { Component } from \"react\";\nimport \"./footer.css\"\n\nclass Footer extends Component {\n    render() {\n        return (\n            <div>\n                Made with <span className=\"redcolor\">&#9829;</span> by <a href=\"https://twitter.com/vykthur\" target=\"blank\">Victor Dibia</a>.\n            </div>\n        );\n    }\n}\n\nexport default Footer;","import React, { Component } from 'react'\n// import { loadJSONData, abbreviateString } from \"../helperfunctions/HelperFunctions\"\nimport \"./linechart.css\"\nimport * as d3 from \"d3\"\n\n\nclass LineChart extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            chart: this.props.data\n        }\n\n\n\n        this.minChartWidth = this.props.data.chartWidth\n        this.minChartHeight = this.props.data.chartHeight\n\n\n\n\n    }\n\n    componentDidMount() {\n        // console.log(\"Line component mounted\")\n        this.drawGraph()\n\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        // console.log(this.props.data.chartdata.index, prevProps.data.chartdata.index);\n\n        if (this.props.data.data.index !== prevProps.data.data.index) {\n            this.setState({ chart: this.props.data.chart })\n            // console.log(\"stuff hass changed\", this.props.data.data);\n            this.updateGraph(this.props.data)\n\n        }\n\n    }\n\n    setupScalesAxes(data) {\n        this.chartMargin = { top: 10, right: 5, bottom: 40, left: 20 }\n        this.chartWidth = this.minChartWidth - this.chartMargin.left - this.chartMargin.right\n        this.chartHeight = this.minChartHeight - this.chartMargin.top - this.chartMargin.bottom;\n\n        var n = data.length;\n\n        this.xScale = d3.scaleLinear()\n            .domain([0, n - 1]) // input\n            .range([0, this.chartWidth]); // output\n\n\n        this.yScale = d3.scaleLinear()\n            .domain([d3.min(data), d3.max(data)]) // input \n            .range([this.chartHeight, 0]); // output \n\n        this.xAxis = d3.axisBottom(this.xScale)\n        this.yAxis = d3.axisRight(this.yScale)\n            .tickSize(this.minChartWidth)\n\n    }\n\n    updateGraph(chart) {\n        let self = this\n        let data = chart.data.data\n        // console.log(chart.color)\n        this.setupScalesAxes(data)\n        // Select the section we want to apply our changes to\n        var svg = d3.select(\"div.linechartbox\").transition();\n\n\n        // Make the changes\n        svg.select(\".line\")   // change the line\n            .duration(750)\n            .attr(\"stroke\", chart.color)\n            .attr(\"d\", this.line(data));\n        function customYAxis(g) {\n            g.call(self.yAxis);\n            svg.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"stroke\", \"rgba(172, 172, 172, 0.74)\").attr(\"stroke-dasharray\", \"2,2\");\n            g.selectAll(\".tick text\").attr(\"x\", -20).attr(\"y\", -.01)\n        }\n        svg.select(\".y.axis\")\n            .call(customYAxis).duration(5);\n    }\n\n\n    drawGraph() {\n        let self = this\n        this.setupScalesAxes(this.state.chart.data.data)\n        let width = this.chartWidth, height = this.chartHeight, margin = this.chartMargin\n\n\n        // 7. d3's line generator\n        this.line = d3.line()\n            .x(function (d, i) { return self.xScale(i); }) // set the x values for the line generator\n            .y(function (d) { return self.yScale(d); }) // set the y values for the line generator \n        // .curve(d3.curveMonotoneX) // apply smoothing to the line\n\n        // 8. An array of objects of length N. Each object has key -> value pair, the key being \"y\" and the value is a random number\n        var dataset = this.state.chart.data.data\n\n\n        // d3.range(n).map(function (d) { return { \"y\": d3.randomUniform(1)() } })\n\n        function customYAxis(g) {\n            g.call(self.yAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"stroke\", \"rgba(172, 172, 172, 0.74)\").attr(\"stroke-dasharray\", \"2,2\");\n            g.selectAll(\".tick text\").attr(\"x\", -20).attr(\"y\", -.01)\n        }\n\n        function customXAxis(g) {\n            g.call(self.xAxis);\n            g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"x\", 100)\n            g.selectAll(\".tick text\").attr(\"y\", 15)\n        }\n\n        // 1. Add the SVG to the page and employ #2\n        var svg = d3.select(\"div.linechartbox\").append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n        // 3. Call the x axis in a group tag\n        svg.append(\"g\")\n            .attr(\"class\", \"x axis\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(customXAxis); // Create an axis component with d3.axisBottom\n\n        // 4. Call the y axis in a group tag\n        svg.append(\"g\")\n            .attr(\"class\", \"y axis\")\n            .call(customYAxis); // Create an axis component with d3.axisLeft\n\n        // 9. Append the path, bind the data, and call the line generator \n        svg.append(\"path\")\n            .datum(dataset) // 10. Binds data to the line \n            .attr(\"class\", \"line\") // Assign a class for styling \n            .attr(\"stroke\", this.state.chart.color)\n            .attr(\"d\", this.line); // 11. Calls the line generator \n\n        // // 12. Appends a circle for each datapoint \n        // svg.selectAll(\".dot\")\n        //     .data(dataset)\n        //     .enter().append(\"circle\") // Uses the enter().append() method\n        //     .attr(\"class\", \"dot\") // Assign a class for styling\n        //     .attr(\"cx\", function (d, i) { return xScale(i) })\n        //     .attr(\"cy\", function (d) { return yScale(d) })\n        //     .attr(\"r\", 5)\n        //     .on(\"mouseover\", function (a, b, c) {\n        //         console.log(a)\n        //         // this.attr('class', 'focus')\n        //     })\n    }\n\n\n    render() {\n\n\n\n        return (\n            <div>\n\n                <div className=\"linechartbox \">\n\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default LineChart","import React, { Component } from 'react'\n// import { loadJSONData, abbreviateString } from \"../helperfunctions/HelperFunctions\"\nimport \"./linechart.css\"\nimport * as d3 from \"d3\"\n\nclass SmallLineChart extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            chart: this.props.data\n        }\n\n        this.miniChartWidth = this.props.data.chartWidth\n        this.miniChartHeight = this.props.data.chartHeight\n\n    }\n\n    componentDidMount() {\n        // console.log(\"Line component mounted\")\n        let canvas = this.refs.canvas\n        canvas.width = this.miniChartWidth\n        canvas.height = this.miniChartHeight;\n        this.drawGraph()\n\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n\n\n    }\n\n\n\n    drawGraph() {\n        this.chartMargin = { top: 0, right: 0, bottom: 0, left: 0 }\n        this.chartWidth = this.miniChartWidth - this.chartMargin.left - this.chartMargin.right\n        this.chartHeight = this.miniChartHeight - this.chartMargin.top - this.chartMargin.bottom;\n\n\n        let data = this.state.chart.data.data\n        var n = data.length;\n\n        this.xScale = d3.scaleLinear()\n            .domain([0, n - 1]) // input\n            .range([0, this.chartWidth]); // output\n\n\n        this.yScale = d3.scaleLinear()\n            .domain([d3.min(data), d3.max(data)]) // input \n            .range([0, this.chartHeight]); // output\n\n        // console.log(data);\n\n\n        let canvas = this.refs.canvas,\n            context = canvas.getContext('2d')\n\n\n\n        context.translate(0, this.chartHeight);\n        context.scale(1, -1);\n\n        context.strokeStyle = this.state.chart.color;\n        // console.log(this.state.chart.color);\n\n\n        // context.fillStyle = '#f6f6f6';\n        // context.fillRect(0, 0, this.chartWidth, this.chartHeight);\n\n        var left = 0,\n            prev_stat = data[0],\n            move_left_by = this.chartWidth / data.length;\n\n        for (let stat in data) {\n            // console.log(data[stat], this.yScale(data[stat]));\n\n            let the_stat = this.yScale(data[stat]);\n\n            context.beginPath();\n            context.moveTo(left, prev_stat);\n            context.lineTo(left + move_left_by, the_stat);\n            context.lineWidth = 1.6;\n            context.lineCap = 'round';\n            /*\n                if(the_stat < stats[stat-1]) {\n                    context.strokeStyle = '#c0392b';\n                } else {\n                    context.strokeStyle = '#3b3b3b';\n                }\n                */\n            context.stroke();\n\n            prev_stat = the_stat;\n            left += move_left_by;\n\n        }\n    }\n\n\n    render() {\n\n\n\n        return (\n            <div className=\"iblock mt2\">\n                <canvas ref=\"canvas\" id=\"canvas\"></canvas>\n            </div>\n        )\n    }\n}\n\nexport default SmallLineChart","import React, { Component } from 'react'\n// import { InlineLoading, Button, Search, Modal, Tooltip } from 'carbon-components-react';\n// import { loadJSONData } from \"../helperfunctions/HelperFunctions\"\nimport \"./viz.css\"\nimport LineChart from \"../linechart/LineChart\"\nimport SmallLineChart from \"../linechart/SmallLineChart\"\n// import \"../../data\" \n\n\nclass Viz extends Component {\n    constructor(props) {\n        super(props)\n\n\n        this.testData = require(\"../../data/ecg/test.json\")\n\n        this.state = {\n            apptitle: \"Anomagram\",\n            testData: this.testData,\n            trainData: [],\n            selectedData: 0\n        }\n\n\n        // this.trainData = require(\"../../data/ecg/train.json\")\n        // console.log(this.testData.length, this.trainData.length)\n\n        this.loadData()\n\n        this.chartColorMap = {\n            1: { color: \"#0062ff\", colornorm: \"#0062ff\", name: \"Normal\" },\n            2: { color: \"#ffa32c\", colornorm: \"grey\", name: \"R-on-T Premature Ventricular Contraction\" },\n            3: { color: \"violet\", colornorm: \"grey\", name: \"Supraventricular Premature or Ectopic Beat \" },\n            4: { color: \"orange\", colornorm: \"grey\", name: \"Premature Ventricular Contraction\" },\n            5: { color: \"red\", colornorm: \"grey\", name: \"Unclassifiable Beat\" },\n        }\n\n        this.maxSmallChart = 100\n\n    }\n\n    loadData() {\n        // let testECGDataPath = process.env.PUBLIC_URL + \"/data/ecg/test_small.json\"\n        // let trainECGDataPath = process.env.PUBLIC_URL + \"/data/ecg/train_small.json\"\n        // loadJSONData(testECGDataPath).then(data => {\n        //     this.setState({ testData: data })\n        //     // console.log(\"test data loaded\", data.length)\n        // })\n\n        // loadJSONData(trainECGDataPath).then(data => {\n        //     this.setState({ trainData: data })\n        // })\n\n    }\n    componentDidUpdate(prevProps, prevState) {\n\n\n    }\n\n\n    componentDidMount() {\n        this.apptitle = \"Amadioha\"\n    }\n\n    clickDataPoint(e) {\n        this.setState({ selectedData: e.target.getAttribute(\"indexvalue\") })\n\n        let colorAttrr = e.target.getAttribute(\"targetval\") + \"\" === \"1\" ? \"green\" : \"red\"\n        console.log(e.target.getAttribute(\"targetval\"), colorAttrr)\n        this.refs.labelcolordiv.style.backgroundColor = colorAttrr\n        this.refs.predictioncolordiv.style.backgroundColor = colorAttrr\n    }\n\n    render() {\n\n\n        let dataLegend = Object.entries(this.chartColorMap).map((data, index) => {\n            let color = data[1].color\n            let name = data[1].name\n            return (\n                <div className=\"iblock mr10 mb5\" key={\"legendrow\" + index}>\n                    <div style={{ background: color }} className=\"indicatorcircle iblock mr5\"></div>\n                    <div className=\"iblock legendtext pl4 mediumdesc\"> {name}</div>\n                    <div className=\"iblock\"></div>\n\n                </div>\n            )\n        });\n\n        let dataPoints = this.state.testData.slice(0, this.maxSmallChart).map((data, index) => {\n            return (\n                <div onClick={this.clickDataPoint.bind(this)} key={\"testrow\" + index} className={\"mb5 p5 clickable ecgdatapoint rad3 iblock mr5\" + (this.state.selectedData + \"\" === (index + \"\") ? \" active\" : \"\")} indexvalue={index} targetval={data.target} >\n                    <div indexvalue={index} className=\"boldtext  unclickable iblock \">\n\n                        <div className=\"positionrelative\">\n                            <div className=\"p3 indicatoroutrcircle  positionabsolute bottomright\">\n                                <div style={{ background: this.chartColorMap[this.state.testData[index].target].color }} className=\"indicatorcircle \"></div>\n                            </div>\n                            <SmallLineChart\n                                data={{\n                                    data: this.state.testData[index],\n                                    index: index,\n                                    color: this.chartColorMap[this.state.testData[index].target].colornorm,\n                                    chartWidth: 72,\n                                    chartHeight: 30\n                                }}\n                            > </SmallLineChart>\n                        </div>\n\n                    </div>\n\n                </div>\n            )\n        });\n\n        return (\n            <div>\n\n\n\n\n                <div className=\"bold mt10 sectiontitle mb10\">\n                    Anomaly Detection with Deep Learning in the Browser!\n\n                </div>\n\n                <div className=\"mynotif h100 lh10  lightbluehightlight maxh16  mb10\">\n                    {this.state.apptitle} is an interactive visualization tool for exploring\n                    deep learning models applied to the task of anomaly detection (on non-time series data).\n\n                </div>\n\n\n\n\n                <div className=\"bold mt10 sectiontitle mb10\">\n                    {/* ECG Dataset */}\n                </div>\n\n\n\n                <div className=\"flex\">\n                    <div className=\"flexfull p10  \">\n                        <div className=\"mb10 boldtext\">\n                            ECG {this.state.testData.length}\n                        </div>\n                        <div className=\"mb5\">\n                            {dataLegend}\n                        </div>\n                        <div className=\"ecgdatabox mb10\">\n                            {dataPoints}\n                        </div>\n                    </div>\n                    {/* <div className=\"flex2 p10 \">\n                        <div className=\"mb10 boldtext\"> Model </div>\n                    </div> */}\n                    <div className=\" p10 modeloutputbox rad5 \">\n                        <div className=\"mb10 boldtext\"> Model Output\n\n                        </div>\n                        <div>\n\n                            {this.state.testData.length > 0 &&\n                                <div>\n                                    <div className=\"flex mediumdesc mb5 displaynone\">\n                                        <div className=\"mr10 boldtext\">\n                                            Label\n                                        </div>\n                                        <div ref=\"labelcolordiv\" className=\"flexfull colorbox greenbox\">\n\n                                        </div>\n                                        {/* <span className=\"boldtext\"> </span>: {this.chartColorMap[this.state.testData[this.state.selectedData].target].name} */}\n                                    </div>\n                                    <div className=\"flex mediumdesc mb5\">\n                                        <div className=\"mr10 boldtext\">\n                                            {this.state.testData[this.state.selectedData].target + \"\" === \"1\" ? \"NORMAL\" : \"ABNORMAL\"}\n                                        </div>\n                                        <div ref=\"predictioncolordiv\" className=\"flexfull colorbox redbox\">\n\n                                        </div>\n                                        {/* <span className=\"boldtext\"> </span>: {this.chartColorMap[this.state.testData[this.state.selectedData].target].name} */}\n                                    </div>\n\n                                    <div className=\"iblock\">\n                                        {/* {this.state.testData[this.state.selectedData].index} */}\n                                        <LineChart\n                                            data={{\n                                                data: this.state.testData[this.state.selectedData],\n                                                index: this.state.testData[this.state.selectedData].index,\n                                                color: this.chartColorMap[this.state.testData[this.state.selectedData].target].colornorm,\n                                                chartWidth: 390,\n                                                chartHeight: 370\n                                            }}\n\n                                        > </LineChart>\n                                    </div>\n\n                                </div>\n\n                            }\n                            {/* {this.state.testData[0].index} */}\n                        </div>\n                    </div>\n                </div>\n\n\n                <div>\n                    {/* A VAE (an extension of an AE) can allow us generate sampled data without */}\n                </div>\n\n\n\n\n\n\n            </div>\n        )\n    }\n}\n\nexport default Viz","// import { ToastNotification } from \"carbon-components-react\"\n\nexport function showToast(type, message, duration = 4000) {\n    let notifbox = document.getElementById(\"notificatiionbox\")\n    let notif = document.createElement('div');\n    notif.className = \"notificationinner\"\n    notif.innerHTML = \"\" + message\n    notifbox.append(notif)\n    notif.style.opacity = 1\n    // console.log(notifbox);\n\n    setTimeout(() => {\n        // notif.remove()\n        notif.style.opacity = 0\n        setTimeout(() => {\n            notif.remove()\n        }, 1500);\n    }, duration);\n\n}\n\nexport function computeAccuracyGivenThreshold(data, threshold) {\n\n    let predVal = 0\n    let truePositive = 0\n    let trueNegative = 0\n    let falsePositive = 0\n    let falseNegative = 0\n\n    data.forEach(each => {\n        predVal = each.mse > threshold ? 1 : 0\n        if ((each.label === 1) && (predVal === 1)) {\n            truePositive++\n        }\n        if ((each.label === 0) && (predVal === 0)) {\n            trueNegative++\n        }\n\n        if ((each.label === 0) && (predVal === 1)) {\n            falsePositive++\n        }\n\n        if ((each.label === 1) && (predVal === 0)) {\n            falseNegative++\n        }\n    });\n\n    let metricRow = {\n        acc: (truePositive + trueNegative) / data.length,\n        threshold: threshold,\n        tp: truePositive,\n        tn: trueNegative,\n        fp: falsePositive,\n        fn: falseNegative,\n        tpr: truePositive / (truePositive + falseNegative),\n        fpr: falsePositive / (trueNegative + falsePositive),\n        fnr: falseNegative / (truePositive + falseNegative),\n        tnr: trueNegative / (trueNegative + falsePositive),\n\n    }\n\n    return metricRow\n\n}\n\n\n\nexport function abbreviateString(value, maxLength) {\n    if (value.length <= maxLength) {\n        return value\n    } else {\n        let retval = value.substring(0, maxLength) + \" ..\"\n        return retval\n    }\n}\n\nexport function boundWidth(widthVal) {\n    if (widthVal < 0) {\n        return 0;\n    } else if (widthVal > 1) {\n        return 1;\n    } else {\n        return widthVal;\n    }\n}\n\nfunction intlFormat(num) {\n    return new Intl.NumberFormat().format(Math.round(num * 10) / 10);\n}\nexport function makeFriendly(num) {\n    if (num < 1 && num > 0) {\n        return num\n    }\n    if (Math.abs(num) >= 1000000)\n        return intlFormat(num / 1000000) + 'M';\n    if (Math.abs(num) >= 1000)\n        return intlFormat(num / 1000) + 'k';\n    return intlFormat(num);\n}\n\nexport function loadJSONData(url) {\n    return fetch(url)\n        .then(\n            function (response) {\n                if (response.status !== 200) {\n                    console.log('Looks like there was a problem. Status Code: ' + response.status);\n                    return;\n                }\n                // Examine the text in the response\n                //    response.text().then(function(data){\n                //        console.log(data)\n                //    })\n                return response.json().then(function (data) {\n                    return data\n                });\n            }\n        )\n        .catch(function (err) {\n            console.log('Fetch Error :-S', err);\n        });\n}\n\nexport function ColorArray() {\n    let colorArray = [\n        \"#1f78b4\",\n        \"#b2df8a\",\n        \"#33a02c\",\n        \"#fb9a99\",\n        \"#e31a1c\",\n        \"#fdbf6f\",\n        \"#ff7f00\",\n        \"#6a3d9a\",\n        \"#cab2d6\",\n        \"#ffff99\",\n        \"#8fff4f\"\n    ]\n    return colorArray\n}\n\n\nexport function ColorArrayRGB() {\n    let colorArray = [\n        [141, 211, 199],\n        [255, 255, 179],\n        [190, 186, 218],\n        [251, 128, 114],\n        [128, 177, 211],\n        [253, 180, 98],\n        [179, 222, 105],\n        [252, 205, 229],\n        [188, 128, 189],\n        [204, 235, 197],\n    ]\n    return colorArray\n}\n\nexport function checkInView(container, element, partial, containerOffset, elementOffset) {\n\n    if (container) {\n        //Get container properties\n        let cTop = container.scrollTop;\n        let cBottom = cTop + container.clientHeight + containerOffset;\n\n        //Get element properties\n        let eTop = element.offsetTop + elementOffset;\n        let eBottom = eTop + element.clientHeight;\n\n        //Check if in view    \n        let isTotal = (eTop >= cTop && eBottom <= cBottom);\n        let isPartial = partial && (\n            (eTop < cTop && eBottom > cTop) ||\n            (eBottom > cBottom && eTop < cBottom)\n        );\n\n        //Return outcome\n        // console.log(\"cT:\", cTop, \"conHei\", container.clientHeight, \" offset\", containerOffset, elementOffset, container.offsetTop)\n        // console.log(element.offsetTop, \"eT:\", eTop, \"cT:\", cTop, \"eB:\", eBottom, \"cB:\", cBottom, isTotal || isPartial)\n        return (isTotal || isPartial);\n    } else {\n        return false\n    }\n\n\n}\n\nexport const LeaderLine = window.LeaderLine;\nexport const animOptions = { duration: 800, timing: 'ease' }\nexport const greyColor = \"rgba(189, 195, 199, 0.5)\"\nexport const blueColor = 'rgba(0,98,255, 1)'\n","import React, { Component } from \"react\";\nimport \"./rocchart.css\"\nimport * as d3 from \"d3\"\n\n\nclass ROCChart extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            chart: this.props.data\n        }\n        this.minChartWidth = this.props.data.chartWidth\n        this.minChartHeight = this.props.data.chartHeight\n\n        this.numTicks = 40\n        this.dotRadius = 3.5\n    }\n\n    componentDidMount() {\n        this.drawGraph(this.props.data.data)\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n\n\n        // if ((prevProps.data.isTraining !== this.props.data.isTraining)) {\n        //     console.log(\"props updated\");\n        //     this.updateGraph(this.props.data.data)\n        // }\n\n        if ((prevProps.data.epoch !== this.props.data.epoch) || this.props.data.epoch + \"\" === \"0\") {\n            this.updateGraph(this.props.data.data)\n        }\n    }\n\n    updateGraph(data) {\n        let self = this\n\n\n        this.setupScalesAxes(data)\n        let svg = d3.select(\"div.ROCChart\").transition();\n\n        svg.select(\".rocline\")\n            .duration(self.animationDuration)\n            .attr(\"d\", this.rocLine(data)); // 11. Calls the line generator \n\n        svg.select(\".rocarea\")\n            .duration(self.animationDuration)\n            .attr(\"d\", this.rocArea(data)); // 11. Calls the line generator \n\n        // svg.select(\".lossvalcolor\")\n        //     .duration(self.animationDuration)\n        //     .attr(\"d\", this.valLine); // 11. Calls the line generator  \n\n        function customYAxis(g) {\n            g.call(self.yAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"stroke\", \"rgba(172, 172, 172, 0.74)\").attr(\"stroke-dasharray\", \"2,2\");\n            g.selectAll(\".tick text\").attr(\"x\", -30).attr(\"y\", -.01)\n        }\n\n        function customXAxis(g) {\n            g.call(self.xAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"x\", 100)\n            g.selectAll(\".tick text\").attr(\"y\", 15)\n        }\n\n        svg.select(\".y.axis\")\n            .call(customYAxis);\n\n        svg.select(\".x.axis\")\n            .call(customXAxis);\n\n    }\n    setupScalesAxes(data) {\n        // console.log(data);\n\n        // let self = this \n        this.chartMargin = { top: 10, right: 10, bottom: 40, left: 30 }\n        this.chartWidth = this.minChartWidth - this.chartMargin.left - this.chartMargin.right\n        this.chartHeight = this.minChartHeight - this.chartMargin.top - this.chartMargin.bottom;\n\n\n        // this.xScale = d3.scaleLinear()\n        //     .domain([d3.min(data, function (d) { return d.fpr }),\n        //     d3.max(data, function (d) { return d.fpr })]) // input \n        //     .range([0, this.chartWidth]); // output\n        this.xScale = d3.scaleLinear()\n            .domain([0, 1]) // input \n            .range([0, this.chartWidth]); // output\n\n\n        // this.yScale = d3.scaleLinear()\n        //     .domain([d3.min(data, function (d) { return d.tpr }),\n        //     d3.max(data, function (d) { return d.tpr })]) // input \n        //     .range([this.chartHeight, 0])\n        this.yScale = d3.scaleLinear()\n            .domain([0, 1]) // input \n            .range([this.chartHeight, 0])\n\n        this.xAxis = d3.axisBottom(this.xScale)\n        this.yAxis = d3.axisRight(this.yScale)\n            .tickSize(this.minChartWidth)\n    }\n    drawLines(svg, data) {\n\n\n        svg.append(\"path\")\n            .datum(data) // 10. Binds data to the line \n            .attr(\"class\", \"rocline roccolor\") // Assign a class for styling  \n            .attr(\"d\", this.rocLine); // 11. Calls the line generator \n\n\n        svg.append(\"path\")\n            .datum(data)\n            .attr(\"class\", \"rocarea\")\n            .attr(\"d\", this.rocArea);\n\n        svg.append(\"line\")\n            .attr(\"x1\", this.xScale(0))  //<<== change your code here\n            .attr(\"y1\", this.yScale(0))\n            .attr(\"x2\", this.chartWidth)  //<<== and here\n            .attr(\"y2\", this.yScale(this.yScale.domain()[1]))\n            .attr(\"class\", \"diagonal\")\n    }\n\n    drawGraph(data) {\n        let self = this\n\n        // data = [\n        //     { \"acc\": 0.7, \"threshold\": 1.2428572177886963, \"tp\": 3, \"tn\": 4, \"fp\": 3, \"fn\": 0, \"ton\": 7, \"top\": 3, \"tpr\": 1, \"fpr\": 0.42857142857142855, \"fnr\": 0, \"tnr\": 0.5714285714285714 },\n        //     { \"acc\": 0.5, \"threshold\": 1.2, \"tp\": 3, \"tn\": 2, \"fp\": 5, \"fn\": 0, \"ton\": 7, \"top\": 3, \"tpr\": 1, \"fpr\": 0.7142857142857143, \"fnr\": 0, \"tnr\": 0.2857142857142857 },\n        //     { \"acc\": 1, \"threshold\": 1.3, \"tp\": 3, \"tn\": 7, \"fp\": 0, \"fn\": 0, \"ton\": 7, \"top\": 3, \"tpr\": 1, \"fpr\": 0, \"fnr\": 0, \"tnr\": 1 },\n        //     { \"acc\": 0.7, \"threshold\": 1.9, \"tp\": 0, \"tn\": 7, \"fp\": 0, \"fn\": 3, \"ton\": 7, \"top\": 3, \"tpr\": 0, \"fpr\": 0, \"fnr\": 1, \"tnr\": 1 },\n        //     { \"acc\": 0.8, \"threshold\": 1.25, \"tp\": 3, \"tn\": 5, \"fp\": 2, \"fn\": 0, \"ton\": 7, \"top\": 3, \"tpr\": 1, \"fpr\": 0.2857142857142857, \"fnr\": 0, \"tnr\": 0.7142857142857143 },\n        //     { \"acc\": 0.8, \"threshold\": 1.8, \"tp\": 1, \"tn\": 7, \"fp\": 0, \"fn\": 2, \"ton\": 7, \"top\": 3, \"tpr\": 0.3333333333333333, \"fpr\": 0, \"fnr\": 0.6666666666666666, \"tnr\": 1 },\n        //     { \"acc\": 0.9, \"threshold\": 1.75, \"tp\": 2, \"tn\": 7, \"fp\": 0, \"fn\": 1, \"ton\": 7, \"top\": 3, \"tpr\": 0.6666666666666666, \"fpr\": 0, \"fnr\": 0.3333333333333333, \"tnr\": 1 },\n        //     { \"acc\": 0.6, \"threshold\": 1.2428570985794067, \"tp\": 3, \"tn\": 3, \"fp\": 4, \"fn\": 0, \"ton\": 7, \"top\": 3, \"tpr\": 1, \"fpr\": 0.5714285714285714, \"fnr\": 0, \"tnr\": 0.42857142857142855 }]\n\n\n        this.setupScalesAxes(data)\n\n        this.rocLine = d3.line()\n            .x(function (d, i) { return self.xScale(d.fpr); }) // set the x values for the line generator\n            .y(function (d) { return self.yScale(d.tpr); }) // set the y values for the line generator \n        // .curve(d3.curveMonotoneX) // apply smoothing to the line\n\n        this.rocArea = d3.area()\n            .x(function (d) { return self.xScale(d.fpr); })\n            .y0(this.chartHeight)\n            .y1(function (d) { return self.yScale(d.tpr); });\n\n        const svg = d3.select(\"div.ROCChart\").append(\"svg\")\n            .attr(\"width\", this.chartWidth + this.chartMargin.left + this.chartMargin.right)\n            .attr(\"height\", this.chartHeight + this.chartMargin.top + this.chartMargin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + this.chartMargin.left + \",\" + this.chartMargin.top + \")\");\n\n        this.drawLines(svg, data)\n\n        function customYAxis(g) {\n            g.call(self.yAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"stroke\", \"rgba(172, 172, 172, 0.74)\").attr(\"stroke-dasharray\", \"2,2\");\n            g.selectAll(\".tick text\").attr(\"x\", -20).attr(\"y\", -.01)\n        }\n\n        function customXAxis(g) {\n            g.call(self.xAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"x\", 100)\n            g.selectAll(\".tick text\").attr(\"y\", 15)\n        }\n        // 3. Call the x axis in a group tag\n        svg.append(\"g\")\n            .attr(\"class\", \"x axis\")\n            .attr(\"transform\", \"translate(0,\" + (self.chartHeight + 10) + \")\")\n            .call(customXAxis);\n        // Create an axis component with d3.axisBottom\n\n        // 4. Call the y axis in a group tag\n        svg.append(\"g\")\n            .attr(\"class\", \"y axis\")\n            .call(customYAxis); // Create an axis component with d3.axisLeft\n\n    }\n    render() {\n        // console.log(this.props.data.data[his.props.data.data].loss.toFixed(2));\n\n        return (\n            <div className=\"positionrelative mainchartbox  \">\n                <div className=\"chartlegend p5 mediumdesc displaynone\">\n                    <div className=\"mb3 \">\n                        <div className=\"legendcolorbox mr5  themeblue iblock\"></div>\n                        <div ref=\"trainlabel\" className=\"iblock boldtext mr5\">0.0</div>\n                        <div className=\"iblock \">ROC Curve</div>\n                    </div>\n                    <div>\n                        <div className=\"legendcolorbox mr5 themeorange iblock\"></div>\n                        <div ref=\"validationlabel\" className=\"iblock boldtext mr5\">0.0</div>\n                        <div className=\"iblock \">Validation Loss</div>\n                    </div>\n                </div>\n                <div className=\"charttitle\">  ROC Curve Chart [ AUC : {this.props.data.auc.toFixed(2)} ] </div>\n\n                <div className=\"ROCChart\"> </div>\n            </div>\n\n        );\n    }\n}\n\nexport default ROCChart;    ","import React, { Component } from \"react\";\nimport \"./histogram.css\"\nimport * as d3 from \"d3\"\n\nclass HistogramChart extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            chart: this.props.data\n        }\n        this.minChartWidth = this.props.data.chartWidth\n        this.minChartHeight = this.props.data.chartHeight\n\n        this.numTicks = 40\n    }\n\n    componentDidMount() {\n\n        this.drawGraph(this.props.data.data)\n        // console.log(this.props.data); \n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        // console.log(prevProps.data.epoch, this.props.data.epoch)\n        if ((prevProps.data.epoch !== this.props.data.epoch) || this.props.data.epoch + \"\" === \"0\") {\n            // console.log(\"props updated\");\n            this.updateGraph(this.props.data.data)\n        }\n\n    }\n\n\n    setupScalesAxes(data) {\n        // console.log(data);\n\n        let self = this\n\n        this.chartMargin = { top: 10, right: 5, bottom: 40, left: 20 }\n        this.chartWidth = this.minChartWidth - this.chartMargin.left - this.chartMargin.right\n        this.chartHeight = this.minChartHeight - this.chartMargin.top - this.chartMargin.bottom;\n\n\n\n        this.xScale = d3.scaleLinear()\n            .domain(d3.extent(data, function (d) { return d.mse })).nice()\n            .range([this.chartMargin.left, this.chartWidth - this.chartMargin.right])\n\n        // All Bins\n        this.bins = d3.histogram()\n            .value(function (d) { return d.mse })\n            .domain(this.xScale.domain())\n            .thresholds(this.xScale.ticks(self.numTicks))(data)\n\n        // Normal Bins\n        this.binNorm = d3.histogram()\n            .value(function (d) {\n                if (d.label + \"\" === \"0\") {\n                    return d.mse\n                };\n            })\n            .domain(this.xScale.domain())\n            .thresholds(this.xScale.ticks(self.numTicks))(data)\n\n        // Abnormal Bins\n        this.binsAnorm = d3.histogram()\n            .value(function (d) {\n                if (d.label + \"\" === \"1\") {\n                    return d.mse\n                };\n            })\n            .domain(this.xScale.domain())\n            .thresholds(this.xScale.ticks(self.numTicks))(data)\n\n        // this.xScale = d3.scaleLinear()\n        //     .domain([0, n - 1]) // input\n        //     .range([0, this.chartWidth]); // output\n\n        this.yScale = d3.scaleLinear()\n            .domain([0, d3.max(self.bins, d => d.length)]).nice()\n            .range([this.chartHeight, 0])\n\n        this.xAxis = d3.axisBottom(this.xScale)\n        this.yAxis = d3.axisRight(this.yScale)\n            .tickSize(this.minChartWidth)\n\n\n\n    }\n\n    updateGraph(data) {\n        let self = this\n        // console.log(data[0]);\n\n\n        this.setupScalesAxes(data)\n\n        let svg = d3.select(\"div.histogramchart\") //.transition();\n        // console.log(svg);\n\n        // // Abnormal Bins\n        svg.select(\".normcolor\")\n            .selectAll(\"rect\")\n            .data(self.binNorm)\n            .join(\"rect\")\n            .attr(\"x\", d => self.xScale(d.x0) + 1)\n            .attr(\"width\", d => Math.max(0, self.xScale(d.x1) - self.xScale(d.x0) - 1))\n            .attr(\"y\", d => self.yScale(d.length))\n            .attr(\"height\", d => self.yScale(0) - self.yScale(d.length))\n        // .transition();\n\n        svg.select(\".anormcolor\")\n            .selectAll(\"rect\")\n            .data(self.binsAnorm)\n            .join(\"rect\")\n            .attr(\"x\", d => self.xScale(d.x0) + 1)\n            .attr(\"width\", d => Math.max(0, self.xScale(d.x1) - self.xScale(d.x0) - 1))\n            .attr(\"y\", d => self.yScale(d.length))\n            .attr(\"height\", d => self.yScale(0) - self.yScale(d.length))\n\n        // Remove previous threshold line\n        // d3.select(\".thresholdline\").transition().duration(5500).style(\"opacity\", 0).remove()\n        let thresholdVal = this.getThreshold(data)\n        svg.select(\".thresholdline\")\n            .attr(\"x1\", this.xScale(thresholdVal))\n            .attr(\"x2\", this.xScale(thresholdVal))\n\n        svg.select(\".thresholdtext\")\n            .attr(\"x\", this.xScale(thresholdVal))\n            .text(\"Anomaly Threshold - \" + thresholdVal.toFixed(3));\n\n        function customYAxis(g) {\n            g.call(self.yAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"stroke\", \"rgba(172, 172, 172, 0.74)\").attr(\"stroke-dasharray\", \"2,2\");\n            g.selectAll(\".tick text\").attr(\"x\", -20).attr(\"y\", -.01)\n        }\n\n        function customXAxis(g) {\n            g.call(self.xAxis);\n            g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"x\", 100)\n            g.selectAll(\".tick text\").attr(\"y\", 15)\n        }\n\n        svg.select(\".y.axis\")\n            .call(customYAxis);\n\n        svg.select(\".x.axis\")\n            .call(customXAxis);\n\n\n    }\n\n    getThreshold(data) {\n        let meanNormal = d3.mean(data, function (d) {\n            if (d.label + \"\" === \"0\") {\n                return d.mse\n            };\n        })\n\n        let meanAbnormal = d3.mean(data, function (d) {\n            if (d.label + \"\" === \"1\") {\n                return d.mse\n            };\n        })\n\n        let midPoint = (meanNormal + meanAbnormal) / 2\n        let walkBackPercentage = 0.2\n        let thresholdVal = Math.min(meanNormal, meanAbnormal) + (midPoint - Math.min(meanNormal, meanAbnormal)) * walkBackPercentage\n\n\n        return thresholdVal\n    }\n\n    drawGraph(data) {\n        let self = this\n        this.setupScalesAxes(data)\n        // console.log(data[0]);\n\n        const svg = d3.select(\"div.histogramchart\").append(\"svg\")\n            .attr(\"width\", this.chartWidth + this.chartMargin.left + this.chartMargin.right)\n            .attr(\"height\", this.chartHeight + this.chartMargin.top + this.chartMargin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + this.chartMargin.left + \",\" + this.chartMargin.top + \")\");\n\n\n\n        // normal histogram\n        svg.append(\"g\")\n            .attr(\"class\", \"normcolor\")\n            .selectAll(\"rect\")\n            .data(self.binNorm)\n            .join(\"rect\")\n            .attr(\"x\", d => self.xScale(d.x0) + 1)\n            .attr(\"width\", d => Math.max(0, self.xScale(d.x1) - self.xScale(d.x0) - 1))\n            .attr(\"y\", d => self.yScale(d.length))\n            .attr(\"height\", d => self.yScale(0) - self.yScale(d.length));\n\n        // Abnormal histogram\n        svg.append(\"g\")\n            .attr(\"class\", \"anormcolor\")\n            .selectAll(\"rect\")\n            .data(self.binsAnorm)\n            .join(\"rect\")\n            .attr(\"x\", d => self.xScale(d.x0) + 1)\n            .attr(\"width\", d => Math.max(0, self.xScale(d.x1) - self.xScale(d.x0) - 1))\n            .attr(\"y\", d => self.yScale(d.length))\n            .attr(\"height\", d => self.yScale(0) - self.yScale(d.length));\n\n        //add threshold line\n        let thresholdVal = this.getThreshold(data)\n        // threshold line\n        svg.append(\"line\")\n            .attr(\"class\", \"thresholdline\")\n            .attr(\"x1\", this.xScale(thresholdVal))  //<<== change your code here\n            .attr(\"y1\", this.yScale(0))\n            .attr(\"x2\", this.xScale(thresholdVal))  //<<== and here\n            .attr(\"y2\", this.yScale(this.yScale.domain()[1]))\n        // threshold label\n        svg.append(\"text\")\n            .attr(\"class\", \"thresholdtext\")\n            .attr(\"x\", this.xScale(thresholdVal))\n            .attr(\"y\", this.yScale(this.yScale.domain()[1]))\n            .attr(\"dy\", \".95em\")\n            .attr(\"dx\", \".35em\")\n            .text(\"Anomaly Threshold - \" + thresholdVal.toFixed(3));\n\n        function customYAxis(g) {\n            g.call(self.yAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"stroke\", \"rgba(172, 172, 172, 0.74)\").attr(\"stroke-dasharray\", \"2,2\");\n            g.selectAll(\".tick text\").attr(\"x\", -20).attr(\"y\", -.01)\n        }\n\n        function customXAxis(g) {\n            g.call(self.xAxis);\n            g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"x\", 100)\n            g.selectAll(\".tick text\").attr(\"y\", 15)\n        }\n        // 3. Call the x axis in a group tag\n        svg.append(\"g\")\n            .attr(\"class\", \"x axis\")\n            .attr(\"transform\", \"translate(0,\" + (self.chartHeight + 10) + \")\")\n            .call(customXAxis); // Create an axis component with d3.axisBottom\n\n        // 4. Call the y axis in a group tag\n        svg.append(\"g\")\n            .attr(\"class\", \"y axis\")\n            .call(customYAxis); // Create an axis component with d3.axisLeft\n\n    }\n\n    render() {\n        return (\n            <div className=\"positionrelative mainchartbox \">\n                <div className=\"chartlegend p5 mediumdesc\">\n                    <div className=\"mb3\"> <div className=\"legendcolorbox mr5  themeblue iblock\"></div> Normal </div>\n                    <div> <div className=\"legendcolorbox mr5 themeorange iblock\"></div> Abnormal </div>\n                </div>\n                <div className=\"charttitle\"> Histogram of Mean Square Error </div>\n                <div className=\"histogramchart \"></div>\n            </div>\n        );\n    }\n}\n\nexport default HistogramChart;","import React, { Component } from \"react\";\nimport \"./scatterplot.css\"\nimport * as d3 from \"d3\"\n\n\nclass ScatterPlot extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            chart: this.props.data\n        }\n        this.minChartWidth = this.props.data.chartWidth\n        this.minChartHeight = this.props.data.chartHeight\n\n        this.numTicks = 40\n    }\n\n    componentDidMount() {\n\n\n        this.drawGraph(this.props.data.data)\n\n        // console.log(this.props.data);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n\n        if ((prevProps.data.epoch !== this.props.data.epoch) || this.props.data.epoch + \"\" === \"0\") {\n            // console.log(\"props updated\");\n            this.updateGraph(this.props.data.data)\n        }\n\n    }\n\n    updateGraph(data) {\n        let self = this\n        // console.log(data[0]);\n\n        d3.select(\"div.scatterplotchart\").selectAll(\".scatternode > *\").remove();\n\n        this.setupScalesAxes(data)\n\n        let svg = d3.select(\"div.scatterplotchart\") //.transition();\n\n        // svg.selectAll(\"dot\").remove()\n\n        svg.select(\".scatternode\")\n            .selectAll(\"dot\")\n            .data(data)\n            .join(\"circle\")\n            .attr(\"cx\", function (d) { return self.xScale(d.x); })\n            .attr(\"cy\", function (d) { return self.yScale(d.y); })\n            .attr(\"r\", 2.5)\n            .attr(\"class\", d => {\n                if (d.label + \"\" === \"0\") {\n                    return \"normcolor\"\n                } else {\n                    return \"anormcolor\"\n                }\n            })\n\n\n        function customYAxis(g) {\n            g.call(self.yAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"stroke\", \"rgba(172, 172, 172, 0.74)\").attr(\"stroke-dasharray\", \"2,2\");\n            g.selectAll(\".tick text\").attr(\"x\", -20).attr(\"y\", -.01)\n        }\n\n        function customXAxis(g) {\n            g.call(self.xAxis);\n            g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"x\", 100)\n            g.selectAll(\".tick text\").attr(\"y\", 15)\n        }\n\n        svg.select(\".y.axis\")\n            .call(customYAxis);\n\n        svg.select(\".x.axis\")\n            .call(customXAxis);\n\n\n\n    }\n    setupScalesAxes(data) {\n        // console.log(data);\n\n        // let self = this\n\n        this.chartMargin = { top: 10, right: 5, bottom: 40, left: 20 }\n        this.chartWidth = this.minChartWidth - this.chartMargin.left - this.chartMargin.right\n        this.chartHeight = this.minChartHeight - this.chartMargin.top - this.chartMargin.bottom;\n\n\n        this.xScale = d3.scaleLinear()\n            .domain([d3.min(data, function (d) { return d.x }), d3.max(data, function (d) { return d.x })]) // input  \n            .range([this.chartMargin.left, this.chartWidth - this.chartMargin.right])\n\n\n\n        this.yScale = d3.scaleLinear()\n            .domain([d3.min(data, function (d) { return d.y }), d3.max(data, function (d) { return d.y })]) // input  \n            .range([this.chartHeight, 0])\n\n        this.xAxis = d3.axisBottom(this.xScale)\n        this.yAxis = d3.axisRight(this.yScale)\n            .tickSize(this.minChartWidth)\n\n\n\n    }\n\n    drawGraph(data) {\n        let self = this\n        this.setupScalesAxes(data)\n\n        const svg = d3.select(\"div.scatterplotchart\").append(\"svg\")\n            .attr(\"width\", this.chartWidth + this.chartMargin.left + this.chartMargin.right)\n            .attr(\"height\", this.chartHeight + this.chartMargin.top + this.chartMargin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + this.chartMargin.left + \",\" + this.chartMargin.top + \")\");\n\n\n        svg.append('g')\n            .attr(\"class\", \"scatternode\")\n            .selectAll(\"dot\")\n            .data(data)\n            .join(\"circle\")\n            .attr(\"cx\", function (d) { return self.xScale(d.x); })\n            .attr(\"cy\", function (d) { return self.yScale(d.y); })\n            .attr(\"r\", 2.5)\n            .attr(\"class\", d => {\n                if (d.label + \"\" === \"0\") {\n                    return \"normcolor\"\n                } else {\n                    return \"anormcolor\"\n                }\n            })\n\n\n        function customYAxis(g) {\n            g.call(self.yAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"stroke\", \"rgba(172, 172, 172, 0.74)\").attr(\"stroke-dasharray\", \"2,2\")\n            g.selectAll(\".tick text\").attr(\"x\", -20).attr(\"y\", -.01)\n        }\n\n        function customXAxis(g) {\n            g.call(self.xAxis);\n            g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"x\", 100)\n            g.selectAll(\".tick text\").attr(\"y\", 15)\n        }\n        // 3. Call the x axis in a group tag\n        svg.append(\"g\")\n            .attr(\"class\", \"x axis\")\n            .attr(\"transform\", \"translate(0,\" + (self.chartHeight + 10) + \")\")\n            .call(customXAxis); // Create an axis component with d3.axisBottom\n\n        // 4. Call the y axis in a group tag\n        svg.append(\"g\")\n            .attr(\"class\", \"y axis\")\n            .call(customYAxis); // Create an axis component with d3.axisLeft\n\n    }\n    render() {\n        return (\n            <div className=\"positionrelative mainchartbox\">\n                <div className=\"chartlegend p5 mediumdesc\">\n                    <div className=\"mb3\"> <div className=\"legendcolorbox mr5  themeblue iblock\"></div> Normal </div>\n                    <div> <div className=\"legendcolorbox mr5 themeorange iblock\"></div> Abnormal </div>\n                </div>\n                <div className=\"charttitle\">\n                    Bottleneck ScatterPlot\n                </div>\n                <div className=\"scatterplotchart\"> </div>\n            </div>\n\n        );\n    }\n}\n\nexport default ScatterPlot;","import React, { Component } from \"react\";\nimport \"./losschart.css\"\nimport * as d3 from \"d3\"\n\n\nclass LossChart extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            chart: this.props.data\n        }\n        this.minChartWidth = this.props.data.chartWidth\n        this.minChartHeight = this.props.data.chartHeight\n\n        this.numTicks = 40\n        this.dotRadius = 3.5\n    }\n\n    componentDidMount() {\n        this.drawGraph(this.props.data.data)\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if ((prevProps.data.epoch !== this.props.data.epoch) && this.props.data.data.length > 0) {\n            // console.log(\"props updated\");\n            this.updateGraph(this.props.data.data)\n            this.refs[\"trainlabel\"].innerHTML = this.props.data.data[this.props.data.data.length - 1].loss.toFixed(4)\n            this.refs[\"validationlabel\"].innerHTML = this.props.data.data[this.props.data.data.length - 1].val_loss.toFixed(4)\n            // console.log(this.props.data.data[0].loss, this.refs[\"trainlabel\"]);\n\n        }\n    }\n\n    updateGraph(data) {\n        let self = this\n\n        // d3.select(\"div.losschart\").selectAll(\".lossline\").remove();\n        // d3.select(\"div.losschart\").selectAll(\".pointdot\").remove();\n\n        this.setupScalesAxes(data)\n        let svg = d3.select(\"div.losschart\").transition();\n\n        svg.select(\".losstraincolor\")\n            .duration(self.animationDuration)\n            .attr(\"d\", this.trainLine(data)); // 11. Calls the line generator \n\n        svg.select(\".lossvalcolor\")\n            .duration(self.animationDuration)\n            .attr(\"d\", this.valLine(data)); // 11. Calls the line generator  \n\n        function customYAxis(g) {\n            g.call(self.yAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"stroke\", \"rgba(172, 172, 172, 0.74)\").attr(\"stroke-dasharray\", \"2,2\");\n            g.selectAll(\".tick text\").attr(\"x\", -30).attr(\"y\", -.01)\n        }\n\n        function customXAxis(g) {\n            g.call(self.xAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"x\", 100)\n            g.selectAll(\".tick text\").attr(\"y\", 15)\n        }\n\n        svg.select(\".y.axis\")\n            .call(customYAxis);\n\n        svg.select(\".x.axis\")\n            .call(customXAxis);\n\n    }\n    setupScalesAxes(data) {\n        // console.log(data);\n\n        // let self = this \n        this.chartMargin = { top: 10, right: 10, bottom: 40, left: 30 }\n        this.chartWidth = this.minChartWidth - this.chartMargin.left - this.chartMargin.right\n        this.chartHeight = this.minChartHeight - this.chartMargin.top - this.chartMargin.bottom;\n\n        var n = data.length;\n\n        this.xScale = d3.scaleLinear()\n            .domain([0, n - 1]) // input\n            .range([0, this.chartWidth]); // output\n\n\n        this.yScale = d3.scaleLinear()\n            .domain([d3.min(data, function (d) {\n                // console.log(Math.min(d.loss, d.val_loss))\n                return Math.min(d.loss, d.val_loss)\n            }), d3.max(data, function (d) {\n                return Math.max(d.loss, d.val_loss)\n            })]) // input \n            .range([this.chartHeight, 0])\n\n        this.xAxis = d3.axisBottom(this.xScale)\n        this.yAxis = d3.axisRight(this.yScale)\n            .tickSize(this.minChartWidth)\n    }\n    drawLines(svg, data) {\n\n\n        svg.append(\"path\")\n            .datum(data) // 10. Binds data to the line \n            .attr(\"class\", \"lossline losstraincolor\") // Assign a class for styling  \n            .attr(\"d\", this.trainLine); // 11. Calls the line generator \n\n        svg.append(\"path\")\n            .datum(data) // 10. Binds data to the line \n            .attr(\"class\", \"lossline lossvalcolor\") // Assign a class for styling  \n            .attr(\"d\", this.valLine); // 11. Calls the line generator \n\n    }\n\n    drawGraph(data) {\n        let self = this\n\n\n        // data = [{ epoch: 1, loss: 0.9578104019165039, val_loss: 0.9471035003662109, traintime: 2.247 },\n        // { epoch: 2, loss: 0.7673317790031433, val_loss: 0.8629779815673828, traintime: 0.146 },\n        // { epoch: 3, loss: 0.749285876750946, val_loss: 0.8709790110588074, traintime: 0.152 },\n        // { epoch: 4, loss: 0.7410370707511902, val_loss: 0.8575628995895386, traintime: 0.11 }]\n        // data = [{ epoch: this.CumulativeSteps, loss: 0, val_loss: 0, traintime: 0 }]\n\n        this.setupScalesAxes(data)\n\n        this.trainLine = d3.line()\n            .x(function (d, i) { return self.xScale(i); }) // set the x values for the line generator\n            .y(function (d) { return self.yScale(d.loss); }) // set the y values for the line generator \n            .curve(d3.curveMonotoneX) // apply smoothing to the line\n\n        this.valLine = d3.line()\n            .x(function (d, i) { return self.xScale(i); }) // set the x values for the line generator\n            .y(function (d) { return self.yScale(d.val_loss); }) // set the y values for the line generator \n            .curve(d3.curveMonotoneX) // apply smoothing to the line\n\n\n\n        const svg = d3.select(\"div.losschart\").append(\"svg\")\n            .attr(\"width\", this.chartWidth + this.chartMargin.left + this.chartMargin.right)\n            .attr(\"height\", this.chartHeight + this.chartMargin.top + this.chartMargin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + this.chartMargin.left + \",\" + this.chartMargin.top + \")\");\n\n        this.drawLines(svg, data)\n\n        function customYAxis(g) {\n            g.call(self.yAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"stroke\", \"rgba(172, 172, 172, 0.74)\").attr(\"stroke-dasharray\", \"2,2\");\n            g.selectAll(\".tick text\").attr(\"x\", -20).attr(\"y\", -.01)\n        }\n\n        function customXAxis(g) {\n            g.call(self.xAxis);\n            // g.select(\".domain\").remove();\n            g.selectAll(\".tick line\").attr(\"x\", 100)\n            g.selectAll(\".tick text\").attr(\"y\", 15)\n        }\n        // 3. Call the x axis in a group tag\n        svg.append(\"g\")\n            .attr(\"class\", \"x axis\")\n            .attr(\"transform\", \"translate(0,\" + (self.chartHeight + 10) + \")\")\n            .call(customXAxis); // Create an axis component with d3.axisBottom\n\n        // 4. Call the y axis in a group tag\n        svg.append(\"g\")\n            .attr(\"class\", \"y axis\")\n            .call(customYAxis); // Create an axis component with d3.axisLeft\n\n    }\n    render() {\n        // console.log(this.props.data.data[his.props.data.data].loss.toFixed(2));\n\n        return (\n            <div className=\"positionrelative  \">\n                <div className=\"chartlegend p5 mediumdesc\">\n                    <div className=\"mb3\">\n                        <div className=\"legendcolorbox mr5  themeblue iblock\"></div>\n                        <div ref=\"trainlabel\" className=\"iblock boldtext mr5\">0.0</div>\n                        <div className=\"iblock \">Train Loss</div>\n                    </div>\n                    <div>\n                        <div className=\"legendcolorbox mr5 themeorange iblock\"></div>\n                        <div ref=\"validationlabel\" className=\"iblock boldtext mr5\">0.0</div>\n                        <div className=\"iblock \">Validation Loss</div>\n                    </div>\n                </div>\n                <div className=\"charttitle\">  Training Loss Chart</div>\n\n                <div className=\"losschart borders\"> </div>\n            </div>\n\n        );\n    }\n}\n\nexport default LossChart;    ","import React, { Component } from \"react\";\n// import { Button } from \"carbon-components-react\"\nimport { LeaderLine, animOptions } from \"../helperfunctions/HelperFunctions\"\nimport { Add16, Subtract16 } from '@carbon/icons-react';\nimport \"./composemodel.css\"\nimport * as _ from \"lodash\"\n\nclass ComposeModel extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            hiddenDims: this.props.hiddenDims,\n            latentDim: this.props.latentDim,\n            maxLayers: 10,\n            minLayers: 2,\n            maxUnits: 12,\n            minUnits: 2,\n            defaultLayerDim: 3,\n            isTraining: this.props.isTraining,\n            lineWidth: 1.5,\n            latentLineWidth: 2.5,\n            animationDuration: 350\n        }\n\n        this.lineHolder = []\n\n        this.rightTopAnchor = { x: \"100%\", y: \"5%\" }\n        this.rightBottomAnchor = { x: \"100%\", y: \"95%\" }\n        this.leftTopAnchor = { x: 0, y: \"5%\" }\n        this.leftBottomAnchor = { x: \"0%\", y: \"95%\" }\n        this.rightMiddle = { x: \"100%\", y: \"50%\" }\n        this.leftMiddle = { x: \"0%\", y: \"50%\" }\n\n\n        this.blueColor = \"rgba(0, 0, 255, 0.89)\"\n        this.greyColor = \"grey\"\n    }\n    componentDidMount() {\n        this.drawAllLines();\n    }\n\n\n    getElement(network, attributeName, attributeValue) {\n        return document.querySelector(\"div.\" + network).querySelector(\"[\" + attributeName + \"=\" + attributeValue + \"]\")\n    }\n\n    addLayerLines(network, layer) {\n        if ((layer * 1) !== (this.state.hiddenDims.length - 1)) {\n            let startId = \"layerdiv\" + layer;\n            let endId = \"layerdiv\" + (layer * 1 + 1);\n            let startEl = this.getElement(network, \"layerdiv\", startId)\n            let endEl = this.getElement(network, \"layerdiv\", endId)\n            // console.log(startEl, endEl);\n            let params = { pathType: \"straight\", startId: startId, endId: endId, network: network }\n            this.drawLeaderLine(startEl, endEl, network === \"encoder\" ? this.rightTopAnchor : this.leftTopAnchor, network === \"encoder\" ? this.leftTopAnchor : this.rightTopAnchor, params)\n            this.drawLeaderLine(startEl, endEl, network === \"encoder\" ? this.rightTopAnchor : this.leftTopAnchor, network === \"encoder\" ? this.leftBottomAnchor : this.rightBottomAnchor, params)\n            this.drawLeaderLine(startEl, endEl, network === \"encoder\" ? this.rightBottomAnchor : this.leftBottomAnchor, network === \"encoder\" ? this.leftTopAnchor : this.rightTopAnchor, params)\n            this.drawLeaderLine(startEl, endEl, network === \"encoder\" ? this.rightBottomAnchor : this.leftBottomAnchor, network === \"encoder\" ? this.leftBottomAnchor : this.rightBottomAnchor, params)\n        } else {\n            let startId = \"layerdiv\" + layer;\n            let startEl = this.getElement(network, \"layerdiv\", startId)\n            // let encoderDiv = document.getElementById(\"mainencoderdiv\")\n            let latentDiv = document.getElementById(\"latentdiv\")\n            // let decoderDiv = document.getElementById(\"maindecoderdiv\")\n\n            let params = { pathType: \"arc\", startId: startId, endId: \"latent\", network: network }\n            this.drawLeaderLine(startEl, latentDiv, network === \"encoder\" ? this.rightMiddle : this.leftMiddle, network === \"encoder\" ? this.leftMiddle : this.rightMiddle, params)\n\n        }\n    }\n    addEncDecLines(layer) {\n        this.addLayerLines(\"encoder\", layer)\n        this.addLayerLines(\"decoder\", layer)\n    }\n    drawAllLines() {\n        // Add connector lines for encoder decoder \n        for (const layer in this.state.hiddenDims) {\n            this.addEncDecLines(layer)\n\n        }\n    }\n\n\n    removeLayerLines(lineId) {\n\n        // Remove lines associated with a deleted layer\n        // Remove it from the DOM and also from the holder array \n\n\n        let toRemove = new Map()\n        this.lineHolder.forEach(function (each, i) {\n            if (each.startId === lineId || each.endId === lineId) {\n                each.line.remove()\n                toRemove.set(i, \"dot\")\n            } else {\n                each.line.position()\n            }\n        })\n\n        // Remove lines queed up for deletion\n        let newHolder = []\n        this.lineHolder.forEach(function (each, i) {\n            if (toRemove.get(i) == null) {\n                newHolder.push(each)\n            }\n        });\n\n\n        // console.log(\"old\", this.lineHolder.length, newHolder.length);\n        this.lineHolder = newHolder\n\n\n    }\n\n\n    drawLeaderLine(startElement, endElement, startAnchor, endAnchor, params) {\n\n        let lineColor = this.state.isTraining ? \"grey\" : \"rgba(0, 0, 255, 0.89)\"\n        let lineWidth = this.state.lineWidth\n        let plugType = \"disc\"\n\n        let line = new LeaderLine(\n            LeaderLine.pointAnchor(startElement, startAnchor),\n            LeaderLine.pointAnchor(endElement, endAnchor), {\n            color: lineColor,\n            startPlug: plugType,\n            endPlug: plugType,\n            startPlugColor: lineColor,\n            path: params.pathType,\n            size: lineWidth,\n            hide: true,\n            // dash: { gap: 2, animation: params.endId === \"latent\" ? this.state.isTraining : false }\n            dash: { gap: 3 }\n        });\n        // document.querySelector('.leader-line').style.zIndex = -100\n        animOptions.duration = this.state.animationDuration\n        line.show(\"draw\", animOptions)\n        this.lineHolder.push({ line: line, startId: params.startId, endId: params.endId, network: params.network })\n    }\n\n\n    removeAllLines(line) {\n        this.lineHolder.forEach(function (each) {\n            each.line.remove()\n        })\n        this.lineHolder = []\n    }\n\n\n    redrawLine(lineId) {\n        this.lineHolder.forEach(function (each) {\n            if (each.startId === lineId || each.endId === lineId) {\n                // each.line.color = \"red\"\n                each.line.hide(\"none\")\n                each.line.show(\"draw\", animOptions)\n                each.line.position();\n            } else {\n                each.line.position();\n            }\n        })\n    }\n\n    animateLines() {\n        // let self = this\n        let color = this.state.isTraining ? this.greyColor : this.blueColor\n        // console.log(self.props.isTraining);\n        let opt = {\n            color: color,\n            startPlugColor: color\n        }\n\n        this.lineHolder.forEach(function (each) {\n            each.line.setOptions(opt)\n        })\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        // Handle addition of a new node/unit in a layer \n        for (const i in this.state.hiddenDims) {\n            if (this.state.hiddenDims[i] !== prevState.hiddenDims[i]) {\n                this.redrawLine(\"layerdiv\" + i)\n                this.props.updateModelDims(this.state.hiddenDims, this.state.latentDim)\n\n            }\n        }\n\n        // Handle layer addition or removal \n        if (this.state.hiddenDims.length > prevState.hiddenDims.length) {\n            this.removeLayerLines(\"latent\")\n            this.addEncDecLines(this.state.hiddenDims.length - 2)\n            this.addEncDecLines(this.state.hiddenDims.length - 1)\n\n\n        } else if (this.state.hiddenDims.length < prevState.hiddenDims.length) {\n            this.removeLayerLines(\"layerdiv\" + this.state.hiddenDims.length)\n            this.addEncDecLines(this.state.hiddenDims.length - 1)\n\n        }\n\n\n        if (prevState.isTraining !== this.props.isTraining) {\n            // console.log(\"training toggled\");\n            this.setState({ isTraining: this.props.isTraining })\n            this.animateLines()\n\n        }\n\n        // Updaate parent state once dims change\n        if (this.state.hiddenDims.length !== prevState.hiddenDims.length || this.state.latentDim[0] !== prevState.latentDim[0]) {\n            // console.log(\"latent or hidden changed\");\n\n            this.props.updateModelDims(this.state.hiddenDims, this.state.latentDim)\n        }\n\n        // console.log(this.lineHolder.length);\n\n\n\n    }\n\n    componentWillUnmount() {\n        this.removeAllLines()\n    }\n\n\n\n    setStateVal(varGroup, newDims) {\n        if (varGroup + \"\" === \"encoder\") {\n            this.setState({ hiddenDims: newDims })\n        } else if (varGroup + \"\" === \"decoder\") {\n            this.setState({ decoderDims: newDims })\n        } else if (varGroup + \"\" === \"latent\") {\n            this.setState({ latentDim: newDims })\n        }\n    }\n\n    getDims(dimType) {\n        switch (dimType) {\n            case \"encoder\":\n                return this.state.hiddenDims.slice()\n            case \"decoder\":\n                return this.state.decoderDims.slice()\n            case \"latent\":\n                return this.state.latentDim.slice()\n            default:\n                break\n        }\n    }\n\n\n\n\n    updateLayerClick(e) {\n\n\n        let currentDims = this.getDims(e.target.getAttribute(\"layergroup\"));\n\n        if (e.target.getAttribute(\"buttonaction\") === \"add\") {\n\n            if (currentDims.length + 1 <= this.state.maxLayers) {\n                currentDims.push(this.state.defaultLayerDim)\n                this.setStateVal(e.target.getAttribute(\"layergroup\"), currentDims)\n            }\n\n        } else {\n\n            if (currentDims.length - 1 >= this.state.minLayers) {\n                currentDims.pop()\n                this.setStateVal(e.target.getAttribute(\"layergroup\"), currentDims)\n            }\n        }\n    }\n\n\n    updateUnits(e) {\n\n        // Update state variables for dimension units\n        let currentDims = this.getDims(e.target.getAttribute(\"layergroup\"));\n        let currentUnit = currentDims[e.target.getAttribute(\"unitindex\") * 1]\n        // console.log(e.target.getAttribute(\"unitindex\"), currentUnit);\n        if (e.target.getAttribute(\"buttonaction\") === \"add\") {\n\n            if (currentUnit + 1 <= this.state.maxUnits) {\n                currentDims[e.target.getAttribute(\"unitindex\") * 1] = currentUnit + 1\n                this.setStateVal(e.target.getAttribute(\"layergroup\"), currentDims)\n            }\n\n        } else {\n\n            if (currentUnit - 1 >= this.state.minUnits) {\n                currentDims[e.target.getAttribute(\"unitindex\") * 1] = currentUnit - 1\n                this.setStateVal(e.target.getAttribute(\"layergroup\"), currentDims)\n            }\n\n        }\n    }\n\n    nodeHover(e) {\n        console.log(e.target.getAttribute(\"nodeunit\"));\n\n    }\n\n\n    render() {\n\n        let latentLayers = this.state.latentDim.map((data, layerindex) => {\n            let eachLayer = _.range(data).map((unitindex) => {\n                return (\n                    <div className={\"eachunitbox \" + (this.state.isTraining ? \" unitgrey\" : \" unitblue\")} key={\"eachunit\" + unitindex}>\n                        {/* {index} */}\n                    </div>\n                )\n            })\n            return (\n                <div key={\"latentlayer\" + layerindex} className=\" h100 flex flexfull flexjustifycenter \">\n                    <div className=\" mwc flex flexjustifycenter mb5 mt5 \">\n                        <div className=\"\" >\n                            <div className=\"smalldesc mb3 unselectable latentunittitle\">{data} units</div>\n                            <div\n                                layergroup=\"latent\"\n                                unitindex={layerindex}\n                                buttonaction=\"add\"\n                                onClick={this.updateUnits.bind(this)}\n                                className=\"updatebutton unselectable mb3 clickable\">\n                                <Add16 className=\"unclickable\"></Add16>\n                            </div>\n                            <div id=\"latentdiv\" className=\"layerdiv  pt3 mb3\">{eachLayer}</div>\n                            <div\n                                layergroup=\"latent\"\n                                unitindex={layerindex}\n                                buttonaction=\"subtract\"\n                                onClick={this.updateUnits.bind(this)}\n                                className=\"updatebutton unselectable  clickable\">\n                                <Subtract16 className=\"unclickable\"></Subtract16>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n            )\n        })\n\n        let encLayers = this.state.hiddenDims.map((data, layerindex) => {\n\n            let eachLayer = _.range(data).map((unitindex) => {\n                // console.log(\"layerunit\" + layerindex + unitindex)\n                return (\n                    <div nodeunit={\"layerunit\" + layerindex + unitindex} ref={\"layerunit\" + layerindex + unitindex} className={\"eachunitbox \" + (this.state.isTraining ? \" unitgrey\" : \" unitblue\")} key={\"eachunit\" + unitindex}></div>\n                )\n            })\n            return (\n                <div key={\"enclayer\" + layerindex} className=\"iblock  mr10 flex flexfull flexjustifycenter \">\n                    <div className=\"iblock  mb5 mt5\">\n                        <div>\n                            <div className=\"smalldesc mb3 unselectable \">{data} units</div>\n                            <div\n                                layergroup=\"encoder\"\n                                unitindex={layerindex}\n                                buttonaction=\"add\"\n                                onClick={this.updateUnits.bind(this)}\n                                className=\"updatebutton unselectable mb3 clickable\">\n                                <Add16 className=\"unclickable\"></Add16>\n                            </div>\n                            <div layerdiv={\"layerdiv\" + layerindex} className=\"layerdiv  pt3 mb3\">{eachLayer}</div>\n                            <div\n                                layergroup=\"encoder\"\n                                unitindex={layerindex}\n                                buttonaction=\"subtract\"\n                                onClick={this.updateUnits.bind(this)}\n                                className=\"updatebutton unselectable  clickable\">\n                                <Subtract16 className=\"unclickable\"></Subtract16>\n                            </div>\n\n                        </div>\n                    </div>\n                </div>\n            )\n        })\n\n        // console.log(encLayers.length);\n        let decLayers = _.reverse(_.clone(encLayers));\n\n        return (\n            <div className=\"mb10 \">\n\n\n\n                {/* Layer controls */}\n\n                <div className=\"flex w100 mb5 \">\n                    {/* <div className=\"mediumdesc mb5 mt5 mr10\"> * we map the same configuration for both encoder and decoder </div> */}\n                    <div className=\"flex5 \">\n                        <div className=\"mediumdesc networktitle  p5\"> Encoder {this.state.hiddenDims.length} Layers </div>\n                    </div>\n                    <div className=\"buttonbar mr10 ml10 \">\n                        <div\n                            layergroup=\"encoder\"\n                            buttonaction=\"add\"\n                            onClick={this.updateLayerClick.bind(this)}\n                            className=\"updatebutton unselectable mr5 clickable\">\n                            <Add16 className=\"unclickable\"></Add16>\n                        </div>\n                        <div\n                            layergroup=\"encoder\"\n                            buttonaction=\"subtract\"\n                            onClick={this.updateLayerClick.bind(this)}\n                            className=\"updatebutton unselectable  clickable\">\n                            <Subtract16 className=\"unclickable\"></Subtract16>\n                        </div>\n                    </div>\n                    <div className=\"unselectable flex5     \">\n                        <div className=\"flex p5 networktitle  mediumdesc \">\n                            <div className=\"flex flexjustifyleft \"> Update layers</div>\n                            <div className=\"flex flexfull flexjustifycenter   \"></div>\n                            <div className=\"  \"> Decoder {this.state.hiddenDims.length} Layers </div>\n                        </div>\n                    </div>\n                </div>\n\n                {/* Section titles */}\n                <div className=\"flex mb10 displaynone\">\n                    <div className=\"flex4 textaligncenter mediumdesc boldtext\"> Encoder </div>\n                    <div className=\"flex2 textaligncenter  mediumdesc boldtext\"> Bottleneck </div>\n                    <div className=\"flex4 textaligncenter  mediumdesc boldtext\"> Decoder </div>\n                </div>\n                {/* Encoder, bottleneck, Decoder  */}\n                <div className=\"flex\">\n                    <div className=\"iotextdata unselectable mr10 p5 rad4 \">\n                        Input Data\n                    </div>\n                    <div id=\"mainencoderdiv\" ref=\"encoderbox\" className=\"encoder greyhighlight rad4 pl5 flex5 mr10 \">\n                        <div className=\"layerbar flex  flexjustifycenter pb10 pt10\">\n                            {encLayers}\n                        </div>\n\n                    </div>\n                    <div ref=\"latentbox\" className=\"bottlneck pr5 pl5 rad4  mr10 \">\n                        <div className=\"layerbar  h100  flex  flexjustifycenter  \">\n                            {latentLayers}\n                        </div>\n                    </div>\n                    <div id=\"maindecoderdiv\" ref=\"decoderbox\" className=\"decoder greyhighlight rad4 pl5 flex5 \">\n                        <div className=\"layerbar flex   flexjustifycenter  pb10 pt10\">\n                            {decLayers}\n                        </div>\n                    </div>\n\n                    <div className=\"iotextdata unselectable ml10 p5  rad4\">\n                        Output Data\n                    </div>\n\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default ComposeModel;","// Craft an autoencoder\n\n// const tf = require('@tensorflow/tfjs');\n// Craft an autoencoder\n\nconst tf = require('@tensorflow/tfjs');\n// const _ = require('lodash');\n\n\n\nexport function buildModel(params) {\n\n    const numFeatures = params.numFeatures    // Set feaetures to size of features \n    const latentDim = params.latentDim\n    const hiddenDim = params.hiddenDim\n    const outputActivation = params.outputActivation\n\n    // console.log(numFeatures);\n\n\n    // Specify encoder \n    // const input = tf.input({ shape: [numFeatures] })\n    // let encoderHidden = tf.layers.dense({ units: 15, activation: \"relu\" }).apply(input);\n    // encoderHidden = tf.layers.dense({ units: 7, activation: \"relu\" }).apply(encoderHidden);\n    // const z_ = tf.layers.dense({ units: latentDim }).apply(encoderHidden);\n    // const encoder = tf.model({ inputs: input, outputs: z_, name: \"encoder\" })\n\n    const input = tf.input({ shape: [numFeatures] })\n    let encoderHidden = tf.layers.dense({ units: hiddenDim[0], activation: \"relu\" }).apply(input);\n    let i = 1\n    while (i < hiddenDim.length) {\n        encoderHidden = tf.layers.dense({ units: hiddenDim[i], activation: \"relu\" }).apply(encoderHidden);\n        i++\n    }\n    const z_ = tf.layers.dense({ units: latentDim }).apply(encoderHidden);\n    const encoder = tf.model({ inputs: input, outputs: z_, name: \"encoder\" })\n\n\n\n    const latentInput = tf.input({ shape: [latentDim] })\n    let decoderHidden = tf.layers.dense({ units: hiddenDim[hiddenDim.length - 1], activation: \"relu\" }).apply(latentInput);\n    let j = hiddenDim.length - 1\n    while (j > 0) {\n        j--;\n        decoderHidden = tf.layers.dense({ units: hiddenDim[j], activation: \"relu\" }).apply(decoderHidden);\n\n    }\n\n    const decoderOutput = tf.layers.dense({ units: numFeatures, activation: outputActivation }).apply(decoderHidden);\n    const decoder = tf.model({ inputs: latentInput, outputs: decoderOutput, name: \"decoder\" })\n\n    // link output of ender to decoder \n    let output = decoder.apply(encoder.apply(input))\n\n    // Construct AE with both encoder and decoder\n    const ae = tf.model({ inputs: input, outputs: output, name: \"autoencoder\" })\n\n\n    ae.compile({ optimizer: params.optimizer, loss: \"meanSquaredError\" })\n    return ae\n}\n\n\n","import React, { Component } from \"react\";\nimport { Loading, Dropdown, Slider } from \"carbon-components-react\"\nimport \"./train.css\"\nimport * as tf from '@tensorflow/tfjs';\nimport { computeAccuracyGivenThreshold } from \"../helperfunctions/HelperFunctions\"\nimport ROCChart from \"../rocchart/ROCChart\"\n// custom charts \nimport HistogramChart from \"../histogram/HistogramChart\"\nimport ScatterPlot from \"../scatterplot/ScatterPlot\"\nimport LossChart from \"../losschart/LossChart\"\nimport ComposeModel from \"../composemodel/ComposeModel\"\n\nimport { Reset16, PlayFilledAlt16, PauseFilled16 } from '@carbon/icons-react';\nimport { buildModel } from \"./models/ae\"\nimport * as _ from \"lodash\"\n\n// const _ = require('lodash');\nclass Train extends Component {\n\n    constructor(props) {\n        super(props)\n\n        // Load sameple data\n        this.testData = require(\"../../data/ecg/test.json\")\n        this.trainData = require(\"../../data/ecg/train.json\")\n\n        // Model update method passed to model composer component\n        this.updateModelDims = this.updateModelDims.bind(this)\n\n        this.stepOptions = [{ id: \"opt1\", text: \"50\", value: 50, type: \"steps\" }, { id: \"opt2\", text: \"100\", value: 100, type: \"steps\" }]\n        this.batchSizeOptions = [{ id: \"opt1\", text: \"64\", value: 64, type: \"batchsize\" }, { id: \"opt2\", text: \"128\", value: 128, type: \"batchsize\" }, { id: \"opt3\", text: \"256\", value: 256, type: \"batchsize\" }, { id: \"opt3\", text: \"512\", value: 512, type: \"batchsize\" }, { id: \"opt3\", text: \"1024\", value: 1024, type: \"batchsize\" }]\n        this.learningRateOptions = [{ id: \"opt1\", text: \"0.01\", value: 0.01, type: \"learningrate\" }, { id: \"opt2\", text: \"0.001\", value: 0.001, type: \"learningrate\" }, { id: \"opt3\", text: \"0.0001\", value: 0.0001, type: \"learningrate\" }]\n        this.trainingDataOptions = [{ id: \"opt1\", text: \"500\", value: 500, type: \"traindatasize\" }, { id: \"opt2\", text: \"1000\", value: 1000, type: \"traindatasize\" }, { id: \"opt3\", text: \"2000\", value: 2000, type: \"traindatasize\" }]\n        this.testDataOptions = [{ id: \"opt1\", text: \"100\", value: 100, type: \"testdatasize\" }, { id: \"opt2\", text: \"200\", value: 200, type: \"testdatasize\" }, { id: \"opt3\", text: \"500\", value: 500, type: \"testdatasize\" }]\n\n\n        this.selectedTrainDataOption = 0\n        this.selectedTestDataOption = 1\n\n        this.trainMetricHolder = []\n        this.CumulativeSteps = 0;\n\n        this.state = {\n            apptitle: \"Anomagram\",\n            isTraining: false,\n            trainDataShape: [0, 0],\n            testDataShape: [0, 0],\n            mseData: [],\n            rocData: [],\n            createdModel: null,\n            encodedData: [],\n            selectedData: 0,\n\n            currentEpoch: 0,\n            numFeatures: this.testData[0].data.length,\n            hiddenLayers: 2,\n            latentDim: 2,\n            hiddenDim: [12, 10, 8, 6],\n            learningRate: this.learningRateOptions[0].value,\n            adamBeta1: 0.5,\n            outputActivation: \"sigmoid\",\n            batchSize: this.batchSizeOptions[3].value,\n            numSteps: this.stepOptions[0].value,\n            numEpochs: 1,\n\n\n            trainMetrics: this.trainMetricHolder,\n            CumulativeSteps: 0,\n            trainDataSize: this.trainingDataOptions[this.selectedTrainDataOption].value,\n            testDataSize: this.testDataOptions[this.selectedTestDataOption].value,\n\n            modelStale: true,\n            bestMetric: { acc: 0, fpr: 0, fnr: 0, tnr: 0, tpr: 0, threshold: 0 },\n            minThreshold: 0,\n            maxThreshold: 1,\n\n\n            showRocChart: true,\n            showLossChart: true,\n            showBottleneckScatterPlot: true,\n            showMseHistogram: true,\n            validateOnStep: true,\n\n            auc: 0\n        }\n\n\n        this.currentSteps = 0;\n\n        this.xsTrain = []\n        this.xsTest = []\n        this.yTest = []\n\n        this.trainDataPath = \"data/ecg/train.json\"\n        this.testDataPath = \"data/ecg/test.json\"\n\n        this.chartWidth = 350;\n        this.chartHeight = 250;\n\n        this.warmupSampleSize = 1\n\n\n    }\n\n    componentDidMount() {\n        // this.loadSavedModel()\n\n        this.generateDataTensors()\n\n\n        this.createModel()\n\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if ((prevState.isTraining !== this.state.isTraining) && this.state.isTraining === false) {\n            // console.log(\"training ended\"); \n        }\n\n        if (this.currentSteps === 0 && prevState.mseData[0] !== this.state.mseData[0]) {\n            // console.log(\"mse updated at 0\");\n            this.computeAccuracyMetrics(this.state.mseData)\n        }\n\n        if (this.state.CumulativeSteps !== prevState.CumulativeSteps) {\n            // console.log(this.state.CumulativeSteps);\n            this.computeAccuracyMetrics(this.state.mseData)\n        }\n\n        // if train or test size updated, regenerate tensors\n        if (this.state.trainDataSize !== prevState.trainDataSize || this.state.testDataSize !== prevState.testDataSize) {\n            this.generateDataTensors()\n        }\n    }\n\n\n    disposeModelTensors() {\n        if (this.createdModel) {\n            // this.encoder.dispose()\n            this.createdModel.dispose()\n            this.optimizer.dispose()\n\n        }\n    }\n\n    componentWillUnmount() {\n        this.disposeModelTensors()\n        this.xsTest.dispose()\n        this.xsTrain.dispose()\n        // this.xsWarmup.dispose()\n        // console.log(tf.memory());\n\n    }\n    createModel() {\n\n        // dispose of existing model to release tensors from memory\n        this.disposeModelTensors()\n        //construct model\n        this.optimizer = tf.train.adam(this.state.learningRate, this.state.adamBeta1)\n        let modelParams = {\n            numFeatures: this.state.numFeatures,\n            hiddenLayers: this.state.hiddenLayers,\n            latentDim: this.state.latentDim,\n            hiddenDim: this.state.hiddenDim,\n            optimizer: this.optimizer,\n            outputActivation: \"sigmoid\"\n        }\n\n        this.createdModel = buildModel(modelParams)\n        this.setState({ modelStale: false })\n        this.getPredictions()\n\n\n        // this.createdModel.summary()\n\n        // setTimeout(() => {\n        // this.modelWarmUp()\n        // }, 5000);\n\n        // showToast(\"success\", \"Model successfully created\")\n        // console.log(tf.memory());\n    }\n\n    // modelWarmUp() {\n    //     let startTime = new Date();\n    //     this.createdModel.fit(this.xsWarmup,\n    //         this.xsWarmup, { epochs: 1, verbose: 0, batchSize: this.warmupSampleSize }\n    //     ).then(res => {\n    //         let endTime = new Date();\n    //         let elapsedTime = (endTime - startTime) / 1000\n    //         console.log(\"Warmup done\", elapsedTime);\n    //     });\n\n    // }\n    trainModel() {\n        // for (let i = 0; i < this.numSteps; i++) {\n\n        this.currentSteps++;\n        //update progresssbar\n        // let progress = Math.floor((this.currentSteps / this.state.numSteps) * 100) + \"%\"\n        // this.refs[\"glowbar\"].style.width = progress;\n\n\n\n        this.CumulativeSteps++;\n        this.setState({ CumulativeSteps: this.CumulativeSteps });\n        // \n        let startTime = new Date();\n        this.createdModel.fit(this.xsTrain,\n            this.xsTrain, { epochs: this.state.numEpochs, verbose: 0, batchSize: this.state.batchSize, validationData: [this.xsTest, this.xsTest] }\n        ).then(res => {\n            let endTime = new Date();\n            let elapsedTime = (endTime - startTime) / 1000\n            // console.log(elapsedTime);\n\n            let metricRow = { epoch: this.CumulativeSteps, loss: res.history.loss[0], val_loss: res.history.val_loss[0], traintime: elapsedTime }\n            this.trainMetricHolder.push(metricRow)\n            // this.setState({ trainMetrics: this.trainMetricHolder });\n            // console.log(\"Step loss\", this.currentSteps, this.CumulativeSteps, res.history.loss[0], elapsedTime);\n            this.getPredictions();\n\n            // console.log(this.state.numSteps);\n\n            if (this.state.numSteps > this.currentSteps && this.state.isTraining) {\n                this.setState({ currentEpoch: this.currentSteps })\n                this.trainModel()\n            } else {\n                this.currentSteps = 0\n                this.setState({ isTraining: false })\n            }\n        });\n    }\n\n    async loadSavedModel() {\n        // TODO .. launch loadning spinnr\n        let modelPath = \"/webmodel/ecg/model.json\"\n        this.savedModel = await tf.loadLayersModel(modelPath);\n        console.log(\"model loaded\");\n        this.loadTestData()\n\n    }\n\n\n    computeAccuracyMetrics(data) {\n\n        let uniqueMse = _.uniq(_.map(data, 'mse'))\n\n        uniqueMse = _(uniqueMse).sortBy().value()\n        uniqueMse.reverse()\n\n\n\n\n        let rocMetricHolder = []\n        let rocSum = 0\n        let prevMetric = { fpr: 0, tpr: 0 }\n\n        uniqueMse.forEach((each, i) => {\n            let metric = computeAccuracyGivenThreshold(data, each)\n\n            rocMetricHolder.push(metric)\n            // if (i < uniqueMse.length) {\n            rocSum += (prevMetric.tpr) * (metric.fpr - prevMetric.fpr)\n            // rocSum += ((prevMetric.tpr + metric.tpr) / 2) * (metric.fpr - prevMetric.fpr)\n            // console.log(i, rocSum);\n            // }\n            prevMetric = metric\n\n        });\n\n        // Add point (1,1) to compute AUC\n        // use trapezium area rule to calculate area\n        if (prevMetric.fpr !== 1) {\n            rocMetricHolder.push({ fpr: 1, tpr: prevMetric.tpr })\n            rocSum += ((prevMetric.tpr + 1) / 2) * (1 - prevMetric.fpr)\n            // rocSum += prevMetric.tpr * (1 - prevMetric.fpr)\n        }\n\n\n        // console.log(rocSum, \" Region under curve\");\n        // console.log(rocMetricHolder);\n\n\n        this.setState({ rocData: rocMetricHolder })\n        this.setState({ auc: rocSum })\n        // console.log(\"mse initial\", _.min(uniqueMse), _.max(uniqueMse));\n\n        let bestMetric = _.maxBy(rocMetricHolder, \"acc\")\n        this.setState({ bestMetric: bestMetric })\n        this.setState({ minThreshold: _.min(uniqueMse) })\n        this.setState({ maxThreshold: _.max(uniqueMse) })\n\n\n    }\n\n\n    getPredictions() {\n        let self = this;\n\n        // Get predictions \n        // let startTime = new Date()\n        let preds = this.createdModel.predict(this.xsTest, { batchSize: this.state.batchSize })\n        // let elapsedTime = (new Date() - startTime) / 1000\n        // console.log(\"prediction time\", elapsedTime);\n\n\n        //With large batchsize - 0.001, defualt batchsize .. 0.015\n        // Compute mean squared error difference between predictions and ground truth\n        const mse = tf.tidy(() => {\n            return tf.sub(preds, this.xsTest).square().mean(1)\n        })\n        // let mse = tf.sub(preds, this.xsTest).square().mean(1) //tf.losses.meanSquaredError(preds, xsTest)\n        let mseDataHolder = []\n        mse.array().then(array => {\n            array.forEach((element, i) => {\n                // console.log({ \"mse\": element, \"label\": yTest[i] });\n                mseDataHolder.push({ \"mse\": element, \"label\": this.yTest[i] })\n                // console.log(mseDataHolder.length)\n            });\n            self.setState({ mseData: mseDataHolder })\n        });\n\n\n\n        // Generate encoder output \n        this.encoder = tf.model({ inputs: this.createdModel.inputs, outputs: this.createdModel.getLayer(\"encoder\").getOutputAt(1) });\n        let encoderPredictions = this.encoder.predict(this.xsTest)\n\n\n        let encPredHolder = []\n        encoderPredictions.array().then(array => {\n            array.forEach((element, i) => {\n                encPredHolder.push({ x: element[0], y: element[1], \"label\": this.yTest[i] })\n            });\n            self.setState({ encodedData: encPredHolder })\n        })\n\n\n        preds.dispose()\n        encoderPredictions.dispose()\n        mse.dispose()\n        // console.log(tf.memory());\n\n    }\n\n    updateModelDims(hiddenDims, latentDim) {\n        // console.log(hiddenDims, latentDim);\n        this.setState({ hiddenDim: hiddenDims })\n        this.setState({ latentDim: latentDim[0] })\n        this.setState({ modelStale: true })\n\n    }\n\n    // visualizeMSE(mse)\n    generateDataTensors() {\n        //shuffle data\n        this.trainData = _.shuffle(this.trainData)\n        this.testData = _.shuffle(this.testData)\n\n        //train tensor\n        let trainEcg = []\n        for (let row in this.trainData) {\n            let val = this.trainData[row]\n            if (val.target + \"\" === 1 + \"\") {\n                trainEcg.push(val)\n                if (trainEcg.length === this.state.trainDataSize) {\n                    break;\n                }\n            }\n        }\n\n\n        this.xsTrain = tf.tensor2d(trainEcg.map(item => item.data\n        ), [trainEcg.length, trainEcg[0].data.length])\n        this.setState({ trainDataShape: this.xsTrain.shape })\n\n\n        // this.xsWarmup = tf.tensor2d(trainEcg.slice(0, this.warmupSampleSize).map(item => item.data\n        // ), [this.warmupSampleSize, trainEcg[0].data.length])\n\n        // test tensor  \n        // create test data TENSOR from test data json array \n        let testData = this.testData.slice(0, this.state.testDataSize)\n        this.xsTest = tf.tensor2d(testData.map(item => item.data\n        ), [testData.length, testData[0].data.length])\n\n        // create yLabel Tensor\n        this.yTest = testData.map(item => item.target + \"\" === 1 + \"\" ? 0 : 1)\n\n        this.setState({ testDataShape: this.xsTest.shape })\n\n    }\n\n    trainButtonClick(e) {\n        if (this.state.isTraining) {\n            this.setState({ isTraining: false })\n        } else {\n            this.setState({ isTraining: true })\n            this.trainModel()\n        }\n    }\n\n    resetModelButtonClick(e) {\n        this.setState({ isTraining: false })\n        this.CumulativeSteps = 0\n        this.setState({ CumulativeSteps: 0 })\n        // this.setState({ mseData: [] })\n        this.trainMetricHolder = []\n        this.setState({ trainMetrics: this.trainMetricHolder })\n        this.createModel()\n    }\n\n    updateModelParam(e) {\n        // console.log(e);\n        switch (e.selectedItem.type) {\n            case \"steps\":\n                this.setState({ numSteps: e.selectedItem.value })\n                break\n            case \"batchsize\":\n                this.setState({ batchSize: e.selectedItem.value })\n\n                break\n            case \"learningrate\":\n                this.setState({ learningRate: e.selectedItem.value })\n                break\n            case \"traindatasize\":\n                this.setState({ trainDataSize: e.selectedItem.value })\n\n                break\n            case \"testdatasize\":\n                this.setState({ testDataSize: e.selectedItem.value })\n                break\n            default:\n                break\n        }\n\n\n    }\n\n\n    updateThreshold(e) {\n        let threshVal = this.state.minThreshold + (e.value / 100) * (this.state.maxThreshold - this.state.minThreshold)\n        let bestMetric = computeAccuracyGivenThreshold(this.state.mseData, threshVal)\n        // console.log(e.value, threshVal); \n        this.setState({ bestMetric: bestMetric })\n\n    }\n\n\n    render() {\n        // console.log(this.state.minThreshold, this.state.maxThreshold);\n\n        return (\n            <div>\n\n                <div className=\"flex greyhighlight  pl10 rad3  \">\n                    <div className=\"  flex flexjustifycenter \">\n                        <div className=\" iblock \">\n                            <div\n                                onClick={this.trainButtonClick.bind(this)}\n                                className={(\"iblock circlelarge circlebutton mr5 flexcolumn flex flexjustifycenter clickable \") + (this.state.modelStale ? \" disabled\" : \"\")}>\n                                {!this.state.isTraining && <PlayFilledAlt16 style={{ fill: \"white\" }} className=\"unselectable unclickable\" />}\n                                {this.state.isTraining && <PauseFilled16 style={{ fill: \"white\" }} className=\"unselectable unclickable\" />}\n                            </div>\n                        </div>\n                        <div className=\"iblock\">\n                            <div className=\"iblock  flex flexjustifycenter  \">\n                                <div\n                                    onClick={this.resetModelButtonClick.bind(this)}\n                                    className={\"iblock circlesmall circlebutton mr5 flex flexjustifycenter clickable\" + (this.state.isTraining ? \"  disabled\" : \"\")}>\n                                    <Reset16 style={{ fill: \"white\" }} className=\"unselectable unclickable\" />\n\n                                </div>\n                            </div>\n\n                        </div>\n                    </div>\n\n\n\n                    <div className=\"flex  flexjustifycenter \">\n                        <div ref=\"activeloaderdiv\" >\n                            <Loading\n                                className=\" \"\n                                active={this.state.isTraining ? true : false}\n                                small={true}\n                                withOverlay={false}\n                            > </Loading>\n                        </div>\n\n                    </div>\n                    <div className=\"flexfull unselectable  flex flexjustifyleft flexjustifycenter \">\n                        <div className=\" p10   iblock\">\n                            <div className=\"iblock mr10\">\n                                <div className=\"mediumdesc pb7\"> Steps {this.state.numSteps} - {this.state.CumulativeSteps} </div>\n                                <Dropdown\n                                    id=\"epochsdropdown\"\n                                    label=\"Steps\"\n                                    items={this.stepOptions}\n                                    initialSelectedItem={this.stepOptions[0]}\n                                    itemToString={item => (item ? item.text : \"\")}\n                                    onChange={this.updateModelParam.bind(this)}\n                                />\n                            </div>\n\n                            <div className=\"iblock mr10\">\n                                <div className=\"mediumdesc pb7\"> Batchsize {this.state.batchSize} </div>\n                                <Dropdown\n                                    id=\"batchsizedropdown\"\n                                    label=\"Batch Size\"\n                                    items={this.batchSizeOptions}\n                                    initialSelectedItem={this.batchSizeOptions[3]}\n                                    itemToString={item => (item ? item.text : \"\")}\n                                    onChange={this.updateModelParam.bind(this)}\n                                />\n                            </div>\n\n                            <div className=\"iblock mr10\">\n                                <div className=\"mediumdesc pb7\"> Learning Rate {this.state.learningRate} </div>\n                                <Dropdown\n                                    id=\"learningratedropdown\"\n                                    label=\"Learning Rate\"\n                                    items={this.learningRateOptions}\n                                    itemToString={item => (item ? item.text : \"\")}\n                                    initialSelectedItem={this.learningRateOptions[0]}\n                                    onChange={this.updateModelParam.bind(this)}\n                                />\n                            </div>\n\n                            <div className=\"iblock mr10\">\n                                <div className=\"mediumdesc pb7\">Training Data Size {this.state.trainDataShape[0]} </div>\n                                <Dropdown\n                                    id=\"trainingdatadropdown\"\n                                    label=\"Training Data\"\n                                    items={this.trainingDataOptions}\n                                    initialSelectedItem={this.trainingDataOptions[this.selectedTrainDataOption]}\n                                    itemToString={item => (item ? item.text : \"\")}\n                                    onChange={this.updateModelParam.bind(this)}\n                                />\n                            </div>\n\n                            <div className=\"iblock mr10\">\n                                <div className=\"mediumdesc pb7\">Test Data Size {this.state.testDataShape[0]} </div>\n                                <Dropdown\n                                    id=\"testdatadropdown\"\n                                    label=\"Test Data\"\n                                    items={this.testDataOptions}\n                                    itemToString={item => (item ? item.text : \"\")}\n                                    initialSelectedItem={this.testDataOptions[this.selectedTestDataOption]}\n                                    onChange={this.updateModelParam.bind(this)}\n                                />\n                            </div>\n\n\n\n                            <div>  </div>\n                        </div>\n                    </div>\n\n                </div>\n\n                <div ref=\"glowbar\" className={\"glowbar w0 \"} style={{ width: Math.floor((this.currentSteps / this.state.numSteps) * 100) + \"%\" }}></div>\n\n\n                {/* <div className={\"mb5 \" + (this.state.isTraining ? \" rainbowbar\" : \" displaynone\")}></div> */}\n\n\n                {/* // Model Composer  */}\n                <div className=\"flex mt10 mb10 h100\">\n                    <div className=\"flexfull mr10 \">\n                        <ComposeModel\n                            hiddenDims={this.state.hiddenDim}\n                            latentDim={[this.state.latentDim]}\n                            isTraining={this.state.isTraining}\n                            updateModelDims={this.updateModelDims}\n                        />\n                    </div>\n\n                    {this.state.bestMetric &&\n\n                        <div className={\"iblock  flex3 perfmetrics \" + (this.state.isTraining ? \" disabled \" : \" \")}>\n                            <div className=\"boldtext pb10 pt10 \">\n                                Model Evaluation Metrics\n                            </div>\n                            <div className=\"mb10 greyhighlight rad4 p10\">\n                                <Slider\n                                    min={0} //{(this.state.minThreshold.toFixed(4) * 1)}\n                                    max={100}//{(this.state.maxThreshold.toFixed(4) * 1)}\n                                    step={5}\n                                    minLabel={\"%\"}\n                                    maxLabel={\"%\"}\n                                    value={((this.state.bestMetric.threshold - this.state.minThreshold) / (this.state.maxThreshold - this.state.minThreshold)) * 100}\n                                    stepMuliplier={10}\n                                    disabled={this.state.isTraining ? true : false}\n                                    labelText={\"Threshold \" + (this.state.bestMetric.threshold).toFixed(5) + \"[ \" + (((this.state.bestMetric.threshold - this.state.minThreshold) / (this.state.maxThreshold - this.state.minThreshold)).toFixed(2) * 100) + \" % ] \"}\n                                    hideTextInput={true}\n                                    onChange={this.updateThreshold.bind(this)}\n                                />\n                            </div>\n                            <div className=\"flex\">\n                                <div className=\" mb10 p5 greyhighlight rad4 textaligncenter mr10 flex5\" >\n                                    <div className=\"metricvalue textaligncenter  rad4\"> {(this.state.bestMetric.acc * 100).toFixed(2)}  %</div>\n                                    <div className=\"metricdesc mediumdesc p5\"> Best Accuracy </div>\n                                </div>\n                                <div className=\" mb10 p5 greyhighlight rad4 textaligncenter flex5\" >\n                                    <div className=\"metricvalue textaligncenter  rad4\"> {(this.state.auc).toFixed(2)} </div>\n                                    <div className=\"metricdesc mediumdesc p5\"> AUC </div>\n                                </div>\n                            </div>\n                            <div className=\"mb10 flex\">\n\n                                <div className=\"flex5 mr10 p10 greyhighlight rad4 textaligncenter\">\n                                    <div className=\"metricvalue textaligncenter\"> {(this.state.bestMetric.fpr * 100).toFixed(2)}  % </div>\n                                    <div className=\"metricdesc mediumdesc p5\"> False Positive Rate </div>\n                                </div>\n                                <div className=\"flex5  p10 greyhighlight rad4 textaligncenter\">\n                                    <div className=\"metricvalue\"> {(this.state.bestMetric.fnr * 100).toFixed(2)} % </div>\n                                    <div className=\"metricdesc displayblock mediumdesc p5\"> False Negative Rate </div>\n                                </div>\n\n                            </div>\n                            <div className=\"flex\">\n                                <div className=\"flex5 p10 mr10 greyhighlight rad4 textaligncenter\">\n                                    <div className=\"metricvalue\"> {(this.state.bestMetric.tpr * 100).toFixed(2)} % </div>\n                                    <div className=\"metricdesc mr10 mediumdesc p5\"> True Positive Rate </div>\n                                </div>\n                                <div className=\"flex5 p10 greyhighlight rad4 textaligncenter\">\n                                    <div className=\"metricvalue\"> {(this.state.bestMetric.tnr * 100).toFixed(2)} % </div>\n                                    <div className=\"metricdesc mediumdesc p5\"> True Negative Rate </div>\n                                </div>\n                            </div>\n\n                        </div>}\n\n                </div>\n\n                {true &&\n                    <div>\n\n\n                        {this.state.showLossChart && <div className=\"iblock mr10  h100 \" >\n                            <div className={\"positionrelative h100 \" + (this.state.trainMetrics.length <= 0 ? \" \" : \"\")} style={{ width: this.chartWidth, height: this.chartHeight }}>\n                                {this.state.trainMetrics.length <= 0 &&\n                                    <div className=\"notrainingdata\">  No training loss data yet </div>\n                                }\n                                {this.state.trainMetrics.length > 0 &&\n                                    <LossChart\n                                        data={{\n                                            data: this.state.trainMetrics,\n                                            chartWidth: this.chartWidth,\n                                            chartHeight: this.chartHeight,\n                                            epoch: this.state.CumulativeSteps\n                                        }}\n\n                                    ></LossChart>\n                                }\n\n                            </div>\n                        </div>}\n\n                        {this.state.showRocChart && <div className=\"iblock p10\">\n                            {this.state.rocData.length > 0 &&\n                                <ROCChart\n                                    data={{\n                                        chartWidth: 350,\n                                        chartHeight: 250,\n                                        data: this.state.rocData,\n                                        isTraining: this.state.isTraining,\n                                        epoch: this.state.CumulativeSteps,\n                                        auc: this.state.auc\n\n                                    }}\n\n                                ></ROCChart>}\n                        </div>}\n\n\n\n                        {this.state.showMseHistogram && <div className=\"iblock mr10 \">\n                            {this.state.mseData.length > 0 &&\n                                <HistogramChart\n                                    data={{\n                                        data: this.state.mseData,\n                                        chartWidth: this.chartWidth,\n                                        chartHeight: this.chartHeight,\n                                        epoch: this.state.CumulativeSteps\n                                    }}\n                                ></HistogramChart>\n                            }\n                        </div>}\n\n\n                        {this.state.showBottleneckScatterPlot && <div className=\"iblock mr10  \">\n                            {this.state.encodedData.length > 0 &&\n                                <ScatterPlot\n                                    data={{\n                                        data: this.state.encodedData,\n                                        chartWidth: this.chartWidth,\n                                        chartHeight: this.chartHeight,\n                                        epoch: this.state.CumulativeSteps\n                                    }}\n\n                                ></ScatterPlot>\n                            }\n                        </div>}\n\n\n\n                    </div>\n                }\n                <br />\n                <br />\n                <br />\n\n            </div>\n        );\n    }\n}\n\nexport default Train;","import React, { Component } from \"react\";\nimport { Reset16, PlayFilledAlt16 } from '@carbon/icons-react';\nimport ROCChart from \"./../rocchart/ROCChart\"\nimport { computeAccuracyGivenThreshold } from \"./../helperfunctions/HelperFunctions\"\nimport * as _ from \"lodash\"\nimport \"./faq.css\"\n\nclass Faq extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.mseData = [{ mse: 1.2428572177886963, label: 0 },\n        { mse: 1.2, label: 0 },\n        { mse: 1.3, label: 0 },\n        { mse: 1.9, label: 0 },\n        { mse: 1.2, label: 0 },\n        { mse: 1.3, label: 0 },\n        { mse: 1.25, label: 0 },\n        { mse: 1.8, label: 1 },\n        { mse: 1.75, label: 1 },\n        { mse: 1.2428570985794067, label: 0 }]\n        this.state = {\n            metricData: []\n        }\n    }\n\n\n\n    componentDidMount() {\n\n        let uniqueMse = _.uniq(_.map(this.mseData, 'mse'))\n        uniqueMse = _(uniqueMse).sortBy().value()\n        console.log(uniqueMse);\n\n        let metricHolder = []\n        uniqueMse.forEach(each => {\n            metricHolder.push(computeAccuracyGivenThreshold(this.mseData, each))\n        });\n        this.setState({ metricData: metricHolder })\n        console.log(JSON.stringify(metricHolder));\n\n\n    }\n    render() {\n\n\n\n\n\n        return (\n            <div>\n                <div className=\"border  p10\">\n                    <div className=\"border iblock  p10\">\n                        <div\n                            className={(\"iblock border circlebutton mr5 flexcolumn flex flexjustifycenter clickable \")}>\n                            {<PlayFilledAlt16 style={{ fill: \"white\" }} className=\"unselectable unclickable\" />}\n\n                        </div>\n                    </div>\n                    <div className=\"iblock\">\n                        <div className=\"border iblock  flex flexjustifycenter  p10\">\n                            <div\n                                className={\"iblock border circlesmall circlebutton mr5 flex flexjustifycenter clickable\"}>\n                                <Reset16 style={{ fill: \"white\" }} className=\"unselectable unclickable\" />\n                            </div>\n                        </div>\n\n                    </div>\n                </div>\n\n                <div className=\"p10\">\n                    {this.state.metricData.length > 0 &&\n                        <ROCChart\n                            data={{\n                                chartWidth: 350,\n                                chartHeight: 250,\n                                data: this.state.metricData\n                            }}\n\n                        ></ROCChart>}\n                </div>\n            </div >\n        );\n    }\n}\n\nexport default Faq;","import React, { Component } from \"react\";\nimport {\n    Route,\n    HashRouter,\n\n} from \"react-router-dom\";\n\n// import { InlineNotification } from 'carbon-components-react';\n\n\nimport \"./template.css\"\n\n// import Sidebar from \"./Sidebar\";\nimport AppHeader from \"./header/AppHeader\";\nimport Footer from \"./footer/Footer\";\nimport Viz from \"./viz/Viz\";\nimport Train from \"./train/Train\"\nimport ComposeModel from \"./composemodel/ComposeModel\"\nimport Faq from \"./faq/Faq\"\n\nimport { createBrowserHistory } from 'history';\n\n\n// ReactGA.initialize(\"UA-131578973-1\")\nconst history = createBrowserHistory({\n    basename: \"\", // The base URL of the app (see below)\n    forceRefresh: false, // Set true to force full page refreshes\n    keyLength: 6, // The length of location.key\n    // A function to use to confirm navigation with the user (see below)\n    getUserConfirmation: (message, callback) => callback(window.confirm(message))\n});\n// history.listen(location => {\n//     ReactGA.set({ page: location.hash })\n//     ReactGA.pageview(location.hash)\n//     // console.log(location.pathname, location.hash)\n// })\n\nlet linkHolder = {}\n\nfunction updateLh(location) {\n\n    if (location.hash in linkHolder) {\n        linkHolder[location.hash] = linkHolder[location.hash] + 1\n    } else {\n        linkHolder[location.hash] = 0\n    }\n\n}\n\nhistory.listen(location => {\n    updateLh(location)\n});\n\n\nclass Main extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n        }\n\n        // console.log(window.location)\n        updateLh(window.location)\n    }\n\n    componentDidMount() {\n        // ReactGA.pageview(window.location.hash)\n        // document.title = \"Image Analysis Explorer | Explore Convolutional Neural Nets for Imagee Analysis\";\n    }\n\n\n\n\n\n\n    render() {\n        const Composer = (props) => {\n            return (\n                <ComposeModel\n                    hiddenDims={[6, 5, 4, 3]}\n                    latentDim={[4]}\n                    isTraining={false}\n\n                />\n            );\n        }\n\n        return (\n            <HashRouter>\n                <AppHeader></AppHeader>\n\n                <div className=\"container-fluid p10\">\n                    <Route exact path=\"/\" component={Viz} />\n                    <Route exact path=\"/train\" component={Train} />\n                    <Route exact path=\"/compose\" component={Composer} />\n                    <Route exact path=\"/faq\" component={Faq} />\n\n                    <div id=\"notificatiionbox\" className=\"notificationtopright p5  \">\n\n                    </div>\n                </div>\n                <div id=\"footer\"> <Footer /> </div>\n            </HashRouter>\n\n        );\n    }\n}\n\nexport default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Main from \"./components/Main\";\nimport * as serviceWorker from './serviceWorker';\n\nimport \"./components/template.scss\"\n// import 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n    <Main />,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.register()"],"sourceRoot":""}